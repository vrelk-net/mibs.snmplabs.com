#
# PySNMP MIB module WLSX-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/selby1jr/src/mibs/mibs.snmplabs.com/asn1/WLSX-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed Jul 24 12:23:31 2024
# On host IT-156955 platform Linux version 5.15.153.1-microsoft-standard-WSL2 by user selby1jr
# Using Python version 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
#
wlsrEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsrEnterpriseMibModules")
ArubaIfState, ArubaStackIfTopoJoined, ArubaPhyType, ArubaStackState, ArubaHTMode, ArubaAPConductorStatus, ArubaVrrpState, ArubaHTExtChannel, ArubaConfigurationState, ArubaOperStateValue, ArubaEnableValue, ArubaAuthenticationMethods, ArubaDenyListReason, ArubaThresholdResourceType, ArubaConfigurationChangeType, ArubaSwitchRole, ArubaIfStateChangeReason, ArubaFrameType, ArubaAccessPointMode, ArubaAddressType, ArubaBlackListReason, ArubaAPUplinkChangeReason, ArubaDBType, InterfaceIndex, ArubaARMChangeReason, ArubaPortalServerDownReason, ArubaStackChangeEvent, ArubaStationType, ArubaAPMasterStatus, ArubaAPUplinkType = mibBuilder.importSymbols("ARUBA-TC", "ArubaIfState", "ArubaStackIfTopoJoined", "ArubaPhyType", "ArubaStackState", "ArubaHTMode", "ArubaAPConductorStatus", "ArubaVrrpState", "ArubaHTExtChannel", "ArubaConfigurationState", "ArubaOperStateValue", "ArubaEnableValue", "ArubaAuthenticationMethods", "ArubaDenyListReason", "ArubaThresholdResourceType", "ArubaConfigurationChangeType", "ArubaSwitchRole", "ArubaIfStateChangeReason", "ArubaFrameType", "ArubaAccessPointMode", "ArubaAddressType", "ArubaBlackListReason", "ArubaAPUplinkChangeReason", "ArubaDBType", "InterfaceIndex", "ArubaARMChangeReason", "ArubaPortalServerDownReason", "ArubaStackChangeEvent", "ArubaStationType", "ArubaAPMasterStatus", "ArubaAPUplinkType")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, snmpModules, Counter64, Gauge32, Integer32, Bits, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, ModuleIdentity, iso, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "snmpModules", "Counter64", "Gauge32", "Integer32", "Bits", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "ModuleIdentity", "iso", "IpAddress", "MibIdentifier")
TDomain, DisplayString, DateAndTime, PhysAddress, StorageType, TimeInterval, TextualConvention, TestAndIncr, TruthValue, MacAddress, RowStatus, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "TDomain", "DisplayString", "DateAndTime", "PhysAddress", "StorageType", "TimeInterval", "TextualConvention", "TestAndIncr", "TruthValue", "MacAddress", "RowStatus", "TAddress")
wlsrTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11))
wlsrTrapMIB.setRevisions(('1924-05-14 08:37',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsrTrapMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsrTrapMIB.setLastUpdated('2405140837Z')
if mibBuilder.loadTexts: wlsrTrapMIB.setOrganization('Aruba, a Hewlett Packard Enterprise company')
if mibBuilder.loadTexts: wlsrTrapMIB.setContactInfo('Postal: 3333 Scott Blvd, Santa Clara, CA 95054 E-mail: aruba-ext-eng-reg@hpe.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsrTrapMIB.setDescription('This MIB defines the Traps generated by the switch. ')
wlsxTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1))
wlsxTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1))
wlsxTrapDefinitionsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2))
wlsxTrapAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPMacAddress.setDescription(' This object is used in the traps to indicate the wired MAC address of an access point, for which the trap is being raised. ')
wlsxTrapAPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPIpAddress.setDescription(' This object is used in the traps to indicate the IP address of an access point, for which the trap is being raised. ')
wlsxTrapAPBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPBSSID.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPBSSID.setDescription(' This object is used in the traps to indicate the BSSID of the access point, for which the trap is being raised. ')
wlsxTrapEssid = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapEssid.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapEssid.setDescription(' This object is used in the traps to indicate the SSID of the access point, for which the trap is being raised. ')
wlsxTrapTargetAPBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTargetAPBSSID.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTargetAPBSSID.setDescription(' This object is used in the traps to indicate the BSSID of the access point, for which we are raising the trap. If an Air Monitor is sending the trap then this will indicate AP. If an access point is sending the trap, then it will point to itself. ')
wlsxTrapTargetAPSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTargetAPSSID.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTargetAPSSID.setDescription(' This object is used in the traps to indicate the SSID of the access point, for which the trap is being raised. If an Air Monitor is sending the trap then this will indicate AP. If an access point is sending the trap, then it will point to itself. ')
wlsxTrapTargetAPChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTargetAPChannel.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTargetAPChannel.setDescription(' This object is used in the traps to indicate the channel of the access point, for which the trap is being raised. If an air monitor is sending the trap then this will indicate AP. If an access point is sending the trap, then it will point to itself. ')
wlsxTrapNodeMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapNodeMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapNodeMac.setDescription(' This object is used in the traps to indicate the MAC address of a node. ')
wlsxTrapSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 9), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSourceMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSourceMac.setDescription(' This object is used in the traps to indicate the MAC address of the source. ')
wlsxReceiverMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxReceiverMac.setStatus('current')
if mibBuilder.loadTexts: wlsxReceiverMac.setDescription(' This object is used in the traps to indicate the MAC address of the receiver. ')
wlsxTrapTransmitterMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 11), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTransmitterMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTransmitterMac.setDescription(' This object is used in the traps to indicate the MAC address of the transmitter. ')
wlsxTrapReceiverMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 12), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapReceiverMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapReceiverMac.setDescription(' This object is used in the traps to indicate the MAC address of the receiver. ')
wlsxTrapSnr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSnr.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSnr.setDescription(' This object is used in the traps to indicate the Signal to Noise ratio. ')
wlsxTrapSignatureName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSignatureName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSignatureName.setDescription(' This object is used in the traps to indicate the Signature Name. ')
wlsxTrapFrameType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 15), ArubaFrameType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapFrameType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapFrameType.setDescription(' This object is used in the traps to indicate the Frame Type ')
wlsxTrapAddressType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 16), ArubaAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAddressType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAddressType.setDescription(' This object is used in the traps to indicate the Address type. ')
wlsxTrapAPLocation = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPLocation.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPLocation.setDescription(' This object is used in the traps to indicate the Location of the AP. ')
wlsxTrapAPChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 18), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPChannel.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPChannel.setDescription(' This object is used in the traps to indicate the Current Channel. ')
wlsxTrapAPTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPTxPower.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPTxPower.setDescription(' This object is used in the traps to indicate the AP Transmit Power. ')
wlsxTrapMatchedMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 20), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapMatchedMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapMatchedMac.setDescription(' This object is used in the traps to indicate the MAC address ')
wlsxTrapMatchedIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 21), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapMatchedIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapMatchedIp.setDescription(' This object is used in the traps to indicate the IP address ')
wlsxTrapRogueIfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapRogueIfoURL.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapRogueIfoURL.setDescription(' This object is used to point to the WEBUI Rogue AP information URL. ')
wlsxTrapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 23), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVlanId.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVlanId.setDescription(' This object is used in the traps to indicate the VLAN Id. ')
wlsxTrapAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 24), ArubaEnableValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAdminStatus.setDescription(' This object is used in the traps to indicate the admin status of VLAN. ')
wlsxTrapOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 25), ArubaOperStateValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapOperStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapOperStatus.setDescription(' This object is used in the traps to indicate the admin status of VLAN. ')
wlsxTrapAuthServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAuthServerName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAuthServerName.setDescription(' This object is used in the traps to indicate the Authentication Server used for Authentication. ')
wlsxTrapAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 27), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAuthServerTimeout.setDescription(' This object is used in the traps to indicate the Authentication Server Timeout. ')
wlsxTrapCardSlot = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 28), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapCardSlot.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapCardSlot.setDescription(' This object is used in the traps to indicate the Slot in which this card is present. ')
wlsxTrapTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTemperatureValue.setDescription(' This object is used in the traps to indicate the Temperature Value. ')
wlsxTrapProcessName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapProcessName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapProcessName.setDescription(' This object is used in the traps to indicate the Process name. ')
wlsxTrapFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 31), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapFanNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapFanNumber.setDescription(' This object is used in the traps to indicate the Fan Number. ')
wlsxTrapVoltageType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVoltageType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVoltageType.setDescription(' This object is used in the traps to indicate the type of Voltage. ')
wlsxTrapVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVoltageValue.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVoltageValue.setDescription(' This object is used in the traps to indicate the voltage value in Float. ')
wlsxTrapStationBlackListReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 34), ArubaBlackListReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapStationBlackListReason.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapStationBlackListReason.setDescription(' The Reason for which a station is black listed. **NOTE: this trap is obsoleted and replaced by wlsxTrapStationDenyListReason ')
wlsxTrapSpoofedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 35), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSpoofedIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSpoofedIpAddress.setDescription(' This object is used in a trap to identify a spoofed IP address. ')
wlsxTrapSpoofedOldPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 36), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSpoofedOldPhyAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSpoofedOldPhyAddress.setDescription(' This object is used in a trap to identify an old MAC address. ')
wlsxTrapSpoofedNewPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 37), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSpoofedNewPhyAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSpoofedNewPhyAddress.setDescription(' This object is used in a trap to identify a New MAC address. ')
wlsxTrapDBName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDBName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDBName.setDescription(' This object is used in a trap to identify name of the database. ')
wlsxTrapDBUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDBUserName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDBUserName.setDescription(' This object is used in a trap to identify name of the database user. ')
wlsxTrapDBIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDBIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDBIpAddress.setDescription(' This object is used in a trap to identify the IpAddress of the Database. ')
wlsxTrapDBType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 41), ArubaDBType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDBType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDBType.setDescription(' This object is used in a trap to identify the port of the user. ')
wlsxTrapVrrpID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 42), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVrrpID.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVrrpID.setDescription(' This object contains the Virtual Router Identifier. ')
wlsxTrapVrrpMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 43), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVrrpMasterIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVrrpMasterIp.setDescription(' This object contains the Master IP address. ')
wlsxTrapVrrpOperState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 44), ArubaVrrpState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVrrpOperState.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVrrpOperState.setDescription(' This object represents the VRRP Operational state. ')
wlsxTrapESIServerGrpName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapESIServerGrpName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapESIServerGrpName.setDescription(' This object represents the External Services Interface (ESI) Server Group name ')
wlsxTrapESIServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapESIServerName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapESIServerName.setDescription(' This object represents the External Services Interface (ESI) Server Name ')
wlsxTrapESIServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 47), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapESIServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapESIServerIpAddress.setDescription(' This object represents the External Services Interface (ESI) Server IP address ')
wlsxTrapLicenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 48), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLicenseDaysRemaining.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapLicenseDaysRemaining.setDescription(' This object represents number of the days remaining prior to a license expiry. ')
wlsxTrapSwitchIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 49), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSwitchIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSwitchIp.setDescription(' This object represents the controller IP address. ')
wlsxTrapSwitchRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 50), ArubaSwitchRole()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSwitchRole.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSwitchRole.setDescription(' This object represents the Role of the controller. ')
wlsxTrapUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 51), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUserIpAddress.setDescription(' This object represents IP address of the User. ')
wlsxTrapUserPhyAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 52), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUserPhyAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUserPhyAddress.setDescription(' This object represents MAC address of the User. ')
wlsxTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUserName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUserName.setDescription(' This object represents the user name. ')
wlsxTrapUserRole = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUserRole.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUserRole.setDescription(' This object represents the Authentication method of the user. ')
wlsxTrapUserAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 55), ArubaAuthenticationMethods()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUserAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUserAuthenticationMethod.setDescription(' This object represents the Authentication method of the user. ')
wlsxTrapAPRadioNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 56), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPRadioNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPRadioNumber.setDescription(' This object represents the radio number. ')
wlsxTrapRogueInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapRogueInfoURL.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapRogueInfoURL.setDescription(' This object is used to point to the WEBGUI Rogue AP information URL. ')
wlsxTrapInterferingAPInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapInterferingAPInfoURL.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapInterferingAPInfoURL.setDescription(' This object is used to point to the WEBGUI Rogue interfering AP information URL. ')
wlsxTrapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 59), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPortNumber.setDescription(' This object is used in the traps to indicate the port number. ')
wlsxTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 60), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTime.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTime.setDescription(' This object is used in all the enterprise traps to indicate the the time when the trap is generated on the controller. ')
wlsxTrapHostIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 61), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapHostIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapHostIp.setDescription(' This object represents the Trap host. ')
wlsxTrapHostPort = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 62), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapHostPort.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapHostPort.setDescription(' This object represents the Trap host port. ')
wlsxTrapConfigurationId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 63), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapConfigurationId.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapConfigurationId.setDescription(' This object represents the ID of the configuration, to be used in traps. ')
wlsxTrapCTSURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapCTSURL.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapCTSURL.setDescription(' This object represents the URL from which the transfer should happen. ')
wlsxTrapCTSTransferType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapCTSTransferType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapCTSTransferType.setDescription(' This object represents the transfer type, upload or download. ')
wlsxTrapConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 66), ArubaConfigurationState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapConfigurationState.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapConfigurationState.setDescription(' This object represents state of the configuration transfer. ')
wlsxTrapUpdateFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUpdateFailureReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUpdateFailureReason.setDescription(' This object represents the reason for the update failure. ')
wlsxTrapUpdateFailedObj = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUpdateFailedObj.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUpdateFailedObj.setDescription(' This variable represents the AMAPI object which is the reason for the the update failure. ')
wlsxTrapTableEntryChangeType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 69), ArubaConfigurationChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTableEntryChangeType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTableEntryChangeType.setDescription(' This object represents type of the configuration change. ')
wlsxTrapGlobalConfigObj = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapGlobalConfigObj.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapGlobalConfigObj.setDescription(' This variable represents the AMAPI object corresponding to the global configuration change. ')
wlsxTrapTableGenNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 71), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTableGenNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTableGenNumber.setDescription(' This object represents generation number of a table. Used in the MMS, to keep track of the table content changes. ')
wlsxTrapLicenseId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 72), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLicenseId.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapLicenseId.setDescription(' This object is used in the traps to indicate the license ID. ')
wlsxTrapConfidenceLevel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 73), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapConfidenceLevel.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapConfidenceLevel.setDescription(' This object is used in the traps to indicate the Confidence Level as a percentage ')
wlsxTrapMissingLicenses = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapMissingLicenses.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapMissingLicenses.setDescription(' This variable indicates any licenses that are not present during a configuration update ')
wlsxVoiceCurrentNumCdr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 75), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxVoiceCurrentNumCdr.setStatus('current')
if mibBuilder.loadTexts: wlsxVoiceCurrentNumCdr.setDescription(' This object represents the number of CDRs in buffer. ')
wlsxTrapTunnelId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 76), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTunnelId.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTunnelId.setDescription(' This Object represents the tunnel ID. ')
wlsxTrapTunnelStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 77), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTunnelStatus.setDescription(' This Object represents the tunnel Status. ')
wlsxTrapTunnelUpReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTunnelUpReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTunnelUpReason.setDescription(' This Object represents the tunnel up reason. ')
wlsxTrapTunnelDownReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTunnelDownReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTunnelDownReason.setDescription(' This Object represents the tunnel down reason. ')
wlsxTrapApSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapApSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapApSerialNumber.setDescription(' This object represents the AP Serial Number. ')
wlsxTrapTimeStr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTimeStr.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTimeStr.setDescription(' This object represents the Time in String format. ')
wlsxTrapMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 82), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapMasterIp.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapMasterIp.setDescription(' This object represents the master IP address. ')
wlsxTrapLocalIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 83), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLocalIp.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapLocalIp.setDescription(' This object represents the Local IP address. ')
wlsxTrapMasterName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapMasterName.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapMasterName.setDescription(' This object represents the master controller name. ')
wlsxTrapLocalName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLocalName.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapLocalName.setDescription(' This object represents the local controller name. ')
wlsxTrapPrimaryControllerIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 86), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPrimaryControllerIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPrimaryControllerIp.setDescription(" This object represents the IP address of the AP's primary controller. ")
wlsxTrapBackupControllerIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 87), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapBackupControllerIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapBackupControllerIp.setDescription(" This object represents the IP address of the AP's backup controller. ")
wlsxTrapSpoofedFrameType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSpoofedFrameType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSpoofedFrameType.setDescription(' This object is used in the traps to indicate the Spoofed Frame Type ')
wlsxTrapAssociationType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 89), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAssociationType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAssociationType.setDescription(' This object is used in the traps to indicate the type of association ')
wlsxTrapDeviceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 90), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDeviceIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDeviceIpAddress.setDescription(' This object represents the IP address of a device seen by an AP. ')
wlsxTrapDeviceMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 91), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDeviceMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDeviceMac.setDescription(' This object represents the MAC address of a device seen by an AP. ')
wlsxTrapVcIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 92), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVcIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVcIpAddress.setDescription(' This object represents the Ip Address of a Voice client. ')
wlsxTrapVcMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 93), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapVcMacAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapVcMacAddress.setDescription(' This object represents the MAC address of a Voice client. ')
wlsxTrapAPName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPName.setDescription(' This object is used in the traps to indicate the Name of the AP. ')
wlsxTrapApMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 95), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapApMode.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapApMode.setDescription(' This Object represents the AP Mode. ')
wlsxTrapAPPrevChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 96), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPrevChannel.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPrevChannel.setDescription(' This object is used in the traps to indicate the Previous Channel. ')
wlsxTrapAPPrevChannelSec = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 97), ArubaHTExtChannel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPrevChannelSec.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPrevChannelSec.setDescription(' This object is used in the traps to indicate the Previous Secondary Channel. ')
wlsxTrapAPPrevTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 98), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPrevTxPower.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPrevTxPower.setDescription(' This object is used in the traps to indicate previous AP Transmit Power. ')
wlsxTrapAPCurMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 99), ArubaAccessPointMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPCurMode.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPCurMode.setDescription(' This Object represents the APs Current Mode. ')
wlsxTrapAPPrevMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 100), ArubaAccessPointMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPrevMode.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPrevMode.setDescription(' This Object represents the APs Previous Mode. ')
wlsxTrapAPARMChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 101), ArubaARMChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPARMChangeReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPARMChangeReason.setDescription(' This Object represents the APs Previous Mode. ')
wlsxTrapAPChannelSec = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 102), ArubaHTExtChannel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPChannelSec.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPChannelSec.setDescription(' This object is used in the traps to indicate the Current Secondary Channel. ')
wlsxTrapUserAttributeChangeType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 103), ArubaConfigurationChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUserAttributeChangeType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUserAttributeChangeType.setDescription(' This object represents type of the configuration change. ')
wlsxTrapApControllerIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 104), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapApControllerIp.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapApControllerIp.setDescription(' IP address of the controller to which the AP is (or was most recently) registered. ')
wlsxTrapApMasterStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 105), ArubaAPMasterStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapApMasterStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapApMasterStatus.setDescription(' Status of the AP as seen by the master when the status changes. **NOTE: this object is obsoleted and replaced by wlsxTrapApConductorStatus ')
wlsxTrapCaName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 106), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapCaName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapCaName.setDescription(' This object is used in the traps to indicate the name of the trustpoint. ')
wlsxTrapCrlName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 107), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapCrlName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapCrlName.setDescription(' This object is used in the traps to indicate the name of the crl. ')
wlsxTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 108), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapCount.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapCount.setDescription(' This object represents the number of occurrence of this trap. ')
wlsxTrapPowerSupplyNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 109), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPowerSupplyNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPowerSupplyNumber.setDescription(' This object represents the power supply number. ')
wlsxTrapFanTrayNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 110), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapFanTrayNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapFanTrayNumber.setDescription(' This object represents the Fan Tray number. ')
wlsxTrapClientClassification = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 111), ArubaStationType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapClientClassification.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapClientClassification.setDescription(' This object is used in the traps to indicate the classification of the client. ')
wlsxThresholdResourceType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 112), ArubaThresholdResourceType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxThresholdResourceType.setStatus('current')
if mibBuilder.loadTexts: wlsxThresholdResourceType.setDescription(" This object represents the Threshold alert's Resource Type . ")
wlsxThresholdResourceName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxThresholdResourceName.setStatus('current')
if mibBuilder.loadTexts: wlsxThresholdResourceName.setDescription(" This object represents the Threshold alert's Resource Name . ")
wlsxThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 114), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxThresholdValue.setStatus('current')
if mibBuilder.loadTexts: wlsxThresholdValue.setDescription(" This object represents the Threshold alert's set threshold value. ")
wlsxResourceValue = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 115), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxResourceValue.setStatus('current')
if mibBuilder.loadTexts: wlsxResourceValue.setDescription(" This object represents the Threshold alert's actual value. ")
wlsxStackPrevSlot = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 116), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackPrevSlot.setStatus('current')
if mibBuilder.loadTexts: wlsxStackPrevSlot.setDescription(' This object specifies the slot number of this stack element prior to topology change in stack. A value of -1 indicates that this slot was not in Active state of stack prior to topology change. ')
wlsxStackCurrentSlot = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 117), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackCurrentSlot.setStatus('current')
if mibBuilder.loadTexts: wlsxStackCurrentSlot.setDescription(' This object specifies the slot number of this stack element after the topology change in stack. A value of -1 indicates that this slot is not in Active state of stack after the topology change. ')
wlsxStackPrevState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 118), ArubaStackState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackPrevState.setStatus('current')
if mibBuilder.loadTexts: wlsxStackPrevState.setDescription(' This object specifies the state of this stack element prior to topology change in stack. ')
wlsxStackCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 119), ArubaStackState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackCurrentState.setStatus('current')
if mibBuilder.loadTexts: wlsxStackCurrentState.setDescription(' This object specifies the state of this stack element after topology change in stack. ')
wlsxStackChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 120), ArubaStackChangeEvent()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackChangeEvent.setStatus('current')
if mibBuilder.loadTexts: wlsxStackChangeEvent.setDescription(' This object specifies the event which caused change in topology in stack. ')
wlsxStackProtoIfTopoJoined = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 121), ArubaStackIfTopoJoined()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackProtoIfTopoJoined.setStatus('current')
if mibBuilder.loadTexts: wlsxStackProtoIfTopoJoined.setDescription(' This object specifies whether an interface has joined the stacking topology or left the topology. ')
wlsxStackMemberMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 122), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackMemberMacAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxStackMemberMacAddress.setDescription(' This object specifies mac-address of this stack element. ')
wlsxStackMemberSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 123), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackMemberSlotNumber.setStatus('current')
if mibBuilder.loadTexts: wlsxStackMemberSlotNumber.setDescription(' This object specifies the slot number of this element in stack. ')
wlsxStackIfName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxStackIfName.setStatus('current')
if mibBuilder.loadTexts: wlsxStackIfName.setDescription(' This object specifies the interface name which is part of stacking link connected to other stacking element. ')
wlsxTrapLicenseServerDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 125), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLicenseServerDaysRemaining.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapLicenseServerDaysRemaining.setDescription(' This object represents number of the days remaining prior to expiry of license limits sent by the server. ')
wlsxTrapLicenseClientDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 126), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLicenseClientDaysRemaining.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapLicenseClientDaysRemaining.setDescription(' This object represents number of the days remaining prior to expiry of licenses contributed by a license client. ')
wlsxIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 127), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxIfIndex.setStatus('current')
if mibBuilder.loadTexts: wlsxIfIndex.setDescription(' This object specifies the ifIndex. ')
wlsxIfState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 128), ArubaIfState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxIfState.setStatus('current')
if mibBuilder.loadTexts: wlsxIfState.setDescription(' This object specifies the state of an interface. ')
wlsxIfStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 129), ArubaIfStateChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxIfStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: wlsxIfStateChangeReason.setDescription(' This object specifies the reason for interface state change. ')
wlsxTrapAPPreviousUplinkType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 130), ArubaAPUplinkType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPreviousUplinkType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPreviousUplinkType.setDescription(' This object specifies the up link type for an AP. ')
wlsxTrapAPPreviousUplinkActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 131), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPreviousUplinkActiveTime.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPreviousUplinkActiveTime.setDescription(' This object specifies the up link type for an AP. ')
wlsxTrapAPActiveUplinkType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 132), ArubaAPUplinkType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPActiveUplinkType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPActiveUplinkType.setDescription(' This object specifies the up link type for an AP. ')
wlsxTrapAPUplinkChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 133), ArubaAPUplinkChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPUplinkChangeReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPUplinkChangeReason.setDescription(' This object specifies the up link change reason. ')
wlsxTrapExpiringCertName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapExpiringCertName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapExpiringCertName.setDescription(' This object is used in the traps to indicate the name of the certificate that is expiring in less than 60 days. ')
wlsxTrapExpiredCertName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapExpiredCertName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapExpiredCertName.setDescription(' This object is used in the traps to indicate the name of the certificate that has expired. ')
wlsxTrapHTMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 136), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapHTMode.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapHTMode.setDescription(' This object represents HT Mode. ')
wlsxTrapPhyType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 137), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPhyType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPhyType.setDescription(' This object represents Physical Type. ')
wlsxTrapAPManagedModeConfigFailure = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 138), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPManagedModeConfigFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPManagedModeConfigFailure.setDescription(' This object indicates the error for the failure of config apply on IAP. ')
wlsxTrapAuthServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 139), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAuthServerAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAuthServerAddress.setDescription(' This object is used in the traps to indicate the Authentication Server IP used for Authentication. ')
wlsxTrapPortalServerName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPortalServerName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPortalServerName.setDescription(' This object is used in the traps to indicate the Captive Portal Server used for Authentication. ')
wlsxTrapPortalServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 141), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPortalServerAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPortalServerAddress.setDescription(' This object is used in the traps to indicate the Captive Portal Server IP or host name used for Authentication. ')
wlsxTrapPortalServerDownReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 142), ArubaPortalServerDownReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPortalServerDownReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPortalServerDownReason.setDescription(' This object specifies the captive portal server down reason. ')
wlsxTrapLicensePlatformMismatchKey = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 143), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapLicensePlatformMismatchKey.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapLicensePlatformMismatchKey.setDescription(' This object represents license incompatibility with the given platform. ')
wlsxTrapTargetAPName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 144), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTargetAPName.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTargetAPName.setDescription(" This object is used in the traps to indicate the target's AP name. ")
wlsxTrapTargetAPMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 145), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTargetAPMac.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTargetAPMac.setDescription(" This object is used in the traps to indicate the target's MAC address. ")
wlsxTrapAPUSBStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPUSBStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPUSBStatus.setDescription(' This object represents plug in or plug out status of an USB device. ')
wlsxTrapUSBVendorProductID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 147), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapUSBVendorProductID.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapUSBVendorProductID.setDescription(' This object represents vendor ID or product ID of an USB device. ')
wlsxTrapSwitchIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 148), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapSwitchIpv6.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapSwitchIpv6.setDescription(' This object represents the controller IPv6 address. ')
wlsxTrapStationBlackListReasonStr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 149), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapStationBlackListReasonStr.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxTrapStationBlackListReasonStr.setDescription(' The Reason for which a station is black listed in details. **NOTE: this trap is obsoleted and replaced by wlsxTrapStationDenyListReasonStr ')
wlsxTrapPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 150), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapPeerIpAddress.setDescription(' This object is used in the traps to indicate the peer IP address of Cluster VLAN probe. ')
wlsxTrapConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 151), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapConnectionStatus.setDescription(' This object is used in the traps to indicate the Connection status of Cluster VLAN probe. ')
wlsxTrapFailedVlan = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 152), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapFailedVlan.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapFailedVlan.setDescription(' This object is used in the traps to indicate the failed VLAN id of cluster VLAN probe. ')
wlsxTrapMatchedIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 153), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapMatchedIpv6.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapMatchedIpv6.setDescription(' This object is used in the traps to indicate the IPv6 address ')
wlsxTrapDeviceIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 154), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapDeviceIpv6Address.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapDeviceIpv6Address.setDescription(' This object represents the IPv6 address of a device seen by an AP. ')
wlsxTrapAuthFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 155), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAuthFailureReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAuthFailureReason.setDescription(' This object represents the reason for the authentication failure. ')
wlsxTrapAPPhyType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 156), ArubaPhyType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPhyType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPhyType.setDescription(' This object represents Band Information. ')
wlsxTrapAPSecChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 157), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPSecChannel.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPSecChannel.setDescription(' This object represents Secondary Channel. ')
wlsxTrapAPHTMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 158), ArubaHTMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPHTMode.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPHTMode.setDescription(' This object represents HT-Mode Information. ')
wlsxTrapAPBand = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 159), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPBand.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPBand.setDescription(' This object represents the radio band on which an AP operates on. ')
wlsxTrapTargetAPBand = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapTargetAPBand.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapTargetAPBand.setDescription(' This object represents the radio band on which the target AP operates on. ')
wlsxTrapStationDenyListReason = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 161), ArubaDenyListReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapStationDenyListReason.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapStationDenyListReason.setDescription(' The Reason for which a station is added to denylist. ')
wlsxTrapStationDenyListReasonStr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 162), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapStationDenyListReasonStr.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapStationDenyListReasonStr.setDescription(' The Reason for which a station is added to denylist in details. ')
wlsxTrapApConductorStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 163), ArubaAPConductorStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapApConductorStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapApConductorStatus.setDescription(' Status of the AP as seen by the conductor when the status changes. ')
wlsxTrapAPPrevPhyType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 164), ArubaPhyType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPrevPhyType.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPrevPhyType.setDescription(' This object represents Prev Band Information. ')
wlsxTrapAPPrevHTMode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 165), ArubaHTMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxTrapAPPrevHTMode.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapAPPrevHTMode.setDescription(' This object represents Previous HT-Mode Information. ')
wlsxLicenseType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 166), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxLicenseType.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseType.setDescription(' This object is used in the traps to indicate the License Type. ')
wlsxLicensePoolName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 1, 167), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wlsxLicensePoolName.setStatus('current')
if mibBuilder.loadTexts: wlsxLicensePoolName.setDescription(' This object is used in the traps to indicate the pool name for a License. ')
wlsxVlanLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1000)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"))
if mibBuilder.loadTexts: wlsxVlanLinkUp.setStatus('current')
if mibBuilder.loadTexts: wlsxVlanLinkUp.setDescription(' This trap indicates that a VLAN interface is up. ')
wlsxVlanLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1001)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"))
if mibBuilder.loadTexts: wlsxVlanLinkDown.setStatus('current')
if mibBuilder.loadTexts: wlsxVlanLinkDown.setDescription(' This trap indicates that a VLAN interface is down. ')
wlsxSignatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1002)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignatureMatch.setStatus('current')
if mibBuilder.loadTexts: wlsxSignatureMatch.setDescription(' This trap indicates that a signature match was detected. ')
wlsxNodeRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1003)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxNodeRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsxNodeRateAnomaly.setDescription(' This trap indicates that a node is exceeding the threshold set for the frame type. ')
wlsxNormalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1004)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTemperatureValue"))
if mibBuilder.loadTexts: wlsxNormalTemperature.setStatus('current')
if mibBuilder.loadTexts: wlsxNormalTemperature.setDescription(' This trap indicates that the Temperature has returned to an acceptable range. ')
wlsxProcessRestart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1005)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapProcessName"))
if mibBuilder.loadTexts: wlsxProcessRestart.setStatus('current')
if mibBuilder.loadTexts: wlsxProcessRestart.setDescription(' This trap indicates that the named process has been restarted. ')
wlsxFlashSpaceOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1006)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxFlashSpaceOK.setStatus('current')
if mibBuilder.loadTexts: wlsxFlashSpaceOK.setDescription(' This trap which indicates that the system flash space is back to a sufficient level. ')
wlsxMemoryUsageOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1007)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxMemoryUsageOK.setStatus('current')
if mibBuilder.loadTexts: wlsxMemoryUsageOK.setDescription(' This trap which indicates that the free memory usage is back to a sufficient level. ')
wlsxPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1008)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxPowerSupplyOK.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSupplyOK.setDescription(' This trap indicates that the system power supply condition have returned to normal operation status. ')
wlsxFanOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1009)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanNumber"))
if mibBuilder.loadTexts: wlsxFanOK.setStatus('current')
if mibBuilder.loadTexts: wlsxFanOK.setDescription(' This trap indicates that the fan has returned to normal. ')
wlsxInRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1010)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageType"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageValue"))
if mibBuilder.loadTexts: wlsxInRangeVoltage.setStatus('current')
if mibBuilder.loadTexts: wlsxInRangeVoltage.setDescription(' This trap indicates that the controller Voltage is back within range. ')
wlsxCoverageHoleResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1011)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"))
if mibBuilder.loadTexts: wlsxCoverageHoleResolved.setStatus('current')
if mibBuilder.loadTexts: wlsxCoverageHoleResolved.setDescription(' This trap indicates that a coverage hole at location wlsxTrapAPLocation has been resolved. ')
wlsxNSwitchIPChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1012)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIp"))
if mibBuilder.loadTexts: wlsxNSwitchIPChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxNSwitchIPChanged.setDescription(' This trap indicates that the controller IP address has changed. ')
wlsxNSwitchRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1013)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchRole"))
if mibBuilder.loadTexts: wlsxNSwitchRoleChange.setStatus('current')
if mibBuilder.loadTexts: wlsxNSwitchRoleChange.setDescription(' This trap indicates that the role of the controller IP address has changed. ')
wlsxNUserEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1014)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"))
if mibBuilder.loadTexts: wlsxNUserEntryCreated.setStatus('current')
if mibBuilder.loadTexts: wlsxNUserEntryCreated.setDescription(' This trap indicates that a new user was created. ')
wlsxNUserEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1015)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"))
if mibBuilder.loadTexts: wlsxNUserEntryDeleted.setStatus('current')
if mibBuilder.loadTexts: wlsxNUserEntryDeleted.setDescription(' This trap indicates that a user was deleted. ')
wlsxNUserEntryAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1016)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserAuthenticationMethod"), ("WLSX-TRAP-MIB", "wlsxTrapUserRole"))
if mibBuilder.loadTexts: wlsxNUserEntryAuthenticated.setStatus('current')
if mibBuilder.loadTexts: wlsxNUserEntryAuthenticated.setDescription(' This trap indicates that a user is Authenticated. ')
wlsxNUserEntryDeAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1017)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"))
if mibBuilder.loadTexts: wlsxNUserEntryDeAuthenticated.setStatus('current')
if mibBuilder.loadTexts: wlsxNUserEntryDeAuthenticated.setDescription(' This trap indicates that a user is Deauthenticated. ')
wlsxNUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1018)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxNUserAuthenticationFailed.setStatus('current')
if mibBuilder.loadTexts: wlsxNUserAuthenticationFailed.setDescription(' This trap indicates that a user authentication has failed. ')
wlsxNAuthServerReqTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1019)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxNAuthServerReqTimedOut.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthServerReqTimedOut.setDescription(' This trap indicates that the authentication server request timed out. ')
wlsxNAuthServerTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1020)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerTimeout"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxNAuthServerTimedOut.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthServerTimedOut.setDescription(' This trap indicates that the authentication server timed out. ')
wlsxNAuthServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1021)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"))
if mibBuilder.loadTexts: wlsxNAuthServerIsUp.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthServerIsUp.setDescription(' This trap indicates that an authentication server is up. ')
wlsxNAuthMaxUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1022)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNAuthMaxUserEntries.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthMaxUserEntries.setDescription(' A trap which indicates that the user entries table is full and cannot add any more entries. ')
wlsxNAuthMaxAclEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1023)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNAuthMaxAclEntries.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthMaxAclEntries.setDescription(' A trap which indicates that the ACL Entries table is full and cannot add any more entries. ')
wlsxNAuthMaxBWContracts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1024)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNAuthMaxBWContracts.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthMaxBWContracts.setDescription(' A trap which indicates that the controller reached the maximum number of configurable Bandwidth contracts. ')
wlsxNPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1025)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxNPowerSupplyFailure.setDescription(' A trap which indicates that the power supply has failed. ')
wlsxNFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1026)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanNumber"))
if mibBuilder.loadTexts: wlsxNFanFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxNFanFailure.setDescription(' A trap which indicates that the fan has failed. ')
wlsxNOutOfRangeVoltage = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1027)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageType"), ("WLSX-TRAP-MIB", "wlsxTrapVoltageValue"))
if mibBuilder.loadTexts: wlsxNOutOfRangeVoltage.setStatus('current')
if mibBuilder.loadTexts: wlsxNOutOfRangeVoltage.setDescription(' A trap which indicates that the controller voltage is out of range. ')
wlsxNOutOfRangeTemperature = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1028)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTemperatureValue"))
if mibBuilder.loadTexts: wlsxNOutOfRangeTemperature.setStatus('current')
if mibBuilder.loadTexts: wlsxNOutOfRangeTemperature.setDescription(' A trap which indicates that the controller internal temperature is out of range. ')
wlsxNLCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1029)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"))
if mibBuilder.loadTexts: wlsxNLCInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxNLCInserted.setDescription(' A Trap which indicates that a line card is inserted. ')
wlsxNSCInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1030)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"))
if mibBuilder.loadTexts: wlsxNSCInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxNSCInserted.setDescription(' a Trap which indicates that a supervisor card is inserted. ')
wlsxNGBICInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1031)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNGBICInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxNGBICInserted.setDescription(' A Trap which indicates that a GBIC is inserted in a Line Card. ')
wlsxNProcessDied = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1032)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapProcessName"))
if mibBuilder.loadTexts: wlsxNProcessDied.setStatus('current')
if mibBuilder.loadTexts: wlsxNProcessDied.setDescription(' A Trap which indicates that a process has died. ')
wlsxNProcessExceedsMemoryLimits = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1033)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapProcessName"))
if mibBuilder.loadTexts: wlsxNProcessExceedsMemoryLimits.setStatus('current')
if mibBuilder.loadTexts: wlsxNProcessExceedsMemoryLimits.setDescription(' A Trap which indicates that a process is consuming Large amounts of memory. ')
wlsxNLowOnFlashSpace = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1034)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNLowOnFlashSpace.setStatus('current')
if mibBuilder.loadTexts: wlsxNLowOnFlashSpace.setDescription(' A Trap which indicates that the controller is running low on flash space. ')
wlsxNLowMemory = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1035)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNLowMemory.setStatus('current')
if mibBuilder.loadTexts: wlsxNLowMemory.setDescription(' A Trap which indicates that the system free memory is low. ')
wlsxNFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1036)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNFanTrayRemoved.setStatus('current')
if mibBuilder.loadTexts: wlsxNFanTrayRemoved.setDescription(' A Trap which indicates that a fan tray is removed. ')
wlsxNFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1037)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNFanTrayInserted.setStatus('current')
if mibBuilder.loadTexts: wlsxNFanTrayInserted.setDescription(' A Trap which indicates that a fan tray is inserted. ')
wlsxNLCRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1038)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"))
if mibBuilder.loadTexts: wlsxNLCRemoved.setStatus('current')
if mibBuilder.loadTexts: wlsxNLCRemoved.setDescription(' A Trap which indicates that a Line card is removed. ')
wlsxNPowerSupplyMissing = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1039)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNPowerSupplyMissing.setStatus('current')
if mibBuilder.loadTexts: wlsxNPowerSupplyMissing.setDescription(' A Trap which indicates that the power supply is missing. ')
wlsxNAccessPointIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1040)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"))
if mibBuilder.loadTexts: wlsxNAccessPointIsUp.setStatus('current')
if mibBuilder.loadTexts: wlsxNAccessPointIsUp.setDescription(' A Trap which indicates that an access point up. ')
wlsxNAccessPointIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1041)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"))
if mibBuilder.loadTexts: wlsxNAccessPointIsDown.setStatus('current')
if mibBuilder.loadTexts: wlsxNAccessPointIsDown.setDescription(' A Trap which indicates that an access point down. ')
wlsxNCoverageHoleDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1042)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"))
if mibBuilder.loadTexts: wlsxNCoverageHoleDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxNCoverageHoleDetected.setDescription(' This trap indicates that an access point at Location wlsxTrapAPLocation has detected a Coverage Hole. ')
wlsxNChannelChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1043)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxNChannelChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxNChannelChanged.setDescription(' This trap indicates that an access point at Location wlsxTrapAPLocation has changed the channel. ')
wlsxNStationAddedToBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1044)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapStationBlackListReason"), ("WLSX-TRAP-MIB", "wlsxTrapStationBlackListReasonStr"))
if mibBuilder.loadTexts: wlsxNStationAddedToBlackList.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxNStationAddedToBlackList.setDescription(' This trap indicates that the station is black listed. **NOTE: this trap is obsoleted and replaced by wlsxNStationAddedToDenyList ')
wlsxNStationRemovedFromBlackList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1045)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"))
if mibBuilder.loadTexts: wlsxNStationRemovedFromBlackList.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxNStationRemovedFromBlackList.setDescription(' This trap indicates that the station is removed from the black list. **NOTE: this trap is obsoleted and replaced by wlsxNStationRemovedFromDenyList ')
wlsxNIpSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1046)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedOldPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedNewPhyAddress"))
if mibBuilder.loadTexts: wlsxNIpSpoofingDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxNIpSpoofingDetected.setDescription(' A trap indicating that the controller detected IP Spoofing. ')
wlsxNDBCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1047)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapDBName"), ("WLSX-TRAP-MIB", "wlsxTrapDBUserName"), ("WLSX-TRAP-MIB", "wlsxTrapDBIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapDBType"))
if mibBuilder.loadTexts: wlsxNDBCommunicationFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxNDBCommunicationFailure.setDescription(' This trap indicates that communication with Database failed. ')
wlsxNVrrpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1048)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVrrpID"), ("WLSX-TRAP-MIB", "wlsxTrapVrrpMasterIp"), ("WLSX-TRAP-MIB", "wlsxTrapVrrpOperState"))
if mibBuilder.loadTexts: wlsxNVrrpStateChange.setStatus('current')
if mibBuilder.loadTexts: wlsxNVrrpStateChange.setDescription(' This trap indicates that VRRP state has changed on the controller. ')
wlsxNRadioAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1049)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPTxPower"), ("WLSX-TRAP-MIB", "wlsxTrapAPSecChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPPhyType"), ("WLSX-TRAP-MIB", "wlsxTrapAPHTMode"))
if mibBuilder.loadTexts: wlsxNRadioAttributesChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxNRadioAttributesChanged.setDescription(' A Trap which indicates changes in the Radio attributes of an access point. ')
wlsxNESIServerUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1050)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerGrpName"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerName"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerIpAddress"))
if mibBuilder.loadTexts: wlsxNESIServerUp.setStatus('current')
if mibBuilder.loadTexts: wlsxNESIServerUp.setDescription(' A Trap which indicates that a ESI server is up. ')
wlsxNESIServerDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1051)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerGrpName"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerName"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerIpAddress"))
if mibBuilder.loadTexts: wlsxNESIServerDown.setStatus('current')
if mibBuilder.loadTexts: wlsxNESIServerDown.setDescription(' A Trap which indicates that a ESI server is down. ')
wlsxNLicenseExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1052)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapLicenseDaysRemaining"))
if mibBuilder.loadTexts: wlsxNLicenseExpiry.setStatus('current')
if mibBuilder.loadTexts: wlsxNLicenseExpiry.setDescription(' A Trap which indicates that one or more licenses on the controller will expire in wlsxTrapLicenseDaysRemaining days. ')
wlsxUnsecureAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1053)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedMac"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedIp"), ("WLSX-TRAP-MIB", "wlsxTrapRogueInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedIpv6"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxUnsecureAPDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxUnsecureAPDetected.setDescription(' This trap indicates that an unauthorized access point is connected to the wired network. The access point is declared Rogue because it was matched to a MAC address. ')
wlsxUnsecureAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1054)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxUnsecureAPResolved.setStatus('current')
if mibBuilder.loadTexts: wlsxUnsecureAPResolved.setDescription(' This trap indicates that a previously detected access point, classified as Rogue, is no longer present in the network. ')
wlsxStaImpersonation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1055)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxStaImpersonation.setStatus('current')
if mibBuilder.loadTexts: wlsxStaImpersonation.setDescription(' This trap indicates that an AM detected Station Impersonation. ')
wlsxReservedChannelViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1056)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxReservedChannelViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxReservedChannelViolation.setDescription(' This trap indicates that an AM detected an access point which is violating the Reserved Channel configuration. ')
wlsxValidSSIDViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1057)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxValidSSIDViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxValidSSIDViolation.setDescription(' This trap indicates that an AP has detected an access point is violating Valid SSID configuration by using an SSID that is reserved for use by a valid AP only. ')
wlsxChannelMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1058)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxChannelMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelMisconfiguration.setDescription(' This trap indicates that an AP detected an access point that has a channel misconfiguration because it is using a channel that is not valid. ')
wlsxOUIMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1059)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxOUIMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsxOUIMisconfiguration.setDescription(' This trap indicates that an AP detected an access point that has an OUI misconfiguration because it is using an OUI that is not valid. ')
wlsxSSIDMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1060)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxSSIDMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsxSSIDMisconfiguration.setDescription(' This trap indicates that an AP detected an access point that has an SSID misconfiguration because it is using an SSID that is not valid. ')
wlsxShortPreableMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1061)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxShortPreableMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsxShortPreableMisconfiguration.setDescription(' This trap indicates that an access point has bad Short preamble configuration. ')
wlsxWPAMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1062)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWPAMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsxWPAMisconfiguration.setDescription(' This trap indicates that an AP detected an access point that is misconfigured because it is not using WPA. ')
wlsxAdhocNetworkDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1063)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxAdhocNetworkDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocNetworkDetected.setDescription(' This trap indicates that an AM has detected an Ad hoc network. ')
wlsxAdhocNetworkRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1064)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxAdhocNetworkRemoved.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocNetworkRemoved.setDescription(' This trap indicates that a previously detected Ad hoc Network is no longer present in the network. ')
wlsxStaPolicyViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1065)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxStaPolicyViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxStaPolicyViolation.setDescription(" This trap indicates that Protection was enforced because a valid station's association to a non-valid access point violated Valid Station policy. ")
wlsxRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1066)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxRepeatWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxRepeatWEPIVViolation.setDescription(' This trap indicates that an AP detected that a valid access point is using the same WEP initialization vector in consecutive packets. ')
wlsxWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1067)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWeakWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxWeakWEPIVViolation.setDescription(' This trap indicates that an AP detected that a valid access point is using a Weak WEP initialization vector. ')
wlsxChannelInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1068)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxChannelInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelInterferenceDetected.setDescription(' This trap indicates that an AP has detected channel interference. ')
wlsxChannelInterferenceCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1069)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxChannelInterferenceCleared.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelInterferenceCleared.setDescription(' This trap indicates that a previously detected channel interference is no longer present. ')
wlsxAPInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1070)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxAPInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxAPInterferenceDetected.setDescription(' This trap indicates that an AP has detected interference for an access point. ')
wlsxAPInterferenceCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1071)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxAPInterferenceCleared.setStatus('current')
if mibBuilder.loadTexts: wlsxAPInterferenceCleared.setDescription(' This trap indicates that the previously detected interference for an access point is no longer present. ')
wlsxStaInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1072)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxStaInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxStaInterferenceDetected.setDescription(' This trap indicates that an AP has detected interference for a station. ')
wlsxStaInterferenceCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1073)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxStaInterferenceCleared.setStatus('current')
if mibBuilder.loadTexts: wlsxStaInterferenceCleared.setDescription(' This trap indicates that the previously detected interference for a station is no longer present. ')
wlsxFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1074)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFrameRetryRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxFrameRetryRateExceeded.setDescription(' This trap indicates that an AP detected that an access point has exceeded the configured upper threshold for Frame Retry Rate. ')
wlsxFrameReceiveErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1075)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFrameReceiveErrorRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxFrameReceiveErrorRateExceeded.setDescription(' This trap indicates that an AP detected that an access point has exceeded the configured upper threshold for Frame Receive Error Rate. ')
wlsxFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1076)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFrameFragmentationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxFrameFragmentationRateExceeded.setDescription(' This trap indicates that an AP detected that an access point exceeded the configured upper threshold for Frame Fragmentation Rate. ')
wlsxFrameBandWidthRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1077)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFrameBandWidthRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxFrameBandWidthRateExceeded.setDescription(' This trap indicates that an AP detected that a station or access point has exceeded the configured upper threshold for Bandwidth rate. ')
wlsxFrameLowSpeedRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1078)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFrameLowSpeedRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxFrameLowSpeedRateExceeded.setDescription(' This trap indicates that an AP detected that a station has exceeded the configured upper threshold for Low speed rate. ')
wlsxFrameNonUnicastRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1079)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFrameNonUnicastRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxFrameNonUnicastRateExceeded.setDescription(' This trap indicates that an AP detected that a station has exceeded the configured upper threshold for Non Unicast traffic rate. ')
wlsxLoadbalancingEnabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1080)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxLoadbalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: wlsxLoadbalancingEnabled.setDescription(' This trap indicates that an AM is reporting that an AP has enabled Load balancing. ')
wlsxLoadbalancingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1081)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxLoadbalancingDisabled.setStatus('current')
if mibBuilder.loadTexts: wlsxLoadbalancingDisabled.setDescription(' This trap indicates that an AM is reporting that an AP has enabled Load balancing. ')
wlsxChannelFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1082)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxChannelFrameRetryRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelFrameRetryRateExceeded.setDescription(' This trap indicates that an AP has detected that the configured upper threshold for Frame Retry Rate was exceeded on a channel. ')
wlsxChannelFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1083)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxChannelFrameFragmentationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelFrameFragmentationRateExceeded.setDescription(' This trap indicates that an AP has detected that the configured upper threshold for Frame Fragmentation Rate was exceeded on a channel. ')
wlsxChannelFrameErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1084)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxChannelFrameErrorRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelFrameErrorRateExceeded.setDescription(' This trap indicates that an AP has detected that the configured upper threshold for Frame Receive Error Rate was exceeded on a channel. ')
wlsxSignatureMatchAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1085)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignatureMatchAP.setStatus('current')
if mibBuilder.loadTexts: wlsxSignatureMatchAP.setDescription(' This trap indicates that an AP detected a signature match in a frame from an access point. ')
wlsxSignatureMatchSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1086)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignatureMatchSta.setStatus('current')
if mibBuilder.loadTexts: wlsxSignatureMatchSta.setDescription(' This trap indicates that an AP detected a signature match in a frame from a Station. ')
wlsxChannelRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1087)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxChannelRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsxChannelRateAnomaly.setDescription(' This trap indicates that an AP detected frames on a channel which exceed the configured IDS rate threshold. ')
wlsxNodeRateAnomalyAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1088)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxNodeRateAnomalyAP.setStatus('current')
if mibBuilder.loadTexts: wlsxNodeRateAnomalyAP.setDescription(' This trap indicates that an AP detected frames transmitted or received by an access point, which exceed the configured IDS rate threshold. ')
wlsxNodeRateAnomalySta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1089)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxNodeRateAnomalySta.setStatus('current')
if mibBuilder.loadTexts: wlsxNodeRateAnomalySta.setDescription(' This trap indicates that an AP detected frames transmitted or received by a node, which exceed the configured IDS rate threshold. ')
wlsxEAPRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1090)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxEAPRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsxEAPRateAnomaly.setDescription(' This trap indicates that the rate of EAP Handshake packets received by an AP has exceeded the configured IDS EAP Handshake rate threshold. ')
wlsxSignalAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1091)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxSignalAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsxSignalAnomaly.setDescription(' This trap indicates that an AM detected a Signal Anomaly. ')
wlsxSequenceNumberAnomalyAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1092)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSequenceNumberAnomalyAP.setStatus('current')
if mibBuilder.loadTexts: wlsxSequenceNumberAnomalyAP.setDescription(' This trap indicates that an AM received packets from an AP which exceeds the acceptable sequence number difference. The acceptable sequence number difference is an IDS configuration object. ')
wlsxSequenceNumberAnomalySta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1093)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSequenceNumberAnomalySta.setStatus('current')
if mibBuilder.loadTexts: wlsxSequenceNumberAnomalySta.setDescription(' This trap indicates that an AM received packets from a Node which exceeds the acceptable sequence number difference. The acceptable sequence number difference is an IDS configuration object. ')
wlsxDisconnectStationAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1094)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxDisconnectStationAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxDisconnectStationAttack.setDescription(' This trap indicates that an AM detected a station Disconnect attack. ')
wlsxApFloodAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1095)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxApFloodAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxApFloodAttack.setDescription(' This trap indicates that the number of potential fake APs detected by an AP has exceeded the configured IDS threshold. This is the total number of fake APs observed across all bands. ')
wlsxAdhocNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1096)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxAdhocNetwork.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocNetwork.setDescription(' This trap indicates that an AM detected an Ad hoc Network. An Station is connected to an ad hoc AP. ')
wlsxWirelessBridge = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1097)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxWirelessBridge.setStatus('current')
if mibBuilder.loadTexts: wlsxWirelessBridge.setDescription(' This trap indicates that an AP detected a Wireless Bridge when a WDS frame was seen between the transmitter and receiver addresses. ')
wlsxInvalidMacOUIAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1098)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAddressType"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxInvalidMacOUIAP.setStatus('current')
if mibBuilder.loadTexts: wlsxInvalidMacOUIAP.setDescription(' This trap indicates that an AP detected an invalid MAC OUI in the BSSID of a frame. An invalid MAC OUI suggests that the frame may be spoofed. ')
wlsxInvalidMacOUISta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1099)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAddressType"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxInvalidMacOUISta.setStatus('current')
if mibBuilder.loadTexts: wlsxInvalidMacOUISta.setDescription(' This trap indicates that an AP detected an invalid MAC OUI in the SRC or DST address of a frame. An invalid MAC OUI suggests that the frame may be spoofed. ')
wlsxWEPMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1100)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWEPMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsxWEPMisconfiguration.setDescription(' This trap indicates that an AP detected an access point that is misconfigured because it does not have Privacy enabled. ')
wlsxStaRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1101)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxStaRepeatWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxStaRepeatWEPIVViolation.setDescription(' This trap indicates that an AP detected that a valid station is using the same WEP initialization vector in consecutive packets. ')
wlsxStaWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1102)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxStaWeakWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsxStaWeakWEPIVViolation.setDescription(' This trap indicates that an AP detected that a valid station is using a Weak WEP initialization vector. ')
wlsxStaAssociatedToUnsecureAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1103)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapRogueInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxStaAssociatedToUnsecureAP.setStatus('current')
if mibBuilder.loadTexts: wlsxStaAssociatedToUnsecureAP.setDescription(' This trap indicates that an AM detected a client associated with a Rogue access point. ')
wlsxStaUnAssociatedFromUnsecureAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1104)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"))
if mibBuilder.loadTexts: wlsxStaUnAssociatedFromUnsecureAP.setStatus('current')
if mibBuilder.loadTexts: wlsxStaUnAssociatedFromUnsecureAP.setDescription(' This trap indicates that a previously detected rogue access point association is no longer present. ')
wlsxAdhocNetworkBridgeDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1105)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetected.setDescription(' This trap indicates that an AM has detected an Ad hoc network that is bridging to a wired network ')
wlsxInterferingApDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1106)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapInterferingAPInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxInterferingApDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxInterferingApDetected.setDescription(' This trap indicates that an AP detected an access point classified as Interfering. The access point is declared Interfering because it is neither authorized or classified as Rogue. ')
wlsxPortUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1107)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"))
if mibBuilder.loadTexts: wlsxPortUp.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxPortUp.setDescription(' This trap indicates that a Physical port is up. ')
wlsxPortDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1108)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAdminStatus"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"))
if mibBuilder.loadTexts: wlsxPortDown.setStatus('deprecated')
if mibBuilder.loadTexts: wlsxPortDown.setDescription(' This trap indicates that a Physical port is Down. ')
wlsxBSSIDIsUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1109)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxBSSIDIsUp.setStatus('current')
if mibBuilder.loadTexts: wlsxBSSIDIsUp.setDescription(' A Trap which indicates that an access point BSSID is up. ')
wlsxBSSIDIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1110)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxBSSIDIsDown.setStatus('current')
if mibBuilder.loadTexts: wlsxBSSIDIsDown.setDescription(' A Trap which indicates that an access point BSSID is down. ')
wlsxColdStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1111)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxColdStart.setStatus('current')
if mibBuilder.loadTexts: wlsxColdStart.setDescription(' An enterprise version of cold start trap, which contains the controller time stamp. ')
wlsxWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1112)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxWarmStart.setStatus('current')
if mibBuilder.loadTexts: wlsxWarmStart.setDescription(' An enterprise version of warm start trap, which contains the controller time stamp. ')
wlsxAPImpersonation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1113)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxAPImpersonation.setStatus('current')
if mibBuilder.loadTexts: wlsxAPImpersonation.setDescription(' This trap indicates that an AP detected AP Impersonation because the number of beacons seen has exceeded the expected number by the configured percentage threshold. The expected number is calculated based on the Beacon Interval Field in the Beacon frame. ')
wlsxInformQueueOverFlow = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1114)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapHostIp"), ("WLSX-TRAP-MIB", "wlsxTrapHostPort"))
if mibBuilder.loadTexts: wlsxInformQueueOverFlow.setStatus('current')
if mibBuilder.loadTexts: wlsxInformQueueOverFlow.setDescription(' This trap indicates that an Inform queue overflow condition occurred. ')
wlsxNAuthServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1115)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"))
if mibBuilder.loadTexts: wlsxNAuthServerIsDown.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthServerIsDown.setDescription(' This trap indicates that an authentication server is down. ')
wlsxCTSTransferError = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1116)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCTSTransferType"), ("WLSX-TRAP-MIB", "wlsxTrapCTSURL"))
if mibBuilder.loadTexts: wlsxCTSTransferError.setStatus('current')
if mibBuilder.loadTexts: wlsxCTSTransferError.setDescription(' This trap indicates the status of the configuration transfer from the management station. ')
wlsxCTSTransferSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1117)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCTSTransferType"), ("WLSX-TRAP-MIB", "wlsxTrapCTSURL"))
if mibBuilder.loadTexts: wlsxCTSTransferSucceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxCTSTransferSucceeded.setDescription(' This trap indicates the status of the configuration transfer from the management station. ')
wlsxConfigurationUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1118)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ("WLSX-TRAP-MIB", "wlsxTrapUpdateFailureReason"), ("WLSX-TRAP-MIB", "wlsxTrapUpdateFailedObj"))
if mibBuilder.loadTexts: wlsxConfigurationUpdateError.setStatus('current')
if mibBuilder.loadTexts: wlsxConfigurationUpdateError.setDescription(' This trap indicates the configuration update status. ')
wlsxConfigurationUpdateSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1119)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"))
if mibBuilder.loadTexts: wlsxConfigurationUpdateSucceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxConfigurationUpdateSucceeded.setDescription(' This trap indicates the configuration update status. ')
wlsxGlobalConfigurationChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1120)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ("WLSX-TRAP-MIB", "wlsxTrapGlobalConfigObj"))
if mibBuilder.loadTexts: wlsxGlobalConfigurationChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wlsxGlobalConfigurationChangeNotification.setDescription(' This trap indicates that global configuration was modified on the controller. ')
wlsxUserEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1121)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxUserEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntryChanged.setDescription(' This trap indicates that the user configuration has changed. ')
wlsxAPBssidEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1122)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxAPBssidEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxAPBssidEntryChanged.setDescription(' This trap indicates that the BSSID configuration has changed. ')
wlsxAPRadioEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1123)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxAPRadioEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxAPRadioEntryChanged.setDescription(' This trap indicates that the Radio configuration has changed. ')
wlsxAPEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1124)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxAPEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxAPEntryChanged.setDescription(' This trap indicates that the AP configuration has changed. ')
wlsxSwitchListEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1125)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIp"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxSwitchListEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxSwitchListEntryChanged.setDescription(' This trap indicates that the controller list has changed. ')
wlsxPortEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1126)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxPortEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxPortEntryChanged.setDescription(' This trap indicates that the port configuration has changed. ')
wlsxVlanEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1127)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxVlanEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxVlanEntryChanged.setDescription(' This trap indicates that the VLAN configuration has changed. ')
wlsxVlanInterfaceEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1128)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxVlanInterfaceEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxVlanInterfaceEntryChanged.setDescription(' This trap indicates that the VLAN Interface configuration has changed. ')
wlsxWindowsBridgeDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1129)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWindowsBridgeDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxWindowsBridgeDetected.setDescription(' This trap indicates that an AM has detected a station that is bridging from a wireless network to a wired network ')
wlsxLicenseEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1130)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapLicenseId"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxLicenseEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseEntryChanged.setDescription(' This trap indicates that the license table has changed. ')
wlsxEsiServerChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1131)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerName"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxEsiServerChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxEsiServerChanged.setDescription(' This trap indicates that the ESI server table has changed. ')
wlsxMonAPEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1132)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxMonAPEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxMonAPEntryChanged.setDescription(' This trap indicates that a monitored AP entry changed ')
wlsxMonStationEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1133)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxMonStationEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxMonStationEntryChanged.setDescription(' This trap indicates that a monitored station entry changed ')
wlsxSignAPNetstumbler = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1134)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignAPNetstumbler.setStatus('current')
if mibBuilder.loadTexts: wlsxSignAPNetstumbler.setDescription(' This trap indicates that an AP detected a signature match for Netstumbler from an access point. ')
wlsxSignStaNetstumbler = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1135)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignStaNetstumbler.setStatus('current')
if mibBuilder.loadTexts: wlsxSignStaNetstumbler.setDescription(' This trap indicates that an AP detected a signature match for Netstumbler from a Station. ')
wlsxSignAPAsleap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1136)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignAPAsleap.setStatus('current')
if mibBuilder.loadTexts: wlsxSignAPAsleap.setDescription(' This trap indicates that an AP detected a signature match for ASLEAP from an access point. ')
wlsxSignStaAsleap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1137)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignStaAsleap.setStatus('current')
if mibBuilder.loadTexts: wlsxSignStaAsleap.setDescription(' This trap indicates that an AP detected a signature match for ASLEAP from a Station. ')
wlsxSignAPAirjack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1138)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignAPAirjack.setStatus('current')
if mibBuilder.loadTexts: wlsxSignAPAirjack.setDescription(' This trap indicates that an AP detected a signature match for AirJack from an access point. ')
wlsxSignStaAirjack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1139)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignStaAirjack.setStatus('current')
if mibBuilder.loadTexts: wlsxSignStaAirjack.setDescription(' This trap indicates that an AP detected a signature match for AirJack from a Station. ')
wlsxSignAPNullProbeResp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1140)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignAPNullProbeResp.setStatus('current')
if mibBuilder.loadTexts: wlsxSignAPNullProbeResp.setDescription(' This trap indicates that an AP detected a signature match for Null-Probe-Response from an access point. ')
wlsxSignStaNullProbeResp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1141)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignStaNullProbeResp.setStatus('current')
if mibBuilder.loadTexts: wlsxSignStaNullProbeResp.setDescription(' This trap indicates that an AP detected a signature match for Null-Probe-Response from a Station. ')
wlsxSignAPDeauthBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1142)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignAPDeauthBcast.setStatus('current')
if mibBuilder.loadTexts: wlsxSignAPDeauthBcast.setDescription(' This trap indicates that an AP detected a signature match for Deauth-Broadcast from an access point. ')
wlsxSignStaDeauthBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1143)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxSignStaDeauthBcast.setStatus('current')
if mibBuilder.loadTexts: wlsxSignStaDeauthBcast.setDescription(' This trap indicates that an AP detected a signature match for Deauth-Broadcast from a Station. ')
wlsxWindowsBridgeDetectedAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1144)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWindowsBridgeDetectedAP.setStatus('current')
if mibBuilder.loadTexts: wlsxWindowsBridgeDetectedAP.setDescription(' This trap indicates that an AP is detecting an access point that is bridging from a wireless network to a wired network. ')
wlsxWindowsBridgeDetectedSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1145)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWindowsBridgeDetectedSta.setStatus('current')
if mibBuilder.loadTexts: wlsxWindowsBridgeDetectedSta.setDescription(' This trap indicates that an AP is detecting a station that is bridging from a wireless network to a wired network. ')
wlsxAdhocNetworkBridgeDetectedAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1146)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetectedAP.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetectedAP.setDescription(' This trap indicates that an AM has detected an Ad hoc network that is bridging to a wired network ')
wlsxAdhocNetworkBridgeDetectedSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1147)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetectedSta.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocNetworkBridgeDetectedSta.setDescription(' This trap indicates that an AM has detected an Ad hoc network that is bridging to a wired network ')
wlsxDisconnectStationAttackAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1148)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxDisconnectStationAttackAP.setStatus('current')
if mibBuilder.loadTexts: wlsxDisconnectStationAttackAP.setDescription(' This trap indicates that an AM detected a station disconnect attack. ')
wlsxDisconnectStationAttackSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1149)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxDisconnectStationAttackSta.setStatus('current')
if mibBuilder.loadTexts: wlsxDisconnectStationAttackSta.setDescription(' This trap indicates that an AM detected a station Disconnect attack. ')
wlsxSuspectUnsecureAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1150)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedMac"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedIp"), ("WLSX-TRAP-MIB", "wlsxTrapConfidenceLevel"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapRogueInfoURL"), ("WLSX-TRAP-MIB", "wlsxTrapMatchedIpv6"))
if mibBuilder.loadTexts: wlsxSuspectUnsecureAPDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxSuspectUnsecureAPDetected.setDescription(' This trap indicates that an access point, classified as Suspected Rogue, has been detected by a Controller. The AP is suspected to be rogue, with the supplied confidence level, because it was matched to the wired MAC address. ')
wlsxSuspectUnsecureAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1151)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"))
if mibBuilder.loadTexts: wlsxSuspectUnsecureAPResolved.setStatus('current')
if mibBuilder.loadTexts: wlsxSuspectUnsecureAPResolved.setDescription(' This trap indicates that a previously detected access point, classified Suspected Rogue, is either no longer present in the network or has changed its state. ')
wlsxConfigurationLicenseMismatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1152)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapConfigurationId"), ("WLSX-TRAP-MIB", "wlsxTrapMissingLicenses"))
if mibBuilder.loadTexts: wlsxConfigurationLicenseMismatch.setStatus('current')
if mibBuilder.loadTexts: wlsxConfigurationLicenseMismatch.setDescription(' This trap indicates the configuration update status in the case where some configuration could not be applied due to missing licenses. ')
wlsxVoiceCdrBufferThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1153)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxVoiceCurrentNumCdr"))
if mibBuilder.loadTexts: wlsxVoiceCdrBufferThresholdReached.setStatus('current')
if mibBuilder.loadTexts: wlsxVoiceCdrBufferThresholdReached.setDescription(' This trap indicates that the CDR buffer threshold has been reached ')
wlsxTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1154)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelId"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelUpReason"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelStatus"))
if mibBuilder.loadTexts: wlsxTunnelUp.setStatus('current')
if mibBuilder.loadTexts: wlsxTunnelUp.setDescription(' This trap indicates that a tunnel interface is up. ')
wlsxTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1155)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelId"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelDownReason"), ("WLSX-TRAP-MIB", "wlsxTrapTunnelStatus"))
if mibBuilder.loadTexts: wlsxTunnelDown.setStatus('current')
if mibBuilder.loadTexts: wlsxTunnelDown.setDescription(' This trap indicates that a tunnel interface is down. ')
wlsxMeshNodeEntryChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1156)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTableGenNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapTableEntryChangeType"))
if mibBuilder.loadTexts: wlsxMeshNodeEntryChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeEntryChanged.setDescription(' This trap indicates that the mesh node configuration has changed. ')
wlsxHtGreenfieldSupported = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1157)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxHtGreenfieldSupported.setStatus('current')
if mibBuilder.loadTexts: wlsxHtGreenfieldSupported.setDescription(' This trap indicates that an AP detected an access point that supports HT Greenfield mode. ')
wlsxHT40MHzIntoleranceAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1158)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxHT40MHzIntoleranceAP.setStatus('current')
if mibBuilder.loadTexts: wlsxHT40MHzIntoleranceAP.setDescription(' This trap indicates that an AP is detecting an access point with the HT 40MHz intolerance setting. ')
wlsxHT40MHzIntoleranceSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1159)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxHT40MHzIntoleranceSta.setStatus('current')
if mibBuilder.loadTexts: wlsxHT40MHzIntoleranceSta.setDescription(' This trap indicates that the system is detecting an HT 40MHz Intolerance setting from a Station. ')
wlsxNAuthServerAllInService = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1160)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapESIServerGrpName"))
if mibBuilder.loadTexts: wlsxNAuthServerAllInService.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthServerAllInService.setDescription(' This trap indicates that all authentication servers is a server group are brought back in service. ')
wlsxNAdhocNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1161)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNAdhocNetwork.setStatus('current')
if mibBuilder.loadTexts: wlsxNAdhocNetwork.setDescription(' This trap indicates that an AP detected an ad hoc network where a station is connected to an ad hoc access point. ')
wlsxNAdhocNetworkBridgeDetectedAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1162)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNAdhocNetworkBridgeDetectedAP.setStatus('current')
if mibBuilder.loadTexts: wlsxNAdhocNetworkBridgeDetectedAP.setDescription(' This trap indicates that an AP detected an ad hoc network that is bridging to a wired network. ')
wlsxNAdhocNetworkBridgeDetectedSta = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1163)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNAdhocNetworkBridgeDetectedSta.setStatus('current')
if mibBuilder.loadTexts: wlsxNAdhocNetworkBridgeDetectedSta.setDescription(' This trap indicates that an AP detected an ad hoc network that is bridging to a wired network. ')
wlsxNAuthMaxXsecUserEntries = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1164)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNAuthMaxXsecUserEntries.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthMaxXsecUserEntries.setDescription(' A trap which indicates that the xSec user limit is reached. ')
wlsxNVpnMaxSessions = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1165)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNVpnMaxSessions.setStatus('current')
if mibBuilder.loadTexts: wlsxNVpnMaxSessions.setDescription(' A trap which indicates that the VPN session limit is reached. ')
wlsxNRapExpiredPSK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1166)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapApSerialNumber"))
if mibBuilder.loadTexts: wlsxNRapExpiredPSK.setStatus('current')
if mibBuilder.loadTexts: wlsxNRapExpiredPSK.setDescription(' A trap which indicates that the RAP is using the Expired PSK. ')
wlsxNRapWarnExpiredPSK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1167)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTimeStr"))
if mibBuilder.loadTexts: wlsxNRapWarnExpiredPSK.setStatus('current')
if mibBuilder.loadTexts: wlsxNRapWarnExpiredPSK.setDescription(' A trap which indicates that the Cached IKE PSK for RAPs will expire soon. ')
wlsxNConnectionResetWithLocal = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1168)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapMasterName"), ("WLSX-TRAP-MIB", "wlsxTrapMasterIp"), ("WLSX-TRAP-MIB", "wlsxTrapLocalName"), ("WLSX-TRAP-MIB", "wlsxTrapLocalIp"), ("WLSX-TRAP-MIB", "wlsxTrapTimeStr"))
if mibBuilder.loadTexts: wlsxNConnectionResetWithLocal.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxNConnectionResetWithLocal.setDescription(' A trap which indicates that tcp connection between master controller and local controller has been lost. ')
wlsxNApOnBackupController = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1169)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapBackupControllerIp"), ("WLSX-TRAP-MIB", "wlsxTrapPrimaryControllerIp"))
if mibBuilder.loadTexts: wlsxNApOnBackupController.setStatus('current')
if mibBuilder.loadTexts: wlsxNApOnBackupController.setDescription(' A trap which indicates that the AP has registered with the backup controller. ')
wlsxClientFloodAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1170)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxClientFloodAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxClientFloodAttack.setDescription(' This trap indicates that the number of potential fake clients detected by an AP has exceeded the configured IDS threshold. This is the total number of fake clients observed across all bands. ')
wlsxValidClientNotUsingEncryption = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1171)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxValidClientNotUsingEncryption.setStatus('current')
if mibBuilder.loadTexts: wlsxValidClientNotUsingEncryption.setDescription(' This trap indicates that an AP detected an unencrypted data frame between a valid client and an access point. ')
wlsxAdhocUsingValidSSID = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1172)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"))
if mibBuilder.loadTexts: wlsxAdhocUsingValidSSID.setStatus('current')
if mibBuilder.loadTexts: wlsxAdhocUsingValidSSID.setDescription(' This trap indicates that an AP detected an ad hoc network using a valid/protected SSID. ')
wlsxAPSpoofingDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1173)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxAPSpoofingDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxAPSpoofingDetected.setDescription(' This trap indicates that an AP detected that one of its virtual APs is being spoofed using MAC spoofing. ')
wlsxClientAssociatingOnWrongChannel = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1174)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSpoofedFrameType"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxClientAssociatingOnWrongChannel.setStatus('current')
if mibBuilder.loadTexts: wlsxClientAssociatingOnWrongChannel.setDescription(' This trap indicates that an AP detected a client trying to associate to one of its BSSIDs on the wrong channel. This can be a sign that the BSSID is being spoofed in order to fool the client into thinking the AP is operating on another channel. ')
wlsxNDisconnectStationAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1175)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNDisconnectStationAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxNDisconnectStationAttack.setDescription(' This trap indicates that an AP has determined that a client is under Disconnect Attack because the rate of Assoc/Reassoc Response packets received by that client exceeds the configured threshold. ')
wlsxNStaUnAssociatedFromUnsecureAP = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1176)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNStaUnAssociatedFromUnsecureAP.setStatus('current')
if mibBuilder.loadTexts: wlsxNStaUnAssociatedFromUnsecureAP.setDescription(' This trap indicates that an AP that had previously detected a client association to a Rogue access point is no longer detecting that association. ')
wlsxOmertaAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1177)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxOmertaAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxOmertaAttack.setDescription(' This trap indicates that an AP detected an Omerta attack. ')
wlsxTKIPReplayAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1178)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxTKIPReplayAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxTKIPReplayAttack.setDescription(' This trap indicates that an AP detected a possible TKIP replay attack. If successful this could be the precursor to more advanced attacks. ')
wlsxChopChopAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1179)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxChopChopAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxChopChopAttack.setDescription(' This trap indicates that an AP detected a ChopChop attack. ')
wlsxFataJackAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1180)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxFataJackAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxFataJackAttack.setDescription(' This trap indicates that an AP detected a FATA-Jack attack. ')
wlsxInvalidAddressCombination = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1181)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxInvalidAddressCombination.setStatus('current')
if mibBuilder.loadTexts: wlsxInvalidAddressCombination.setDescription(' This trap indicates that an AP detected an invalid source and destination combination. ')
wlsxValidClientMisassociation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1182)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAssociationType"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxValidClientMisassociation.setStatus('current')
if mibBuilder.loadTexts: wlsxValidClientMisassociation.setDescription(' This trap indicates that an AP detected a misassociation between a valid client and an unsafe AP. ')
wlsxMalformedHTIEDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1183)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxMalformedHTIEDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxMalformedHTIEDetected.setDescription(' This trap indicates that an AP detected a malformed HT Information Element. This can be the result of a misbehaving wireless driver or it may be an indication of a new wireless attack. ')
wlsxMalformedAssocReqDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1184)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxMalformedAssocReqDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxMalformedAssocReqDetected.setDescription(' This trap indicates that an AP detected a malformed association request with a NULL SSID. ')
wlsxOverflowIEDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1185)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxOverflowIEDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxOverflowIEDetected.setDescription(' This trap indicates that an AP detected a management frame with a malformed information element. The declared length of the element is larger than the entire frame containing the element. This may be used to corrupt or crash wireless drivers. ')
wlsxOverflowEAPOLKeyDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1186)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxOverflowEAPOLKeyDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxOverflowEAPOLKeyDetected.setDescription(' This trap indicates that an AP detected a key in an EAPOL Key message with a specified length greater than the length of the entire message. ')
wlsxMalformedFrameLargeDurationDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1187)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxMalformedFrameLargeDurationDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxMalformedFrameLargeDurationDetected.setDescription(' This trap indicates that an AP detected an unusually large duration in a wireless frame. This may be an attempt to block other devices from transmitting. ')
wlsxMalformedFrameWrongChannelDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1188)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBand"))
if mibBuilder.loadTexts: wlsxMalformedFrameWrongChannelDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxMalformedFrameWrongChannelDetected.setDescription(' This trap indicates that an AP detected a beacon on one channel advertising another channel. This could be an attempt to lure clients away from a valid AP. ')
wlsxMalformedAuthFrame = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1189)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxMalformedAuthFrame.setStatus('current')
if mibBuilder.loadTexts: wlsxMalformedAuthFrame.setDescription(' This trap indicates that an AP detected an authentication frame with either a bad algorithm (similar to Fata-Jack) or a bad transaction. ')
wlsxCTSRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1190)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxCTSRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsxCTSRateAnomaly.setDescription(' This trap indicates that the rate of CTS packets received by an AP exceeds the configured IDS threshold. ')
wlsxRTSRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1191)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxRTSRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsxRTSRateAnomaly.setDescription(' This trap indicates that the rate of RTS packets received by an AP exceeds the configured IDS threshold. ')
wlsxNRogueAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1192)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNRogueAPDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxNRogueAPDetected.setDescription(' This trap indicates that an unauthorized access point is connected to the wired network. The access point is classified as Rogue by the system. ')
wlsxNRogueAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1193)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNRogueAPResolved.setStatus('current')
if mibBuilder.loadTexts: wlsxNRogueAPResolved.setDescription(' This trap indicates that a previously detected access point, classified as Rogue, is either no longer present in the network or it changed its state. ')
wlsxNeighborAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1194)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNeighborAPDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxNeighborAPDetected.setDescription(' This trap indicates that an access point has been classified as a Neighbor by the system. ')
wlsxNInterferingAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1195)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNInterferingAPDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxNInterferingAPDetected.setDescription(' This trap indicates that an access point has been classified as Interfering by the system. The access point is declared Interfering because it is not authorized, nor has it been classified as a Rogue. ')
wlsxNSuspectRogueAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1196)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapConfidenceLevel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSuspectRogueAPDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxNSuspectRogueAPDetected.setDescription(' This trap indicates that an access point, classified as Suspected Rogue, is detected by the system. The AP is suspected to be rogue with the supplied confidence level. ')
wlsxNSuspectRogueAPResolved = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1197)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSuspectRogueAPResolved.setStatus('current')
if mibBuilder.loadTexts: wlsxNSuspectRogueAPResolved.setDescription(' This trap indicates that a previously detected access point, classified as Suspected Rogue, is either no longer present in the network or has changed its state. ')
wlsxBlockAckAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1198)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxBlockAckAttackDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxBlockAckAttackDetected.setDescription(' This trap indicates that an attempt has been made to deny service to the source address by spoofing a block ACK add request that sets a sequence number window outside the currently used window. ')
wlsxHotspotterAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1199)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxHotspotterAttackDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxHotspotterAttackDetected.setDescription(' This trap indicates that a new AP has appeared immediately following a client probe request. This is indicative of the Hotspotter tool or similar that attempts to trap clients with a fake hotspot or other wireless network. ')
wlsxNSignatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1200)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatch.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatch.setDescription(' This trap indicates that an AP detected a signature match in a frame. ')
wlsxNSignatureMatchNetstumbler = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1201)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchNetstumbler.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchNetstumbler.setDescription(' This trap indicates that an AP detected a signature match for Netstumbler in a frame. ')
wlsxNSignatureMatchAsleap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1202)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchAsleap.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchAsleap.setDescription(' This trap indicates that an AP detected a signature match for ASLEAP in a frame. ')
wlsxNSignatureMatchAirjack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1203)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchAirjack.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchAirjack.setDescription(' This trap indicates that an AP detected a signature match for Airjack in a frame. ')
wlsxNSignatureMatchNullProbeResp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1204)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchNullProbeResp.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchNullProbeResp.setDescription(' This trap indicates that an AP detected a signature match for Null-Probe-Response in a frame. ')
wlsxNSignatureMatchDeauthBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1205)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchDeauthBcast.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchDeauthBcast.setDescription(' This trap indicates that an AP detected a signature match for Deauth-Broadcast in a frame. ')
wlsxNSignatureMatchDisassocBcast = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1206)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchDisassocBcast.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchDisassocBcast.setDescription(' This trap indicates that an AP detected a signature match for Disassoc-Broadcast in a frame. ')
wlsxNSignatureMatchWellenreiter = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1207)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTransmitterMac"), ("WLSX-TRAP-MIB", "wlsxTrapReceiverMac"), ("WLSX-TRAP-MIB", "wlsxTrapSignatureName"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNSignatureMatchWellenreiter.setStatus('current')
if mibBuilder.loadTexts: wlsxNSignatureMatchWellenreiter.setDescription(' This trap indicates that an AP detected a signature match for Wellenreiter in a frame. ')
wlsxAPDeauthContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1208)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxAPDeauthContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxAPDeauthContainment.setDescription(' This trap indicates that an AP has attempted to contain an access point by disconnecting its client. ')
wlsxClientDeauthContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1209)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxClientDeauthContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxClientDeauthContainment.setDescription(' This trap indicates that an AP has attempted to contain a client by disconnecting it from the AP that it is associated with. ')
wlsxAPWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1210)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpv6Address"))
if mibBuilder.loadTexts: wlsxAPWiredContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxAPWiredContainment.setDescription(' This trap indicates that an AP has attempted to contain an access point by disrupting traffic to its client on the wired interface. ')
wlsxClientWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1211)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpv6Address"))
if mibBuilder.loadTexts: wlsxClientWiredContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxClientWiredContainment.setDescription(' This trap indicates that an AP has attempted to contain a client by disrupting traffic to it on the wired interface. ')
wlsxAPTaggedWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1212)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpv6Address"))
if mibBuilder.loadTexts: wlsxAPTaggedWiredContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxAPTaggedWiredContainment.setDescription(' This trap indicates that an AP has attempted to contain an access point by disrupting traffic to its client on the wired interface. ')
wlsxClientTaggedWiredContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1213)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceMac"), ("WLSX-TRAP-MIB", "wlsxTrapVlanId"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapDeviceIpv6Address"))
if mibBuilder.loadTexts: wlsxClientTaggedWiredContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxClientTaggedWiredContainment.setDescription(' This trap indicates that an AP has attempted to contain a client by disrupting traffic to it on the wired interface. ')
wlsxTarpitContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1214)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBand"))
if mibBuilder.loadTexts: wlsxTarpitContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxTarpitContainment.setDescription(' This trap indicates that an AP has attempted to contain an access point by moving a client that is attempting to associate to it to a tarpit. ')
wlsxVoiceClientLocationUpdate = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1215)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVcIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapVcMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIp"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapApMode"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxVoiceClientLocationUpdate.setStatus('current')
if mibBuilder.loadTexts: wlsxVoiceClientLocationUpdate.setDescription(' This trap indicates that the location of voice client has been changed. ')
wlsxAPChannelChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1216)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannelSec"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevChannelSec"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPARMChangeReason"), ("WLSX-TRAP-MIB", "wlsxTrapAPHTMode"), ("WLSX-TRAP-MIB", "wlsxTrapAPPhyType"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevHTMode"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevPhyType"))
if mibBuilder.loadTexts: wlsxAPChannelChange.setStatus('current')
if mibBuilder.loadTexts: wlsxAPChannelChange.setDescription(' This trap indicates that an AP changed its channel. ')
wlsxAPPowerChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1217)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPTxPower"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevTxPower"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxAPPowerChange.setStatus('current')
if mibBuilder.loadTexts: wlsxAPPowerChange.setDescription(' This trap indicates that an AP changed its transmit power level. ')
wlsxAPModeChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1218)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPCurMode"), ("WLSX-TRAP-MIB", "wlsxTrapAPPrevMode"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxAPModeChange.setStatus('current')
if mibBuilder.loadTexts: wlsxAPModeChange.setDescription(' This trap indicates that an AP changed its mode from AP to APMonitor or vice versa. ')
wlsxUserEntryAttributesChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1219)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapCardSlot"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapUserAttributeChangeType"), ("WLSX-TRAP-MIB", "wlsxTrapHTMode"), ("WLSX-TRAP-MIB", "wlsxTrapPhyType"))
if mibBuilder.loadTexts: wlsxUserEntryAttributesChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxUserEntryAttributesChanged.setDescription(' This trap indicates that the user entry attributes have changed. ')
wlsxPowerSaveDosAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1220)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxPowerSaveDosAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSaveDosAttack.setDescription(' This trap indicates that an AP detected a Power Save DoS attack. ')
wlsxNAPMasterStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1221)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapApControllerIp"), ("WLSX-TRAP-MIB", "wlsxTrapApMasterStatus"))
if mibBuilder.loadTexts: wlsxNAPMasterStatusChange.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxNAPMasterStatusChange.setDescription(' This trap indicates that the status of the AP as seen by the master controller has changed. **NOTE: this notification is obsoleted and replaced by wlsxNAPConductorStatusChange ')
wlsxNAdhocUsingValidSSID = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1222)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNAdhocUsingValidSSID.setStatus('current')
if mibBuilder.loadTexts: wlsxNAdhocUsingValidSSID.setDescription(' This trap indicates that an AP detected an ad hoc network node using a valid/protected SSID. ')
wlsxCRLExpired = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1223)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCaName"), ("WLSX-TRAP-MIB", "wlsxTrapCrlName"))
if mibBuilder.loadTexts: wlsxCRLExpired.setStatus('current')
if mibBuilder.loadTexts: wlsxCRLExpired.setDescription(' This trap indicates that the CRL associated with the particular Trustpoint is expired. ')
wlsxMgmtUserAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1224)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"))
if mibBuilder.loadTexts: wlsxMgmtUserAuthenticationFailed.setStatus('current')
if mibBuilder.loadTexts: wlsxMgmtUserAuthenticationFailed.setDescription(' This trap indicates that a management user authentication has failed. ')
wlsxNConnectionBackfromLocal = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1225)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapMasterName"), ("WLSX-TRAP-MIB", "wlsxTrapMasterIp"), ("WLSX-TRAP-MIB", "wlsxTrapLocalName"), ("WLSX-TRAP-MIB", "wlsxTrapLocalIp"), ("WLSX-TRAP-MIB", "wlsxTrapTimeStr"))
if mibBuilder.loadTexts: wlsxNConnectionBackfromLocal.setStatus('obsolete')
if mibBuilder.loadTexts: wlsxNConnectionBackfromLocal.setDescription(' A trap which indicates that tcp connection between master controller and local controller is back. ')
wlsxAPNumUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1226)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxAPNumUpgradeFailure.setStatus('current')
if mibBuilder.loadTexts: wlsxAPNumUpgradeFailure.setDescription(' A trap which indicates the number of upgrade failure of an access point. ')
wlsxAPNumWarmStarts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1227)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxAPNumWarmStarts.setStatus('current')
if mibBuilder.loadTexts: wlsxAPNumWarmStarts.setDescription(' A trap which indicates the number of warm starts of an access point. ')
wlsxAPNumColdStarts = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1228)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxAPNumColdStarts.setStatus('current')
if mibBuilder.loadTexts: wlsxAPNumColdStarts.setDescription(' A trap which indicates the number of cold starts of an access point. ')
wlsxAPNumDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1229)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxAPNumDown.setStatus('current')
if mibBuilder.loadTexts: wlsxAPNumDown.setDescription(' A trap which indicates the number of down alarms of an access point. ')
wlsxAPNumRadioDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1230)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxAPNumRadioDown.setStatus('current')
if mibBuilder.loadTexts: wlsxAPNumRadioDown.setDescription(' A trap which indicates the number of radio down alarms of an access point. ')
wlsxNumClockSyncErrors = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1231)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxNumClockSyncErrors.setStatus('current')
if mibBuilder.loadTexts: wlsxNumClockSyncErrors.setDescription(' A trap which indicates the total number of clock sync errors between the switch and access points. ')
wlsxNumColdStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1232)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxNumColdStart.setStatus('current')
if mibBuilder.loadTexts: wlsxNumColdStart.setDescription(' A trap which indicates the number of cold-starts of the switch. ')
wlsxNumWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1233)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxNumWarmStart.setStatus('current')
if mibBuilder.loadTexts: wlsxNumWarmStart.setDescription(' A trap which indicates the number of warm-starts of the switch. ')
wlsxWirelessHostedNetworkDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1234)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapClientClassification"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWirelessHostedNetworkDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxWirelessHostedNetworkDetected.setDescription(" This trap indicates that an AP detected a wireless client that is hosting a softAP. The softAP could be used to share the hosting client's wired or wireless network connection with other wireless users. ")
wlsxClientAssociatedToHostedNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1235)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxClientAssociatedToHostedNetwork.setStatus('current')
if mibBuilder.loadTexts: wlsxClientAssociatedToHostedNetwork.setDescription(' This trap indicates that an AP detected that a wireless client associated to an access point that is hosted by another wireless client. ')
wlsxThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1236)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceType"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceName"), ("WLSX-TRAP-MIB", "wlsxThresholdValue"), ("WLSX-TRAP-MIB", "wlsxResourceValue"))
if mibBuilder.loadTexts: wlsxThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsxThresholdExceeded.setDescription(' A trap indicates a particular resource under monitoring has gone above the threshold specified. ')
wlsxThresholdCleared = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1237)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceType"), ("WLSX-TRAP-MIB", "wlsxThresholdResourceName"), ("WLSX-TRAP-MIB", "wlsxThresholdValue"), ("WLSX-TRAP-MIB", "wlsxResourceValue"))
if mibBuilder.loadTexts: wlsxThresholdCleared.setStatus('current')
if mibBuilder.loadTexts: wlsxThresholdCleared.setDescription(' A trap indicates a particular resource under monitoring has come below the threshold specified. ')
wlsxWirelessHostedNetworkContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1238)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWirelessHostedNetworkContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxWirelessHostedNetworkContainment.setDescription(' This trap indicates that containment is being enforced on a client associated to a hosted network. ')
wlsxHostOfWirelessNetworkContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1239)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxHostOfWirelessNetworkContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxHostOfWirelessNetworkContainment.setDescription(' This trap indicates that containment is being enforced on a client that is hosting a wireless hosted network. ')
wlsxEnhancedAdhocContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1240)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxEnhancedAdhocContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxEnhancedAdhocContainment.setDescription(' This trap indicates that an AP has attempted to contain an adhoc node by disconnecting it from other members of the adhoc network. ')
wlsxPowerSupplyOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1241)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPowerSupplyNumber"))
if mibBuilder.loadTexts: wlsxPowerSupplyOKTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSupplyOKTrap.setDescription(' This trap indicates that the system power supply condition have returned to normal operation status. ')
wlsxPowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1242)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPowerSupplyNumber"))
if mibBuilder.loadTexts: wlsxPowerSupplyFailureTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSupplyFailureTrap.setDescription(' A trap which indicates that the power supply has failed. ')
wlsxFanTrayRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1243)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanTrayNumber"))
if mibBuilder.loadTexts: wlsxFanTrayRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxFanTrayRemovedTrap.setDescription(' A Trap which indicates that a fan tray is removed. ')
wlsxFanTrayInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1244)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanTrayNumber"))
if mibBuilder.loadTexts: wlsxFanTrayInsertedTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxFanTrayInsertedTrap.setDescription(' A Trap which indicates that a fan tray is inserted. ')
wlsxPowerSupplyMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1245)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPowerSupplyNumber"))
if mibBuilder.loadTexts: wlsxPowerSupplyMissingTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxPowerSupplyMissingTrap.setDescription(' A Trap which indicates that the power supply is missing. ')
wlsxStackTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1246)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxStackMemberMacAddress"), ("WLSX-TRAP-MIB", "wlsxStackPrevSlot"), ("WLSX-TRAP-MIB", "wlsxStackCurrentSlot"), ("WLSX-TRAP-MIB", "wlsxStackPrevState"), ("WLSX-TRAP-MIB", "wlsxStackCurrentState"), ("WLSX-TRAP-MIB", "wlsxStackChangeEvent"))
if mibBuilder.loadTexts: wlsxStackTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxStackTopologyChangeTrap.setDescription(' When change happens in any topology of the stack element in the stack, then a notification is sent to the Management Entity. ')
wlsxStackIfStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1247)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxStackMemberMacAddress"), ("WLSX-TRAP-MIB", "wlsxStackMemberSlotNumber"), ("WLSX-TRAP-MIB", "wlsxStackIfName"), ("WLSX-TRAP-MIB", "wlsxStackProtoIfTopoJoined"))
if mibBuilder.loadTexts: wlsxStackIfStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxStackIfStateChangeTrap.setDescription(' When any stacking interface in any stack element joins or leaves stacking topology, then a notification is sent to the Management Entity with slot and interface information. ')
wlsxLicenseServerExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1248)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapLicenseServerDaysRemaining"))
if mibBuilder.loadTexts: wlsxLicenseServerExpiry.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseServerExpiry.setDescription(' A Trap which indicates that licenses sent from the license server will expire in wlsxTrapLicenseServerDaysRemaining days. ')
wlsxLicenseClientExpiry = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1249)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapLicenseClientDaysRemaining"))
if mibBuilder.loadTexts: wlsxLicenseClientExpiry.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseClientExpiry.setDescription(' A Trap which indicates that licenses contributed by a license client will expire in wlsxTrapLicenseClientDaysRemaining days. ')
wlsxIfStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1250)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxIfIndex"), ("WLSX-TRAP-MIB", "wlsxIfState"), ("WLSX-TRAP-MIB", "wlsxIfStateChangeReason"))
if mibBuilder.loadTexts: wlsxIfStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxIfStateChangeTrap.setDescription(' When the link state of an interface changes due to reason specified by wlsxIfStateChangeReason object, a notification is sent to the Management Entity with reason for this state change and interface information. ')
wlsxWMSOffloadRecommended = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1251)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxWMSOffloadRecommended.setStatus('current')
if mibBuilder.loadTexts: wlsxWMSOffloadRecommended.setDescription(' This trap indicates that current state in the WMS module shows that WMS is reaching capacity, and so it is recommended to enable WMS-Offload. ')
wlsxAPActiveUplinkChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1252)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPPreviousUplinkType"), ("WLSX-TRAP-MIB", "wlsxTrapAPPreviousUplinkActiveTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPActiveUplinkType"), ("WLSX-TRAP-MIB", "wlsxTrapAPUplinkChangeReason"))
if mibBuilder.loadTexts: wlsxAPActiveUplinkChanged.setStatus('current')
if mibBuilder.loadTexts: wlsxAPActiveUplinkChanged.setDescription(' When the active uplink of an AP changes, a notification is sent to the Management Entity with the new uplink type ')
wlsxCertExpiringSoon = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1253)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapExpiringCertName"))
if mibBuilder.loadTexts: wlsxCertExpiringSoon.setStatus('current')
if mibBuilder.loadTexts: wlsxCertExpiringSoon.setDescription(' This trap indicates that a particular Certificate is going to expire in less than 60 days. ')
wlsxCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1254)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapExpiredCertName"))
if mibBuilder.loadTexts: wlsxCertExpired.setStatus('current')
if mibBuilder.loadTexts: wlsxCertExpired.setDescription(' This trap indicates that a particular Certificate has expired and is no longer valid. ')
wlsxAPManagedModeConfigFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1255)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPManagedModeConfigFailure"))
if mibBuilder.loadTexts: wlsxAPManagedModeConfigFailureTrap.setStatus('current')
if mibBuilder.loadTexts: wlsxAPManagedModeConfigFailureTrap.setDescription(' This trap indicates that config apply has failed on the IAP. ')
wlsxNAuthServerAcctTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1256)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserName"), ("WLSX-TRAP-MIB", "wlsxTrapUserIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxNAuthServerAcctTimedOut.setStatus('current')
if mibBuilder.loadTexts: wlsxNAuthServerAcctTimedOut.setDescription(' This trap indicates that the authentication server accounting timed out. ')
wlsxAPUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1257)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"))
if mibBuilder.loadTexts: wlsxAPUp.setStatus('current')
if mibBuilder.loadTexts: wlsxAPUp.setDescription(' A Trap which indicates that AP is Up with AP name and IP address. ')
wlsxAPDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1258)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"))
if mibBuilder.loadTexts: wlsxAPDown.setStatus('current')
if mibBuilder.loadTexts: wlsxAPDown.setDescription(' A Trap which indicates that AP is Down with AP name and IP address. ')
wlsxPortalServerDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1259)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPortalServerName"), ("WLSX-TRAP-MIB", "wlsxTrapPortalServerAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapPortalServerDownReason"))
if mibBuilder.loadTexts: wlsxPortalServerDown.setStatus('current')
if mibBuilder.loadTexts: wlsxPortalServerDown.setDescription(' This trap indicates that the captive portal server is down. ')
wlsxPortalServerUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1260)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPortalServerName"), ("WLSX-TRAP-MIB", "wlsxTrapPortalServerAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxPortalServerUp.setStatus('current')
if mibBuilder.loadTexts: wlsxPortalServerUp.setDescription(' This trap indicates that the captive portal server is up. ')
wlsxNAdhocUsingValidSSIDContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1261)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxNAdhocUsingValidSSIDContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxNAdhocUsingValidSSIDContainment.setDescription(' This trap indicates that containment is being enforced on an ad hoc wireless network node using a valid/protected SSID. ')
wlsxLicensePlatformMismatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1262)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapLicensePlatformMismatchKey"))
if mibBuilder.loadTexts: wlsxLicensePlatformMismatch.setStatus('current')
if mibBuilder.loadTexts: wlsxLicensePlatformMismatch.setDescription(' A Trap which indicates that license to be installed is not compatible with the platform. ')
wlsxIAPVoiceClientLocationUpdate = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1263)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapVcIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapVcMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"))
if mibBuilder.loadTexts: wlsxIAPVoiceClientLocationUpdate.setStatus('current')
if mibBuilder.loadTexts: wlsxIAPVoiceClientLocationUpdate.setDescription(' The trap represents a IAP voice client location update. ')
wlsxNAceUsageThreshold = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1264)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNAceUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: wlsxNAceUsageThreshold.setDescription(' A trap which indicates that the ACE Entries table has reached eighty percent of the maximum limit. ')
wlsxNWebCCLicenseEnforcement = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1265)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNWebCCLicenseEnforcement.setStatus('current')
if mibBuilder.loadTexts: wlsxNWebCCLicenseEnforcement.setDescription(' A Trap which indicates that web-cc license enforcement has been triggered. ')
wlsxNFanAbsent = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1266)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapFanNumber"))
if mibBuilder.loadTexts: wlsxNFanAbsent.setStatus('current')
if mibBuilder.loadTexts: wlsxNFanAbsent.setDescription(' A trap which indicates that the fan is absent. ')
wlsxWPAFTAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1267)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxWPAFTAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxWPAFTAttack.setDescription(" This trap indicates there is a possible attack of the Fast BSS Transition causing a WPA key re-installation. This can be indicative of a security breach where an attacker can hijack a client's association and/or decrypt an otherwise secure connection. ")
wlsxMitMDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1268)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxMitMDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxMitMDetected.setDescription(' This trap indicates that an AP detected a possible channel-based Man in the Middle attack by someone using spoofed beacons with an invalid Channel Switch Announcement. ')
wlsxAPPortUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1269)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"))
if mibBuilder.loadTexts: wlsxAPPortUp.setStatus('current')
if mibBuilder.loadTexts: wlsxAPPortUp.setDescription(" This trap indicates that AP's secure jack port is Up. ")
wlsxAPPortDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1270)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"), ("WLSX-TRAP-MIB", "wlsxTrapOperStatus"))
if mibBuilder.loadTexts: wlsxAPPortDown.setStatus('current')
if mibBuilder.loadTexts: wlsxAPPortDown.setDescription(" This trap indicates that AP's secure jack port is Down. ")
wlsxAPLoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1271)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"))
if mibBuilder.loadTexts: wlsxAPLoopDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxAPLoopDetected.setDescription(" This trap indicates that loop is detected on AP's secure jack port. ")
wlsxAPBROADCASTSTORM = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1272)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapPortNumber"))
if mibBuilder.loadTexts: wlsxAPBROADCASTSTORM.setStatus('current')
if mibBuilder.loadTexts: wlsxAPBROADCASTSTORM.setDescription(" This trap indicates that broadcast storm is detected on AP's secure jack port. ")
wlsxAPIPConflict = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1273)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapSourceMac"), ("WLSX-TRAP-MIB", "wlsxTrapCount"))
if mibBuilder.loadTexts: wlsxAPIPConflict.setStatus('current')
if mibBuilder.loadTexts: wlsxAPIPConflict.setDescription(' This trap indicates that an IP conflict is detected on AP. ')
wlsxCLEARPASSSERVERINVALID = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1274)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAuthServerName"))
if mibBuilder.loadTexts: wlsxCLEARPASSSERVERINVALID.setStatus('current')
if mibBuilder.loadTexts: wlsxCLEARPASSSERVERINVALID.setDescription(' This trap indicates that CLEARPASS server is not valid when using the CA to verity the server for download-role. ')
wlsxNLowOnFlash1Space = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1275)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNLowOnFlash1Space.setStatus('current')
if mibBuilder.loadTexts: wlsxNLowOnFlash1Space.setDescription(' A Trap which indicates that the controller is running low on flash1 space. ')
wlsxFlash1SpaceOK = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1276)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxFlash1SpaceOK.setStatus('current')
if mibBuilder.loadTexts: wlsxFlash1SpaceOK.setDescription(' This trap which indicates that the system flash1 space is back to a sufficient level. ')
wlsxTHERMALSHUTDOWN = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1277)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapAPIpAddress"))
if mibBuilder.loadTexts: wlsxTHERMALSHUTDOWN.setStatus('current')
if mibBuilder.loadTexts: wlsxTHERMALSHUTDOWN.setDescription(' This trap indicates that an AP is overheat and in shutdown mode. ')
wlsxPhonyBSSIDDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1278)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPName"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPMac"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxPhonyBSSIDDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxPhonyBSSIDDetected.setDescription(' This trap indicates that an AP detected a non-configured BSSID that should belong to one of our known valid APs. ')
wlsxAPUSBPLUGALARM = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1279)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapUSBVendorProductID"), ("WLSX-TRAP-MIB", "wlsxTrapUSBVendorProductID"), ("WLSX-TRAP-MIB", "wlsxTrapAPUSBStatus"))
if mibBuilder.loadTexts: wlsxAPUSBPLUGALARM.setStatus('current')
if mibBuilder.loadTexts: wlsxAPUSBPLUGALARM.setDescription(' This trap indicates that an USB device is plugged in or out to an AP. ')
wlsxNSwitchIPv6Changed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1280)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapSwitchIpv6"))
if mibBuilder.loadTexts: wlsxNSwitchIPv6Changed.setStatus('current')
if mibBuilder.loadTexts: wlsxNSwitchIPv6Changed.setDescription(' This trap indicates that the controller IPv6 address has changed. ')
wlsxNDot1xThresholdLimitHit = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1281)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNDot1xThresholdLimitHit.setStatus('current')
if mibBuilder.loadTexts: wlsxNDot1xThresholdLimitHit.setDescription(' A Trap which indicates that the controller is running on high optimum limit. ')
wlsxNDot1xTotalLimitHit = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1282)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"))
if mibBuilder.loadTexts: wlsxNDot1xTotalLimitHit.setStatus('current')
if mibBuilder.loadTexts: wlsxNDot1xTotalLimitHit.setDescription(' A Trap which indicates that the controller is running on full optimum limit. ')
wlsxClusterVlanProbeStatus = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1283)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapPeerIpAddress"), ("WLSX-TRAP-MIB", "wlsxTrapConnectionStatus"), ("WLSX-TRAP-MIB", "wlsxTrapFailedVlan"))
if mibBuilder.loadTexts: wlsxClusterVlanProbeStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxClusterVlanProbeStatus.setDescription(' This trap indicates the cluster VLAN probe status. ')
wlsxClientRejectedByMaxClientCount = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1284)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapEssid"))
if mibBuilder.loadTexts: wlsxClientRejectedByMaxClientCount.setStatus('current')
if mibBuilder.loadTexts: wlsxClientRejectedByMaxClientCount.setDescription(' This trap indicates the client is rejected by the max client count. ')
wlsxClientPskAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1285)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapUserPhyAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAuthFailureReason"), ("WLSX-TRAP-MIB", "wlsxTrapAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPName"), ("WLSX-TRAP-MIB", "wlsxTrapEssid"))
if mibBuilder.loadTexts: wlsxClientPskAuthenticationFailed.setStatus('current')
if mibBuilder.loadTexts: wlsxClientPskAuthenticationFailed.setDescription(' This trap indicates the client PSK Authentication Failed. ')
wlsxNStationAddedToDenyList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1286)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapStationDenyListReason"), ("WLSX-TRAP-MIB", "wlsxTrapStationDenyListReasonStr"))
if mibBuilder.loadTexts: wlsxNStationAddedToDenyList.setStatus('current')
if mibBuilder.loadTexts: wlsxNStationAddedToDenyList.setDescription(' This trap indicates that the station is added to denylist. ')
wlsxNStationRemovedFromDenyList = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1287)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"))
if mibBuilder.loadTexts: wlsxNStationRemovedFromDenyList.setStatus('current')
if mibBuilder.loadTexts: wlsxNStationRemovedFromDenyList.setDescription(' This trap indicates that the station is removed from denylist. ')
wlsxNAPConductorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1288)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapApControllerIp"), ("WLSX-TRAP-MIB", "wlsxTrapApConductorStatus"))
if mibBuilder.loadTexts: wlsxNAPConductorStatusChange.setStatus('current')
if mibBuilder.loadTexts: wlsxNAPConductorStatusChange.setDescription(' This trap indicates that the status of the AP as seen by the conductor controller has changed. ')
wlsxGhostTunnelserverAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1289)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxGhostTunnelserverAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxGhostTunnelserverAttack.setDescription(' This trap indicates there is a possible attack of the Ghost Tunnel. This can be airgap atttack only by beacon and probe request where an attacker can hijack a client. ')
wlsxGhostTunnelclientAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1290)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"))
if mibBuilder.loadTexts: wlsxGhostTunnelclientAttack.setStatus('current')
if mibBuilder.loadTexts: wlsxGhostTunnelclientAttack.setDescription(' This trap indicates there is a possible attack of the Ghost Tunnel. This can be airgap atttack only by beacon and probe request where an attacker can hijack a client. ')
wlsxPeerAssociatedToWifiDirectGo = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1291)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxPeerAssociatedToWifiDirectGo.setStatus('current')
if mibBuilder.loadTexts: wlsxPeerAssociatedToWifiDirectGo.setDescription(' This trap indicates that an AP detected a wireless client associated to a WIFI-Direct Group Owner. ')
wlsxPeerAssociatedToWifiDirectGoContainment = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1292)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPBSSID"), ("WLSX-TRAP-MIB", "wlsxTrapTargetAPSSID"), ("WLSX-TRAP-MIB", "wlsxTrapNodeMac"), ("WLSX-TRAP-MIB", "wlsxTrapSnr"), ("WLSX-TRAP-MIB", "wlsxTrapAPMacAddress"), ("WLSX-TRAP-MIB", "wlsxTrapAPRadioNumber"), ("WLSX-TRAP-MIB", "wlsxTrapAPLocation"), ("WLSX-TRAP-MIB", "wlsxTrapAPChannel"), ("WLSX-TRAP-MIB", "wlsxTrapAPBand"))
if mibBuilder.loadTexts: wlsxPeerAssociatedToWifiDirectGoContainment.setStatus('current')
if mibBuilder.loadTexts: wlsxPeerAssociatedToWifiDirectGoContainment.setDescription(' This trap indicates that containment is being enforced on a wireless client that is associated to a WIFI-Direct Group Owner. ')
wlsxLicenseThresholdLimitHit = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 11, 1, 2, 1293)).setObjects(("WLSX-TRAP-MIB", "wlsxTrapTime"), ("WLSX-TRAP-MIB", "wlsxLicensePoolName"), ("WLSX-TRAP-MIB", "wlsxLicenseType"))
if mibBuilder.loadTexts: wlsxLicenseThresholdLimitHit.setStatus('current')
if mibBuilder.loadTexts: wlsxLicenseThresholdLimitHit.setDescription(' A Trap which indicates that the Licenses are running on high optimum limit. ')
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsxFrameNonUnicastRateExceeded=wlsxFrameNonUnicastRateExceeded, wlsxTrapCardSlot=wlsxTrapCardSlot, wlsxPowerSupplyFailureTrap=wlsxPowerSupplyFailureTrap, wlsxNAuthMaxBWContracts=wlsxNAuthMaxBWContracts, wlsxTrapMatchedIp=wlsxTrapMatchedIp, wlsxFlash1SpaceOK=wlsxFlash1SpaceOK, wlsxTrapAPPhyType=wlsxTrapAPPhyType, wlsxAdhocNetworkBridgeDetected=wlsxAdhocNetworkBridgeDetected, wlsxMalformedAuthFrame=wlsxMalformedAuthFrame, wlsxTrapAPARMChangeReason=wlsxTrapAPARMChangeReason, wlsxOverflowEAPOLKeyDetected=wlsxOverflowEAPOLKeyDetected, wlsxConfigurationUpdateError=wlsxConfigurationUpdateError, wlsxTrapStationBlackListReason=wlsxTrapStationBlackListReason, wlsxClientTaggedWiredContainment=wlsxClientTaggedWiredContainment, wlsxAPPowerChange=wlsxAPPowerChange, wlsxTrapSignatureName=wlsxTrapSignatureName, wlsxHotspotterAttackDetected=wlsxHotspotterAttackDetected, wlsxTrapDBName=wlsxTrapDBName, wlsxWindowsBridgeDetectedSta=wlsxWindowsBridgeDetectedSta, wlsxFrameRetryRateExceeded=wlsxFrameRetryRateExceeded, wlsxGhostTunnelserverAttack=wlsxGhostTunnelserverAttack, wlsxWPAMisconfiguration=wlsxWPAMisconfiguration, wlsxReceiverMac=wlsxReceiverMac, wlsxNDBCommunicationFailure=wlsxNDBCommunicationFailure, wlsxStackMemberMacAddress=wlsxStackMemberMacAddress, wlsxHT40MHzIntoleranceSta=wlsxHT40MHzIntoleranceSta, wlsxEnhancedAdhocContainment=wlsxEnhancedAdhocContainment, wlsxNAPMasterStatusChange=wlsxNAPMasterStatusChange, wlsxAdhocNetworkBridgeDetectedSta=wlsxAdhocNetworkBridgeDetectedSta, wlsxChannelMisconfiguration=wlsxChannelMisconfiguration, wlsxChannelFrameFragmentationRateExceeded=wlsxChannelFrameFragmentationRateExceeded, wlsxAPTaggedWiredContainment=wlsxAPTaggedWiredContainment, wlsxNStationAddedToDenyList=wlsxNStationAddedToDenyList, wlsxTrapLocalName=wlsxTrapLocalName, wlsxNIpSpoofingDetected=wlsxNIpSpoofingDetected, wlsxNStationAddedToBlackList=wlsxNStationAddedToBlackList, wlsxNChannelChanged=wlsxNChannelChanged, wlsxTrapAPIpAddress=wlsxTrapAPIpAddress, wlsxTrapTargetAPBSSID=wlsxTrapTargetAPBSSID, wlsxAdhocNetwork=wlsxAdhocNetwork, wlsxCTSTransferError=wlsxCTSTransferError, wlsxTrapCount=wlsxTrapCount, wlsxAPInterferenceDetected=wlsxAPInterferenceDetected, wlsxTrapVrrpID=wlsxTrapVrrpID, wlsxTunnelUp=wlsxTunnelUp, wlsxEsiServerChanged=wlsxEsiServerChanged, wlsxTrapVcMacAddress=wlsxTrapVcMacAddress, wlsxTrapTunnelUpReason=wlsxTrapTunnelUpReason, wlsxSignatureMatch=wlsxSignatureMatch, wlsxNumWarmStart=wlsxNumWarmStart, wlsxInformQueueOverFlow=wlsxInformQueueOverFlow, wlsxEAPRateAnomaly=wlsxEAPRateAnomaly, wlsxPowerSupplyMissingTrap=wlsxPowerSupplyMissingTrap, wlsxNAuthServerIsUp=wlsxNAuthServerIsUp, wlsxNOutOfRangeTemperature=wlsxNOutOfRangeTemperature, wlsxTrapUserAttributeChangeType=wlsxTrapUserAttributeChangeType, wlsxTrapSourceMac=wlsxTrapSourceMac, wlsxSignStaNullProbeResp=wlsxSignStaNullProbeResp, wlsxTrapConfigurationState=wlsxTrapConfigurationState, wlsxCTSTransferSucceeded=wlsxCTSTransferSucceeded, wlsxAPActiveUplinkChanged=wlsxAPActiveUplinkChanged, wlsxDisconnectStationAttack=wlsxDisconnectStationAttack, wlsxTrapHostIp=wlsxTrapHostIp, wlsxTrapTableEntryChangeType=wlsxTrapTableEntryChangeType, wlsxTrapUserAuthenticationMethod=wlsxTrapUserAuthenticationMethod, wlsxTrapConnectionStatus=wlsxTrapConnectionStatus, wlsxTrapAPChannelSec=wlsxTrapAPChannelSec, wlsxTrapApMode=wlsxTrapApMode, wlsxNAuthServerReqTimedOut=wlsxNAuthServerReqTimedOut, wlsxTrapSwitchIp=wlsxTrapSwitchIp, wlsxTrapExpiredCertName=wlsxTrapExpiredCertName, wlsxChannelFrameRetryRateExceeded=wlsxChannelFrameRetryRateExceeded, wlsxApFloodAttack=wlsxApFloodAttack, wlsxTrapSpoofedNewPhyAddress=wlsxTrapSpoofedNewPhyAddress, wlsxNLowMemory=wlsxNLowMemory, wlsxTrapESIServerGrpName=wlsxTrapESIServerGrpName, wlsxTrapTunnelId=wlsxTrapTunnelId, wlsxTrapVrrpMasterIp=wlsxTrapVrrpMasterIp, wlsxFlashSpaceOK=wlsxFlashSpaceOK, wlsxThresholdResourceName=wlsxThresholdResourceName, wlsxFrameBandWidthRateExceeded=wlsxFrameBandWidthRateExceeded, wlsxFrameReceiveErrorRateExceeded=wlsxFrameReceiveErrorRateExceeded, wlsxWirelessBridge=wlsxWirelessBridge, wlsxInvalidMacOUISta=wlsxInvalidMacOUISta, wlsxThresholdExceeded=wlsxThresholdExceeded, wlsxVlanInterfaceEntryChanged=wlsxVlanInterfaceEntryChanged, wlsxClientPskAuthenticationFailed=wlsxClientPskAuthenticationFailed, wlsxNAceUsageThreshold=wlsxNAceUsageThreshold, wlsxNSignatureMatchNetstumbler=wlsxNSignatureMatchNetstumbler, wlsxIAPVoiceClientLocationUpdate=wlsxIAPVoiceClientLocationUpdate, wlsxNSignatureMatch=wlsxNSignatureMatch, wlsxAPNumDown=wlsxAPNumDown, wlsxWEPMisconfiguration=wlsxWEPMisconfiguration, wlsxTrapAdminStatus=wlsxTrapAdminStatus, wlsxReservedChannelViolation=wlsxReservedChannelViolation, wlsxNSwitchIPChanged=wlsxNSwitchIPChanged, wlsxTunnelDown=wlsxTunnelDown, wlsxNeighborAPDetected=wlsxNeighborAPDetected, wlsxClientWiredContainment=wlsxClientWiredContainment, wlsrTrapMIB=wlsrTrapMIB, wlsxNSwitchRoleChange=wlsxNSwitchRoleChange, wlsxTrapMatchedIpv6=wlsxTrapMatchedIpv6, wlsxNLicenseExpiry=wlsxNLicenseExpiry, wlsxChannelInterferenceCleared=wlsxChannelInterferenceCleared, wlsxValidClientNotUsingEncryption=wlsxValidClientNotUsingEncryption, wlsxNCoverageHoleDetected=wlsxNCoverageHoleDetected, wlsxSignAPAirjack=wlsxSignAPAirjack, wlsxRepeatWEPIVViolation=wlsxRepeatWEPIVViolation, wlsxTrapMasterIp=wlsxTrapMasterIp, wlsxNormalTemperature=wlsxNormalTemperature, wlsxTrapApConductorStatus=wlsxTrapApConductorStatus, wlsxPortEntryChanged=wlsxPortEntryChanged, wlsxTrapAPBand=wlsxTrapAPBand, wlsxLicenseClientExpiry=wlsxLicenseClientExpiry, wlsxSSIDMisconfiguration=wlsxSSIDMisconfiguration, wlsxPowerSupplyOKTrap=wlsxPowerSupplyOKTrap, wlsxTrapNodeMac=wlsxTrapNodeMac, wlsxNInterferingAPDetected=wlsxNInterferingAPDetected, wlsxTrapStationBlackListReasonStr=wlsxTrapStationBlackListReasonStr, wlsxTrapSpoofedFrameType=wlsxTrapSpoofedFrameType, wlsxBlockAckAttackDetected=wlsxBlockAckAttackDetected, wlsxTrapEssid=wlsxTrapEssid, wlsxTrapLicensePlatformMismatchKey=wlsxTrapLicensePlatformMismatchKey, wlsxTrapTableGenNumber=wlsxTrapTableGenNumber, wlsxTrapMissingLicenses=wlsxTrapMissingLicenses, wlsxOmertaAttack=wlsxOmertaAttack, wlsxNAuthServerIsDown=wlsxNAuthServerIsDown, wlsxSignatureMatchAP=wlsxSignatureMatchAP, wlsxNAuthMaxAclEntries=wlsxNAuthMaxAclEntries, wlsxInterferingApDetected=wlsxInterferingApDetected, wlsxNSuspectRogueAPResolved=wlsxNSuspectRogueAPResolved, wlsxTrapAPUSBStatus=wlsxTrapAPUSBStatus, wlsxTrapUserIpAddress=wlsxTrapUserIpAddress, wlsxCoverageHoleResolved=wlsxCoverageHoleResolved, wlsxTrapAssociationType=wlsxTrapAssociationType, wlsxTrapUserPhyAddress=wlsxTrapUserPhyAddress, wlsxPortalServerDown=wlsxPortalServerDown, wlsxInvalidMacOUIAP=wlsxInvalidMacOUIAP, wlsxThresholdResourceType=wlsxThresholdResourceType, wlsxCLEARPASSSERVERINVALID=wlsxCLEARPASSSERVERINVALID, wlsxTrapAPPrevChannel=wlsxTrapAPPrevChannel, wlsxTrapClientClassification=wlsxTrapClientClassification, wlsxTrapAPRadioNumber=wlsxTrapAPRadioNumber, wlsxTrapVoltageValue=wlsxTrapVoltageValue, wlsxTrapAPMacAddress=wlsxTrapAPMacAddress, wlsxTrapAddressType=wlsxTrapAddressType, wlsxNProcessExceedsMemoryLimits=wlsxNProcessExceedsMemoryLimits, wlsxUserEntryAttributesChanged=wlsxUserEntryAttributesChanged, wlsxLicenseThresholdLimitHit=wlsxLicenseThresholdLimitHit, wlsxTrapVcIpAddress=wlsxTrapVcIpAddress, wlsxTrapAuthFailureReason=wlsxTrapAuthFailureReason, wlsxTrapSpoofedOldPhyAddress=wlsxTrapSpoofedOldPhyAddress, wlsxNAdhocUsingValidSSID=wlsxNAdhocUsingValidSSID, wlsxTrapTunnelDownReason=wlsxTrapTunnelDownReason, wlsxTrapSwitchIpv6=wlsxTrapSwitchIpv6, wlsxAPIPConflict=wlsxAPIPConflict, wlsxNSignatureMatchNullProbeResp=wlsxNSignatureMatchNullProbeResp, wlsxNFanTrayRemoved=wlsxNFanTrayRemoved, wlsxStackCurrentSlot=wlsxStackCurrentSlot, wlsxAPChannelChange=wlsxAPChannelChange, wlsxTrapAPPrevHTMode=wlsxTrapAPPrevHTMode, wlsxTHERMALSHUTDOWN=wlsxTHERMALSHUTDOWN, wlsxTrapVlanId=wlsxTrapVlanId, wlsxSignalAnomaly=wlsxSignalAnomaly, wlsxStackMemberSlotNumber=wlsxStackMemberSlotNumber, wlsxStackProtoIfTopoJoined=wlsxStackProtoIfTopoJoined, wlsxClusterVlanProbeStatus=wlsxClusterVlanProbeStatus, wlsxFrameLowSpeedRateExceeded=wlsxFrameLowSpeedRateExceeded, wlsxVlanEntryChanged=wlsxVlanEntryChanged, wlsxNSCInserted=wlsxNSCInserted, wlsxNAdhocNetworkBridgeDetectedSta=wlsxNAdhocNetworkBridgeDetectedSta, wlsxMgmtUserAuthenticationFailed=wlsxMgmtUserAuthenticationFailed, wlsxNumClockSyncErrors=wlsxNumClockSyncErrors, wlsxIfStateChangeReason=wlsxIfStateChangeReason, wlsxStackIfStateChangeTrap=wlsxStackIfStateChangeTrap, wlsxSignAPDeauthBcast=wlsxSignAPDeauthBcast, wlsxAPUp=wlsxAPUp, wlsxPortDown=wlsxPortDown, wlsxTrapPortalServerDownReason=wlsxTrapPortalServerDownReason, wlsxStackChangeEvent=wlsxStackChangeEvent, wlsxTrapTargetAPSSID=wlsxTrapTargetAPSSID, wlsxTrapDeviceMac=wlsxTrapDeviceMac, wlsxUnsecureAPResolved=wlsxUnsecureAPResolved, wlsxNRapExpiredPSK=wlsxNRapExpiredPSK, wlsxTrapLocalIp=wlsxTrapLocalIp, wlsxNPowerSupplyFailure=wlsxNPowerSupplyFailure, wlsxIfIndex=wlsxIfIndex, wlsxAPImpersonation=wlsxAPImpersonation, wlsxChannelFrameErrorRateExceeded=wlsxChannelFrameErrorRateExceeded, wlsxMitMDetected=wlsxMitMDetected, wlsxMalformedAssocReqDetected=wlsxMalformedAssocReqDetected, wlsxShortPreableMisconfiguration=wlsxShortPreableMisconfiguration, wlsxTrapTunnelStatus=wlsxTrapTunnelStatus, wlsxChannelRateAnomaly=wlsxChannelRateAnomaly, wlsxNAdhocNetwork=wlsxNAdhocNetwork, wlsxWarmStart=wlsxWarmStart, wlsxNAuthServerAcctTimedOut=wlsxNAuthServerAcctTimedOut, wlsxIfState=wlsxIfState, wlsxBSSIDIsDown=wlsxBSSIDIsDown, wlsxNAuthServerAllInService=wlsxNAuthServerAllInService, wlsxTrapAPChannel=wlsxTrapAPChannel, wlsxStackCurrentState=wlsxStackCurrentState, wlsxVoiceCdrBufferThresholdReached=wlsxVoiceCdrBufferThresholdReached, wlsxIfStateChangeTrap=wlsxIfStateChangeTrap, wlsxTrapAPActiveUplinkType=wlsxTrapAPActiveUplinkType, wlsxNStationRemovedFromBlackList=wlsxNStationRemovedFromBlackList, wlsxTrapTargetAPMac=wlsxTrapTargetAPMac, wlsxTrapAPPreviousUplinkType=wlsxTrapAPPreviousUplinkType, wlsxMemoryUsageOK=wlsxMemoryUsageOK, wlsxTrapAPCurMode=wlsxTrapAPCurMode, wlsxStaWeakWEPIVViolation=wlsxStaWeakWEPIVViolation, wlsxFanTrayInsertedTrap=wlsxFanTrayInsertedTrap, wlsxTrapVoltageType=wlsxTrapVoltageType, wlsxWPAFTAttack=wlsxWPAFTAttack, wlsxVlanLinkUp=wlsxVlanLinkUp, wlsxNUserEntryDeleted=wlsxNUserEntryDeleted, wlsxNAuthMaxUserEntries=wlsxNAuthMaxUserEntries, wlsxNOutOfRangeVoltage=wlsxNOutOfRangeVoltage, wlsxTrapDBType=wlsxTrapDBType, PYSNMP_MODULE_ID=wlsrTrapMIB, wlsxTrapCaName=wlsxTrapCaName, wlsxBSSIDIsUp=wlsxBSSIDIsUp, wlsxProcessRestart=wlsxProcessRestart, wlsxNFanFailure=wlsxNFanFailure, wlsxTrapAPLocation=wlsxTrapAPLocation, wlsxTrapFanTrayNumber=wlsxTrapFanTrayNumber, wlsxNodeRateAnomaly=wlsxNodeRateAnomaly, wlsxAPNumWarmStarts=wlsxAPNumWarmStarts, wlsxNLCInserted=wlsxNLCInserted, wlsxPortalServerUp=wlsxPortalServerUp, wlsxLoadbalancingDisabled=wlsxLoadbalancingDisabled, wlsxNPowerSupplyMissing=wlsxNPowerSupplyMissing, wlsxNAPConductorStatusChange=wlsxNAPConductorStatusChange, wlsxHtGreenfieldSupported=wlsxHtGreenfieldSupported, wlsxNDot1xThresholdLimitHit=wlsxNDot1xThresholdLimitHit, wlsxNLowOnFlash1Space=wlsxNLowOnFlash1Space, wlsxChannelInterferenceDetected=wlsxChannelInterferenceDetected, wlsxRTSRateAnomaly=wlsxRTSRateAnomaly, wlsxAPPortDown=wlsxAPPortDown, wlsxTrapUSBVendorProductID=wlsxTrapUSBVendorProductID, wlsxTrapLicenseDaysRemaining=wlsxTrapLicenseDaysRemaining, wlsxAPInterferenceCleared=wlsxAPInterferenceCleared, wlsxTrapDefinitionsGroup=wlsxTrapDefinitionsGroup, wlsxTrapUpdateFailureReason=wlsxTrapUpdateFailureReason, wlsxInvalidAddressCombination=wlsxInvalidAddressCombination, wlsxTrapAPSecChannel=wlsxTrapAPSecChannel, wlsxAdhocUsingValidSSID=wlsxAdhocUsingValidSSID, wlsxNDot1xTotalLimitHit=wlsxNDot1xTotalLimitHit, wlsxSwitchListEntryChanged=wlsxSwitchListEntryChanged, wlsxPortUp=wlsxPortUp, wlsxNSignatureMatchDeauthBcast=wlsxNSignatureMatchDeauthBcast, wlsxTrapInterferingAPInfoURL=wlsxTrapInterferingAPInfoURL, wlsxWirelessHostedNetworkContainment=wlsxWirelessHostedNetworkContainment, wlsxTrapLicenseServerDaysRemaining=wlsxTrapLicenseServerDaysRemaining)
mibBuilder.exportSymbols("WLSX-TRAP-MIB", wlsxThresholdValue=wlsxThresholdValue, wlsxTrapUserRole=wlsxTrapUserRole, wlsxTrapAPHTMode=wlsxTrapAPHTMode, wlsxLicenseType=wlsxLicenseType, wlsxLicensePoolName=wlsxLicensePoolName, wlsxSignatureMatchSta=wlsxSignatureMatchSta, wlsxTrapDBIpAddress=wlsxTrapDBIpAddress, wlsxTrapVrrpOperState=wlsxTrapVrrpOperState, wlsxMalformedFrameLargeDurationDetected=wlsxMalformedFrameLargeDurationDetected, wlsxTarpitContainment=wlsxTarpitContainment, wlsxFanTrayRemovedTrap=wlsxFanTrayRemovedTrap, wlsxTrapAPTxPower=wlsxTrapAPTxPower, wlsxNRogueAPResolved=wlsxNRogueAPResolved, wlsxTrapExpiringCertName=wlsxTrapExpiringCertName, wlsxWindowsBridgeDetectedAP=wlsxWindowsBridgeDetectedAP, wlsxAPBssidEntryChanged=wlsxAPBssidEntryChanged, wlsxNumColdStart=wlsxNumColdStart, wlsxTrapApControllerIp=wlsxTrapApControllerIp, wlsxAPModeChange=wlsxAPModeChange, wlsxTrapFrameType=wlsxTrapFrameType, wlsxTrapPortalServerName=wlsxTrapPortalServerName, wlsxTrapConfigurationId=wlsxTrapConfigurationId, wlsxTrapConfidenceLevel=wlsxTrapConfidenceLevel, wlsxPeerAssociatedToWifiDirectGo=wlsxPeerAssociatedToWifiDirectGo, wlsxHT40MHzIntoleranceAP=wlsxHT40MHzIntoleranceAP, wlsxTrapFanNumber=wlsxTrapFanNumber, wlsxNRogueAPDetected=wlsxNRogueAPDetected, wlsxAPNumColdStarts=wlsxAPNumColdStarts, wlsxTrapAPUplinkChangeReason=wlsxTrapAPUplinkChangeReason, wlsxColdStart=wlsxColdStart, wlsxMeshNodeEntryChanged=wlsxMeshNodeEntryChanged, wlsxTrapTemperatureValue=wlsxTrapTemperatureValue, wlsxTrapGlobalConfigObj=wlsxTrapGlobalConfigObj, wlsxAPDeauthContainment=wlsxAPDeauthContainment, wlsxMonStationEntryChanged=wlsxMonStationEntryChanged, wlsxWeakWEPIVViolation=wlsxWeakWEPIVViolation, wlsxNConnectionResetWithLocal=wlsxNConnectionResetWithLocal, wlsxLoadbalancingEnabled=wlsxLoadbalancingEnabled, wlsxTrapAPBSSID=wlsxTrapAPBSSID, wlsxLicensePlatformMismatch=wlsxLicensePlatformMismatch, wlsxTrapOperStatus=wlsxTrapOperStatus, wlsxUserEntryChanged=wlsxUserEntryChanged, wlsxAPUSBPLUGALARM=wlsxAPUSBPLUGALARM, wlsxTrapUpdateFailedObj=wlsxTrapUpdateFailedObj, wlsxNSignatureMatchDisassocBcast=wlsxNSignatureMatchDisassocBcast, wlsxNSuspectRogueAPDetected=wlsxNSuspectRogueAPDetected, wlsxNAccessPointIsUp=wlsxNAccessPointIsUp, wlsxPeerAssociatedToWifiDirectGoContainment=wlsxPeerAssociatedToWifiDirectGoContainment, wlsxNGBICInserted=wlsxNGBICInserted, wlsxSequenceNumberAnomalyAP=wlsxSequenceNumberAnomalyAP, wlsxTrapTargetAPBand=wlsxTrapTargetAPBand, wlsxNAdhocNetworkBridgeDetectedAP=wlsxNAdhocNetworkBridgeDetectedAP, wlsxResourceValue=wlsxResourceValue, wlsxNUserEntryCreated=wlsxNUserEntryCreated, wlsxAPNumUpgradeFailure=wlsxAPNumUpgradeFailure, wlsxVlanLinkDown=wlsxVlanLinkDown, wlsxTrapPrimaryControllerIp=wlsxTrapPrimaryControllerIp, wlsxOUIMisconfiguration=wlsxOUIMisconfiguration, wlsxNSignatureMatchAirjack=wlsxNSignatureMatchAirjack, wlsxStaRepeatWEPIVViolation=wlsxStaRepeatWEPIVViolation, wlsxMonAPEntryChanged=wlsxMonAPEntryChanged, wlsxTrapTargetAPName=wlsxTrapTargetAPName, wlsxTrapRogueIfoURL=wlsxTrapRogueIfoURL, wlsxDisconnectStationAttackSta=wlsxDisconnectStationAttackSta, wlsxNUserEntryDeAuthenticated=wlsxNUserEntryDeAuthenticated, wlsxNProcessDied=wlsxNProcessDied, wlsxNFanAbsent=wlsxNFanAbsent, wlsxAPWiredContainment=wlsxAPWiredContainment, wlsxTrapTimeStr=wlsxTrapTimeStr, wlsxTrapDeviceIpv6Address=wlsxTrapDeviceIpv6Address, wlsxAPNumRadioDown=wlsxAPNumRadioDown, wlsxTrapObjectsGroup=wlsxTrapObjectsGroup, wlsxTrapUserName=wlsxTrapUserName, wlsxTrapPeerIpAddress=wlsxTrapPeerIpAddress, wlsxNodeRateAnomalyAP=wlsxNodeRateAnomalyAP, wlsxTrapLicenseId=wlsxTrapLicenseId, wlsxTrapCTSURL=wlsxTrapCTSURL, wlsxWirelessHostedNetworkDetected=wlsxWirelessHostedNetworkDetected, wlsxTrapESIServerName=wlsxTrapESIServerName, wlsxNFanTrayInserted=wlsxNFanTrayInserted, wlsxCertExpiringSoon=wlsxCertExpiringSoon, wlsxConfigurationUpdateSucceeded=wlsxConfigurationUpdateSucceeded, wlsxAPDown=wlsxAPDown, wlsxClientAssociatedToHostedNetwork=wlsxClientAssociatedToHostedNetwork, wlsxNUserAuthenticationFailed=wlsxNUserAuthenticationFailed, wlsxNStationRemovedFromDenyList=wlsxNStationRemovedFromDenyList, wlsxAPEntryChanged=wlsxAPEntryChanged, wlsxTrapFailedVlan=wlsxTrapFailedVlan, wlsxThresholdCleared=wlsxThresholdCleared, wlsxTrapAPManagedModeConfigFailure=wlsxTrapAPManagedModeConfigFailure, wlsxTrapReceiverMac=wlsxTrapReceiverMac, wlsxStaUnAssociatedFromUnsecureAP=wlsxStaUnAssociatedFromUnsecureAP, wlsxValidClientMisassociation=wlsxValidClientMisassociation, wlsxTrapHTMode=wlsxTrapHTMode, wlsxAPBROADCASTSTORM=wlsxAPBROADCASTSTORM, wlsxLicenseEntryChanged=wlsxLicenseEntryChanged, wlsxTrapAPPrevPhyType=wlsxTrapAPPrevPhyType, wlsxSignStaAsleap=wlsxSignStaAsleap, wlsxCRLExpired=wlsxCRLExpired, wlsxTrapApSerialNumber=wlsxTrapApSerialNumber, wlsxWMSOffloadRecommended=wlsxWMSOffloadRecommended, wlsxAPManagedModeConfigFailureTrap=wlsxAPManagedModeConfigFailureTrap, wlsxVoiceCurrentNumCdr=wlsxVoiceCurrentNumCdr, wlsxNUserEntryAuthenticated=wlsxNUserEntryAuthenticated, wlsxNVrrpStateChange=wlsxNVrrpStateChange, wlsxFanOK=wlsxFanOK, wlsxTrapCTSTransferType=wlsxTrapCTSTransferType, wlsxTrapPortalServerAddress=wlsxTrapPortalServerAddress, wlsxNRadioAttributesChanged=wlsxNRadioAttributesChanged, wlsxStackPrevSlot=wlsxStackPrevSlot, wlsxSignStaNetstumbler=wlsxSignStaNetstumbler, wlsxNRapWarnExpiredPSK=wlsxNRapWarnExpiredPSK, wlsxClientFloodAttack=wlsxClientFloodAttack, wlsxTrapSpoofedIpAddress=wlsxTrapSpoofedIpAddress, wlsxAPLoopDetected=wlsxAPLoopDetected, wlsxCertExpired=wlsxCertExpired, wlsxFataJackAttack=wlsxFataJackAttack, wlsxStaInterferenceDetected=wlsxStaInterferenceDetected, wlsxSuspectUnsecureAPDetected=wlsxSuspectUnsecureAPDetected, wlsxSuspectUnsecureAPResolved=wlsxSuspectUnsecureAPResolved, wlsxNDisconnectStationAttack=wlsxNDisconnectStationAttack, wlsxMalformedHTIEDetected=wlsxMalformedHTIEDetected, wlsxGhostTunnelclientAttack=wlsxGhostTunnelclientAttack, wlsxValidSSIDViolation=wlsxValidSSIDViolation, wlsxStaInterferenceCleared=wlsxStaInterferenceCleared, wlsxTKIPReplayAttack=wlsxTKIPReplayAttack, wlsxPowerSupplyOK=wlsxPowerSupplyOK, wlsxTrapCrlName=wlsxTrapCrlName, wlsxAPPortUp=wlsxAPPortUp, wlsxTrapAPPrevTxPower=wlsxTrapAPPrevTxPower, wlsxTrapTargetAPChannel=wlsxTrapTargetAPChannel, wlsxLicenseServerExpiry=wlsxLicenseServerExpiry, wlsxSignAPAsleap=wlsxSignAPAsleap, wlsxTrapMatchedMac=wlsxTrapMatchedMac, wlsxUnsecureAPDetected=wlsxUnsecureAPDetected, wlsxNSwitchIPv6Changed=wlsxNSwitchIPv6Changed, wlsxCTSRateAnomaly=wlsxCTSRateAnomaly, wlsxSignStaAirjack=wlsxSignStaAirjack, wlsxNApOnBackupController=wlsxNApOnBackupController, wlsxClientRejectedByMaxClientCount=wlsxClientRejectedByMaxClientCount, wlsxTrapProcessName=wlsxTrapProcessName, wlsxTrapMasterName=wlsxTrapMasterName, wlsxDisconnectStationAttackAP=wlsxDisconnectStationAttackAP, wlsxSequenceNumberAnomalySta=wlsxSequenceNumberAnomalySta, wlsxNAuthServerTimedOut=wlsxNAuthServerTimedOut, wlsxNLCRemoved=wlsxNLCRemoved, wlsxTrapAuthServerAddress=wlsxTrapAuthServerAddress, wlsxTrapHostPort=wlsxTrapHostPort, wlsxTrapLicenseClientDaysRemaining=wlsxTrapLicenseClientDaysRemaining, wlsxStackPrevState=wlsxStackPrevState, wlsxGlobalConfigurationChangeNotification=wlsxGlobalConfigurationChangeNotification, wlsxNESIServerDown=wlsxNESIServerDown, wlsxNAccessPointIsDown=wlsxNAccessPointIsDown, wlsxVoiceClientLocationUpdate=wlsxVoiceClientLocationUpdate, wlsxTrapSwitchRole=wlsxTrapSwitchRole, wlsxNVpnMaxSessions=wlsxNVpnMaxSessions, wlsxStaImpersonation=wlsxStaImpersonation, wlsxNConnectionBackfromLocal=wlsxNConnectionBackfromLocal, wlsxNSignatureMatchAsleap=wlsxNSignatureMatchAsleap, wlsxClientAssociatingOnWrongChannel=wlsxClientAssociatingOnWrongChannel, wlsxAPRadioEntryChanged=wlsxAPRadioEntryChanged, wlsxTrapAuthServerName=wlsxTrapAuthServerName, wlsxTrapAPPreviousUplinkActiveTime=wlsxTrapAPPreviousUplinkActiveTime, wlsxAdhocNetworkDetected=wlsxAdhocNetworkDetected, wlsxSignAPNullProbeResp=wlsxSignAPNullProbeResp, wlsxTrapAPPrevMode=wlsxTrapAPPrevMode, wlsxStaAssociatedToUnsecureAP=wlsxStaAssociatedToUnsecureAP, wlsxTrapsGroup=wlsxTrapsGroup, wlsxTrapDBUserName=wlsxTrapDBUserName, wlsxAPSpoofingDetected=wlsxAPSpoofingDetected, wlsxTrapStationDenyListReason=wlsxTrapStationDenyListReason, wlsxClientDeauthContainment=wlsxClientDeauthContainment, wlsxTrapStationDenyListReasonStr=wlsxTrapStationDenyListReasonStr, wlsxAdhocNetworkBridgeDetectedAP=wlsxAdhocNetworkBridgeDetectedAP, wlsxChopChopAttack=wlsxChopChopAttack, wlsxConfigurationLicenseMismatch=wlsxConfigurationLicenseMismatch, wlsxSignStaDeauthBcast=wlsxSignStaDeauthBcast, wlsxNAuthMaxXsecUserEntries=wlsxNAuthMaxXsecUserEntries, wlsxPhonyBSSIDDetected=wlsxPhonyBSSIDDetected, wlsxWindowsBridgeDetected=wlsxWindowsBridgeDetected, wlsxNStaUnAssociatedFromUnsecureAP=wlsxNStaUnAssociatedFromUnsecureAP, wlsxTrapSnr=wlsxTrapSnr, wlsxTrapBackupControllerIp=wlsxTrapBackupControllerIp, wlsxTrapDeviceIpAddress=wlsxTrapDeviceIpAddress, wlsxPowerSaveDosAttack=wlsxPowerSaveDosAttack, wlsxTrapRogueInfoURL=wlsxTrapRogueInfoURL, wlsxTrapTime=wlsxTrapTime, wlsxStaPolicyViolation=wlsxStaPolicyViolation, wlsxHostOfWirelessNetworkContainment=wlsxHostOfWirelessNetworkContainment, wlsxTrapESIServerIpAddress=wlsxTrapESIServerIpAddress, wlsxNAdhocUsingValidSSIDContainment=wlsxNAdhocUsingValidSSIDContainment, wlsxNWebCCLicenseEnforcement=wlsxNWebCCLicenseEnforcement, wlsxNSignatureMatchWellenreiter=wlsxNSignatureMatchWellenreiter, wlsxNodeRateAnomalySta=wlsxNodeRateAnomalySta, wlsxTrapAPName=wlsxTrapAPName, wlsxNESIServerUp=wlsxNESIServerUp, wlsxTrapAPPrevChannelSec=wlsxTrapAPPrevChannelSec, wlsxStackTopologyChangeTrap=wlsxStackTopologyChangeTrap, wlsxAdhocNetworkRemoved=wlsxAdhocNetworkRemoved, wlsxTrapTransmitterMac=wlsxTrapTransmitterMac, wlsxTrapApMasterStatus=wlsxTrapApMasterStatus, wlsxTrapAuthServerTimeout=wlsxTrapAuthServerTimeout, wlsxFrameFragmentationRateExceeded=wlsxFrameFragmentationRateExceeded, wlsxNLowOnFlashSpace=wlsxNLowOnFlashSpace, wlsxSignAPNetstumbler=wlsxSignAPNetstumbler, wlsxMalformedFrameWrongChannelDetected=wlsxMalformedFrameWrongChannelDetected, wlsxInRangeVoltage=wlsxInRangeVoltage, wlsxTrapPowerSupplyNumber=wlsxTrapPowerSupplyNumber, wlsxOverflowIEDetected=wlsxOverflowIEDetected, wlsxTrapPortNumber=wlsxTrapPortNumber, wlsxStackIfName=wlsxStackIfName, wlsxTrapPhyType=wlsxTrapPhyType)
