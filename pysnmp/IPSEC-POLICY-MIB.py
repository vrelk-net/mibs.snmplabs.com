#
# PySNMP MIB module IPSEC-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/selby1jr/src/mibs/mibs.snmplabs.com/asn1/IPSEC-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed Jul 24 12:06:53 2024
# On host IT-156955 platform Linux version 5.15.153.1-microsoft-standard-WSL2 by user selby1jr
# Using Python version 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
IpsecDoiEspTransform, IpsecDoiIdentType, IpsecDoiAuthAlgorithm, IkeAuthMethod, IkeEncryptionAlgorithm, IkeHashAlgorithm, IpsecDoiEncapsulationMode, IkeGroupDescription, IpsecDoiIpcompTransform, IpsecDoiSecProtocolId = mibBuilder.importSymbols("IPSEC-ISAKMP-IKE-DOI-TC", "IpsecDoiEspTransform", "IpsecDoiIdentType", "IpsecDoiAuthAlgorithm", "IkeAuthMethod", "IkeEncryptionAlgorithm", "IkeHashAlgorithm", "IpsecDoiEncapsulationMode", "IkeGroupDescription", "IpsecDoiIpcompTransform", "IpsecDoiSecProtocolId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
mib_2, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, iso, Counter32, Integer32, experimental, MibIdentifier, TimeTicks, Bits, NotificationType, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "iso", "Counter32", "Integer32", "experimental", "MibIdentifier", "TimeTicks", "Bits", "NotificationType", "ModuleIdentity", "Unsigned32")
DateAndTime, StorageType, TruthValue, DisplayString, VariablePointer, TextualConvention, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "StorageType", "TruthValue", "DisplayString", "VariablePointer", "TextualConvention", "TimeStamp", "RowStatus")
ipspMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 153))
ipspMIB.setRevisions(('2003-01-07 00:00',))
if mibBuilder.loadTexts: ipspMIB.setLastUpdated('200212100000Z')
if mibBuilder.loadTexts: ipspMIB.setOrganization('IETF IP Security Policy Working Group')
ipspConfigObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1))
ipspNotificationObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 2))
ipspConformanceObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 3))
class IpspBooleanOperator(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("or", 1), ("and", 2))

class IpspAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class IpspSADirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("outgoing", 1), ("incoming", 2))

class IpspIPPacketLogging(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65536)

class IpspIdentityFilter(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 256)

class IpspCredentialType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("reserved", 0), ("unknown", 1), ("sharedSecret", 2), ("x509", 3), ("kerberos", 4))

ipspLocalConfigObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 1))
ipspSystemPolicyGroupName = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipspSystemPolicyGroupName.setStatus('current')
ipspEndpointToGroupTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 2), )
if mibBuilder.loadTexts: ipspEndpointToGroupTable.setStatus('current')
ipspEndpointToGroupEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 2, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspEndGroupIdentType"), (0, "IPSEC-POLICY-MIB", "ipspEndGroupAddress"))
if mibBuilder.loadTexts: ipspEndpointToGroupEntry.setStatus('current')
ipspEndGroupIdentType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipspEndGroupIdentType.setStatus('current')
ipspEndGroupAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: ipspEndGroupAddress.setStatus('current')
ipspEndGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEndGroupName.setStatus('current')
ipspEndGroupLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspEndGroupLastChanged.setStatus('current')
ipspEndGroupStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEndGroupStorageType.setStatus('current')
ipspEndGroupRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEndGroupRowStatus.setStatus('current')
ipspGroupContentsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 3), )
if mibBuilder.loadTexts: ipspGroupContentsTable.setStatus('current')
ipspGroupContentsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 3, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspGroupContName"), (0, "IPSEC-POLICY-MIB", "ipspGroupContPriority"))
if mibBuilder.loadTexts: ipspGroupContentsEntry.setStatus('current')
ipspGroupContName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspGroupContName.setStatus('current')
ipspGroupContPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: ipspGroupContPriority.setStatus('current')
ipspGroupContFilter = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 3), VariablePointer().clone((1, 3, 6, 1, 2, 1, 153, 1, 7, 1, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspGroupContFilter.setStatus('current')
ipspGroupContComponentType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("reserved", 0), ("group", 1), ("rule", 2))).clone('rule')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspGroupContComponentType.setStatus('current')
ipspGroupContComponentName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspGroupContComponentName.setStatus('current')
ipspGroupContLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspGroupContLastChanged.setStatus('current')
ipspGroupContStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspGroupContStorageType.setStatus('current')
ipspGroupContRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspGroupContRowStatus.setStatus('current')
ipspRuleDefinitionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 4), )
if mibBuilder.loadTexts: ipspRuleDefinitionTable.setStatus('current')
ipspRuleDefinitionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 4, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspRuleDefName"))
if mibBuilder.loadTexts: ipspRuleDefinitionEntry.setStatus('current')
ipspRuleDefName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspRuleDefName.setStatus('current')
ipspRuleDefDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefDescription.setStatus('current')
ipspRuleDefFilter = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefFilter.setStatus('current')
ipspRuleDefFilterNegated = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefFilterNegated.setStatus('current')
ipspRuleDefAction = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefAction.setStatus('current')
ipspRuleDefAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 6), IpspAdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefAdminStatus.setStatus('current')
ipspRuleDefLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspRuleDefLastChanged.setStatus('current')
ipspRuleDefStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefStorageType.setStatus('current')
ipspRuleDefRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRuleDefRowStatus.setStatus('current')
ipspCompoundFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 5), )
if mibBuilder.loadTexts: ipspCompoundFilterTable.setStatus('current')
ipspCompoundFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 5, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCompFiltName"))
if mibBuilder.loadTexts: ipspCompoundFilterEntry.setStatus('current')
ipspCompFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspCompFiltName.setStatus('current')
ipspCompFiltDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 2), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompFiltDescription.setStatus('current')
ipspCompFiltLogicType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 3), IpspBooleanOperator().clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompFiltLogicType.setStatus('current')
ipspCompFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCompFiltLastChanged.setStatus('current')
ipspCompFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompFiltStorageType.setStatus('current')
ipspCompFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompFiltRowStatus.setStatus('current')
ipspSubfiltersTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 6), )
if mibBuilder.loadTexts: ipspSubfiltersTable.setStatus('current')
ipspSubfiltersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 6, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCompFiltName"), (0, "IPSEC-POLICY-MIB", "ipspSubFiltPriority"))
if mibBuilder.loadTexts: ipspSubfiltersEntry.setStatus('current')
ipspSubFiltPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: ipspSubFiltPriority.setStatus('current')
ipspSubFiltSubfilter = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSubFiltSubfilter.setStatus('current')
ipspSubFiltSubfilterIsNegated = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSubFiltSubfilterIsNegated.setStatus('current')
ipspSubFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspSubFiltLastChanged.setStatus('current')
ipspSubFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSubFiltStorageType.setStatus('current')
ipspSubFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSubFiltRowStatus.setStatus('current')
ipspStaticFilters = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 7))
ipspTrueFilter = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspTrueFilter.setStatus('current')
ipspTrueFilterInstance = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 7, 1, 0))
ipspIkePhase1Filter = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIkePhase1Filter.setStatus('current')
ipspIkePhase2Filter = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIkePhase2Filter.setStatus('current')
ipspIpHeaderFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 8), )
if mibBuilder.loadTexts: ipspIpHeaderFilterTable.setStatus('current')
ipspIpHeaderFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 8, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpHeadFiltName"))
if mibBuilder.loadTexts: ipspIpHeaderFilterEntry.setStatus('current')
ipspIpHeadFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpHeadFiltName.setStatus('current')
ipspIpHeadFiltType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 2), Bits().clone(namedValues=NamedValues(("sourceAddress", 0), ("destinationAddress", 1), ("sourcePort", 2), ("destinationPort", 3), ("protocol", 4), ("ipv6FlowLabel", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltType.setStatus('current')
ipspIpHeadFiltIPVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 3), InetAddressType().clone('ipv6')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltIPVersion.setStatus('current')
ipspIpHeadFiltSrcAddressBegin = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltSrcAddressBegin.setStatus('current')
ipspIpHeadFiltSrcAddressEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltSrcAddressEnd.setStatus('current')
ipspIpHeadFiltDstAddressBegin = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltDstAddressBegin.setStatus('current')
ipspIpHeadFiltDstAddressEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltDstAddressEnd.setStatus('current')
ipspIpHeadFiltSrcLowPort = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 8), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltSrcLowPort.setStatus('current')
ipspIpHeadFiltSrcHighPort = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltSrcHighPort.setStatus('current')
ipspIpHeadFiltDstLowPort = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltDstLowPort.setStatus('current')
ipspIpHeadFiltDstHighPort = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 11), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltDstHighPort.setStatus('current')
ipspIpHeadFiltProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltProtocol.setStatus('current')
ipspIpHeadFiltIPv6FlowLabel = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltIPv6FlowLabel.setStatus('current')
ipspIpHeadFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpHeadFiltLastChanged.setStatus('current')
ipspIpHeadFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltStorageType.setStatus('current')
ipspIpHeadFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpHeadFiltRowStatus.setStatus('current')
ipspIpOffsetFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 9), )
if mibBuilder.loadTexts: ipspIpOffsetFilterTable.setStatus('current')
ipspIpOffsetFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 9, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpOffFiltName"))
if mibBuilder.loadTexts: ipspIpOffsetFilterEntry.setStatus('current')
ipspIpOffFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpOffFiltName.setStatus('current')
ipspIpOffFiltOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpOffFiltOffset.setStatus('current')
ipspIpOffFiltType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("valueMatch", 1), ("valueNotMatch", 2), ("arithmeticEqual", 3), ("arithmeticNotEqual", 4), ("arithmeticLess", 5), ("arithmeticGreaterOrEqual", 6), ("arithmeticGreater", 7), ("arithmeticLessOrEqual", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpOffFiltType.setStatus('current')
ipspIpOffFiltNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpOffFiltNumber.setStatus('current')
ipspIpOffFiltValue = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpOffFiltValue.setStatus('current')
ipspIpOffFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpOffFiltLastChanged.setStatus('current')
ipspIpOffFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpOffFiltStorageType.setStatus('current')
ipspIpOffFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpOffFiltRowStatus.setStatus('current')
ipspTimeFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 10), )
if mibBuilder.loadTexts: ipspTimeFilterTable.setStatus('current')
ipspTimeFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 10, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspTimeFiltName"))
if mibBuilder.loadTexts: ipspTimeFilterEntry.setStatus('current')
ipspTimeFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspTimeFiltName.setStatus('current')
ipspTimeFiltPeriodStart = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 2), DateAndTime().clone(hexValue="00000101000000002b0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltPeriodStart.setStatus('current')
ipspTimeFiltPeriodEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 3), DateAndTime().clone(hexValue="99991231235959092b0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltPeriodEnd.setStatus('current')
ipspTimeFiltMonthOfYearMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 4), Bits().clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltMonthOfYearMask.setStatus('current')
ipspTimeFiltDayOfMonthMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="fffffffe")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltDayOfMonthMask.setStatus('current')
ipspTimeFiltDayOfWeekMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 6), Bits().clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6))).clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltDayOfWeekMask.setStatus('current')
ipspTimeFiltTimeOfDayMaskStart = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 7), DateAndTime().clone(hexValue="00000000000000002b0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltTimeOfDayMaskStart.setStatus('current')
ipspTimeFiltTimeOfDayMaskEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 8), DateAndTime().clone(hexValue="00000000000000002b0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltTimeOfDayMaskEnd.setStatus('current')
ipspTimeFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspTimeFiltLastChanged.setStatus('current')
ipspTimeFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltStorageType.setStatus('current')
ipspTimeFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspTimeFiltRowStatus.setStatus('current')
ipspIpsoHeaderFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 11), )
if mibBuilder.loadTexts: ipspIpsoHeaderFilterTable.setStatus('current')
ipspIpsoHeaderFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 11, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpsoHeadFiltName"))
if mibBuilder.loadTexts: ipspIpsoHeaderFilterEntry.setStatus('current')
ipspIpsoHeadFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpsoHeadFiltName.setStatus('current')
ipspIpsoHeadFiltType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 2), Bits().clone(namedValues=NamedValues(("classificationLevel", 0), ("protectionAuthority", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsoHeadFiltType.setStatus('current')
ipspIpsoHeadFiltClassification = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 90, 150, 171))).clone(namedValues=NamedValues(("topSecret", 61), ("secret", 90), ("confidential", 150), ("unclassified", 171)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsoHeadFiltClassification.setStatus('current')
ipspIpsoHeadFiltProtectionAuth = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("genser", 0), ("siopesi", 1), ("sci", 2), ("nsa", 3), ("doe", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsoHeadFiltProtectionAuth.setStatus('current')
ipspIpsoHeadFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpsoHeadFiltLastChanged.setStatus('current')
ipspIpsoHeadFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsoHeadFiltStorageType.setStatus('current')
ipspIpsoHeadFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsoHeadFiltRowStatus.setStatus('current')
ipspCredentialFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 12), )
if mibBuilder.loadTexts: ipspCredentialFilterTable.setStatus('current')
ipspCredentialFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 12, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCredFiltName"))
if mibBuilder.loadTexts: ipspCredentialFilterEntry.setStatus('current')
ipspCredFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspCredFiltName.setStatus('current')
ipspCredFiltCredentialType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 2), IpspCredentialType().clone('x509')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredFiltCredentialType.setStatus('current')
ipspCredFiltMatchFieldName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredFiltMatchFieldName.setStatus('current')
ipspCredFiltMatchFieldValue = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredFiltMatchFieldValue.setStatus('current')
ipspCredFiltAcceptCredFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 117))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredFiltAcceptCredFrom.setStatus('current')
ipspCredFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCredFiltLastChanged.setStatus('current')
ipspCredFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredFiltStorageType.setStatus('current')
ipspCredFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredFiltRowStatus.setStatus('current')
ipspPeerIdentityFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 13), )
if mibBuilder.loadTexts: ipspPeerIdentityFilterTable.setStatus('current')
ipspPeerIdentityFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 13, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspPeerIdFiltName"))
if mibBuilder.loadTexts: ipspPeerIdentityFilterEntry.setStatus('current')
ipspPeerIdFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 13, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspPeerIdFiltName.setStatus('current')
ipspPeerIdFiltIdentityType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 13, 1, 2), IpsecDoiIdentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdFiltIdentityType.setStatus('current')
ipspPeerIdFiltIdentityValue = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 13, 1, 3), IpspIdentityFilter()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdFiltIdentityValue.setStatus('current')
ipspPeerIdFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 13, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspPeerIdFiltLastChanged.setStatus('current')
ipspPeerIdFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 13, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdFiltStorageType.setStatus('current')
ipspPeerIdFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdFiltRowStatus.setStatus('current')
ipspCompoundActionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 14), )
if mibBuilder.loadTexts: ipspCompoundActionTable.setStatus('current')
ipspCompoundActionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 14, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCompActName"))
if mibBuilder.loadTexts: ipspCompoundActionEntry.setStatus('current')
ipspCompActName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 14, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspCompActName.setStatus('current')
ipspCompActExecutionStrategy = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("doAll", 1), ("doUntilSuccess", 2), ("doUntilFailure", 3))).clone('doUntilSuccess')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompActExecutionStrategy.setStatus('current')
ipspCompActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 14, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCompActLastChanged.setStatus('current')
ipspCompActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 14, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompActStorageType.setStatus('current')
ipspCompActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCompActRowStatus.setStatus('current')
ipspSubactionsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 15), )
if mibBuilder.loadTexts: ipspSubactionsTable.setStatus('current')
ipspSubactionsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 15, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCompActName"), (0, "IPSEC-POLICY-MIB", "ipspSubActPriority"))
if mibBuilder.loadTexts: ipspSubactionsEntry.setStatus('current')
ipspSubActPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: ipspSubActPriority.setStatus('current')
ipspSubActSubActionName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 15, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSubActSubActionName.setStatus('current')
aiipspCompActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 15, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiipspCompActLastChanged.setStatus('current')
aiipspCompActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 15, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiipspCompActStorageType.setStatus('current')
aiipspCompActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiipspCompActRowStatus.setStatus('current')
ipspStaticActions = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 16))
ipspDropAction = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspDropAction.setStatus('current')
ipspDropActionLog = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspDropActionLog.setStatus('current')
ipspAcceptAction = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspAcceptAction.setStatus('current')
ipspAcceptActionLog = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspAcceptActionLog.setStatus('current')
ipspRejectIKEAction = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspRejectIKEAction.setStatus('current')
ipspRejectIKEActionLog = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspRejectIKEActionLog.setStatus('current')
ipspSaPreconfiguredActionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 17), )
if mibBuilder.loadTexts: ipspSaPreconfiguredActionTable.setStatus('current')
ipspSaPreconfiguredActionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 17, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspSaPreActActionName"), (0, "IPSEC-POLICY-MIB", "ipspSaPreActSADirection"))
if mibBuilder.loadTexts: ipspSaPreconfiguredActionEntry.setStatus('current')
ipspSaPreActActionName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspSaPreActActionName.setStatus('current')
ipspSaPreActSADirection = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 2), IpspSADirection())
if mibBuilder.loadTexts: ipspSaPreActSADirection.setStatus('current')
ipspSaPreActActionDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActActionDescription.setStatus('current')
ipspSaPreActActionLifetimeSec = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 4), Unsigned32().clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActActionLifetimeSec.setStatus('current')
ipspSaPreActActionLifetimeKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActActionLifetimeKB.setStatus('current')
ipspSaPreActDoActionLogging = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActDoActionLogging.setStatus('current')
ipspSaPreActDoPacketLogging = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 7), IpspIPPacketLogging().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActDoPacketLogging.setStatus('current')
ipspSaPreActDFHandling = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("copy", 1), ("set", 2), ("clear", 3))).clone('copy')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActDFHandling.setStatus('current')
ipspSaPreActActionType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 9), IpsecDoiEncapsulationMode().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActActionType.setStatus('current')
ipspSaPreActAHSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActAHSPI.setStatus('current')
ipspSaPreActAHTransformName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActAHTransformName.setStatus('current')
ipspSaPreActAHSharedSecretName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActAHSharedSecretName.setStatus('current')
ipspSaPreActESPSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActESPSPI.setStatus('current')
ipspSaPreActESPTransformName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActESPTransformName.setStatus('current')
ipspSaPreActESPEncSecretName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActESPEncSecretName.setStatus('current')
ipspSaPreActESPAuthSecretName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActESPAuthSecretName.setStatus('current')
ipspSaPreActIPCompSPI = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActIPCompSPI.setStatus('current')
ipspSaPreActIPCompTransformName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActIPCompTransformName.setStatus('current')
ipspSaPreActPeerGatewayIdName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActPeerGatewayIdName.setStatus('current')
ipspSaPreActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspSaPreActLastChanged.setStatus('current')
ipspSaPreActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 21), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActStorageType.setStatus('current')
ipspSaPreActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaPreActRowStatus.setStatus('current')
ipspSaNegotiationParametersTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 18), )
if mibBuilder.loadTexts: ipspSaNegotiationParametersTable.setStatus('current')
ipspSaNegotiationParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 18, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspSaNegParamName"))
if mibBuilder.loadTexts: ipspSaNegotiationParametersEntry.setStatus('current')
ipspSaNegParamName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspSaNegParamName.setStatus('current')
ipspSaNegParamMinLifetimeSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamMinLifetimeSecs.setStatus('current')
ipspSaNegParamMinLifetimeKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamMinLifetimeKB.setStatus('current')
ipspSaNegParamRefreshThreshSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamRefreshThreshSecs.setStatus('current')
ipspSaNegParamRefreshThresholdKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamRefreshThresholdKB.setStatus('current')
ipspSaNegParamIdleDurationSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamIdleDurationSecs.setStatus('current')
ipspSaNegParamLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspSaNegParamLastChanged.setStatus('current')
ipspSaNegParamStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamStorageType.setStatus('current')
ipspSaNegParamRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 18, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspSaNegParamRowStatus.setStatus('current')
ipspIkeActionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 19), )
if mibBuilder.loadTexts: ipspIkeActionTable.setStatus('current')
ipspIkeActionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 19, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIkeActName"))
if mibBuilder.loadTexts: ipspIkeActionEntry.setStatus('current')
ipspIkeActName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIkeActName.setStatus('current')
ipspIkeActParametersName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActParametersName.setStatus('current')
ipspIkeActThresholdDerivedKeys = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActThresholdDerivedKeys.setStatus('current')
ipspIkeActExchangeMode = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("agressive", 2))).clone('main')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActExchangeMode.setStatus('current')
ipspIkeActAgressiveModeGroupId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 5), IkeGroupDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActAgressiveModeGroupId.setStatus('current')
ipspIkeActIdentityType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 6), IpsecDoiIdentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActIdentityType.setStatus('current')
ipspIkeActIdentityContext = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActIdentityContext.setStatus('current')
ipspIkeActPeerName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActPeerName.setStatus('current')
ipspIkeActDoActionLogging = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActDoActionLogging.setStatus('current')
ipspIkeActDoPacketLogging = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 10), IpspIPPacketLogging().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActDoPacketLogging.setStatus('current')
ipspIkeActVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActVendorId.setStatus('current')
ipspIkeActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIkeActLastChanged.setStatus('current')
ipspIkeActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActStorageType.setStatus('current')
ipspIkeActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 19, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActRowStatus.setStatus('current')
ipspIkeActionProposalsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 20), )
if mibBuilder.loadTexts: ipspIkeActionProposalsTable.setStatus('current')
ipspIkeActionProposalsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 20, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIkeActName"), (0, "IPSEC-POLICY-MIB", "ipspIkeActPropPriority"))
if mibBuilder.loadTexts: ipspIkeActionProposalsEntry.setStatus('current')
ipspIkeActPropPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipspIkeActPropPriority.setStatus('current')
ipspIkeActPropName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 20, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActPropName.setStatus('current')
ipspIkeActPropLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 20, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIkeActPropLastChanged.setStatus('current')
ipspIkeActPropStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 20, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActPropStorageType.setStatus('current')
ipspIkeActPropRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeActPropRowStatus.setStatus('current')
ipspIkeProposalTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 21), )
if mibBuilder.loadTexts: ipspIkeProposalTable.setStatus('current')
ipspIkeProposalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 21, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIkeActPropName"))
if mibBuilder.loadTexts: ipspIkeProposalEntry.setStatus('current')
ipspIkePropLifetimeDerivedKeys = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropLifetimeDerivedKeys.setStatus('current')
ipspIkePropCipherAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 2), IkeEncryptionAlgorithm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropCipherAlgorithm.setStatus('current')
ipspIkePropCipherKeyLength = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropCipherKeyLength.setStatus('current')
ipspIkePropCipherKeyRounds = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropCipherKeyRounds.setStatus('current')
ipspIkePropHashAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 5), IkeHashAlgorithm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropHashAlgorithm.setStatus('current')
ipspIkePropPrfAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("reserved", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropPrfAlgorithm.setStatus('current')
ipspIkePropVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropVendorId.setStatus('current')
ipspIkePropDhGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 8), IkeGroupDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropDhGroup.setStatus('current')
ipspIkePropAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 9), IkeAuthMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropAuthenticationMethod.setStatus('current')
ipspIkePropMaxLifetimeSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropMaxLifetimeSecs.setStatus('current')
ipspIkePropMaxLifetimeKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropMaxLifetimeKB.setStatus('current')
ipspIkePropProposalLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIkePropProposalLastChanged.setStatus('current')
ipspIkePropProposalStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropProposalStorageType.setStatus('current')
ipspIkePropProposalRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 21, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkePropProposalRowStatus.setStatus('current')
ipspIpsecActionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 22), )
if mibBuilder.loadTexts: ipspIpsecActionTable.setStatus('current')
ipspIpsecActionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 22, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpsecActName"))
if mibBuilder.loadTexts: ipspIpsecActionEntry.setStatus('current')
ipspIpsecActName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpsecActName.setStatus('current')
ipspIpsecActParametersName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActParametersName.setStatus('current')
ipspIpsecActProposalsName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActProposalsName.setStatus('current')
ipspIpsecActUsePfs = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActUsePfs.setStatus('current')
ipspIpsecActVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActVendorId.setStatus('current')
ipspIpsecActGroupId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 6), IkeGroupDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActGroupId.setStatus('current')
ipspIpsecActPeerGatewayIdName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 116))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActPeerGatewayIdName.setStatus('current')
ipspIpsecActUseIkeGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActUseIkeGroup.setStatus('current')
ipspIpsecActGranularity = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("subnet", 1), ("address", 2), ("protocol", 3), ("port", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActGranularity.setStatus('current')
ipspIpsecActMode = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActMode.setStatus('current')
ipspIpsecActDFHandling = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copy", 1), ("set", 2), ("clear", 3))).clone('copy')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActDFHandling.setStatus('current')
ipspIpsecActDoActionLogging = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActDoActionLogging.setStatus('current')
ipspIpsecActDoPacketLogging = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 13), IpspIPPacketLogging().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActDoPacketLogging.setStatus('current')
ipspIpsecActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpsecActLastChanged.setStatus('current')
ipspIpsecActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActStorageType.setStatus('current')
ipspIpsecActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 22, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecActRowStatus.setStatus('current')
ipspIpsecProposalsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 23), )
if mibBuilder.loadTexts: ipspIpsecProposalsTable.setStatus('current')
ipspIpsecProposalsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 23, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpsecPropName"), (0, "IPSEC-POLICY-MIB", "ipspIpsecPropPriority"), (0, "IPSEC-POLICY-MIB", "ipspIpsecPropProtocolId"))
if mibBuilder.loadTexts: ipspIpsecProposalsEntry.setStatus('current')
ipspIpsecPropName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpsecPropName.setStatus('current')
ipspIpsecPropPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipspIpsecPropPriority.setStatus('current')
ipspIpsecPropProtocolId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 3), IpsecDoiSecProtocolId())
if mibBuilder.loadTexts: ipspIpsecPropProtocolId.setStatus('current')
ipspIpsecPropTransformsName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecPropTransformsName.setStatus('current')
ipspIpsecPropLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpsecPropLastChanged.setStatus('current')
ipspIpsecPropStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecPropStorageType.setStatus('current')
ipspIpsecPropRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 23, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecPropRowStatus.setStatus('current')
ipspIpsecTransformsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 24), )
if mibBuilder.loadTexts: ipspIpsecTransformsTable.setStatus('current')
ipspIpsecTransformsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 24, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpsecTranType"), (0, "IPSEC-POLICY-MIB", "ipspIpsecTranName"), (0, "IPSEC-POLICY-MIB", "ipspIpsecTranPriority"))
if mibBuilder.loadTexts: ipspIpsecTransformsEntry.setStatus('current')
ipspIpsecTranType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 1), IpsecDoiSecProtocolId())
if mibBuilder.loadTexts: ipspIpsecTranType.setStatus('current')
ipspIpsecTranName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpsecTranName.setStatus('current')
ipspIpsecTranPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipspIpsecTranPriority.setStatus('current')
ipspIpsecTranTransformName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecTranTransformName.setStatus('current')
ipspIpsecTranLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpsecTranLastChanged.setStatus('current')
ipspIpsecTranStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecTranStorageType.setStatus('current')
ipspIpsecTranRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 24, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpsecTranRowStatus.setStatus('current')
ipspAhTransformTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 25), )
if mibBuilder.loadTexts: ipspAhTransformTable.setStatus('current')
ipspAhTransformEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 25, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspAhTranName"))
if mibBuilder.loadTexts: ipspAhTransformEntry.setStatus('current')
ipspAhTranName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspAhTranName.setStatus('current')
ipspAhTranMaxLifetimeSec = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranMaxLifetimeSec.setStatus('current')
ipspAhTranMaxLifetimeKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranMaxLifetimeKB.setStatus('current')
ipspAhTranAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 4), IpsecDoiAuthAlgorithm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranAlgorithm.setStatus('current')
ipspAhTranReplayProtection = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranReplayProtection.setStatus('current')
ipspAhTranReplayWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranReplayWindowSize.setStatus('current')
ipspAhTranLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspAhTranLastChanged.setStatus('current')
ipspAhTranStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranStorageType.setStatus('current')
ipspAhTranRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 25, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAhTranRowStatus.setStatus('current')
ipspEspTransformTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 26), )
if mibBuilder.loadTexts: ipspEspTransformTable.setStatus('current')
ipspEspTransformEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 26, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspEspTranName"))
if mibBuilder.loadTexts: ipspEspTransformEntry.setStatus('current')
ipspEspTranName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspEspTranName.setStatus('current')
ipspEspTranMaxLifetimeSec = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranMaxLifetimeSec.setStatus('current')
ipspEspTranMaxLifetimeKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranMaxLifetimeKB.setStatus('current')
ipspEspTranCipherTransformId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 4), IpsecDoiEspTransform()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranCipherTransformId.setStatus('current')
ipspEspTranCipherKeyLength = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranCipherKeyLength.setStatus('current')
ipspEspTranCipherKeyRounds = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranCipherKeyRounds.setStatus('current')
ipspEspTranIntegrityAlgorithmId = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 7), IpsecDoiAuthAlgorithm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranIntegrityAlgorithmId.setStatus('current')
ipspEspTranReplayPrevention = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranReplayPrevention.setStatus('current')
ipspEspTranReplayWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranReplayWindowSize.setStatus('current')
ipspEspTranLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspEspTranLastChanged.setStatus('current')
ipspEspTranStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranStorageType.setStatus('current')
ipspEspTranRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 26, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspEspTranRowStatus.setStatus('current')
ipspIpcompTransformTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 27), )
if mibBuilder.loadTexts: ipspIpcompTransformTable.setStatus('current')
ipspIpcompTransformEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 27, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIpcompTranName"))
if mibBuilder.loadTexts: ipspIpcompTransformEntry.setStatus('current')
ipspIpcompTranName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIpcompTranName.setStatus('current')
ipspIpcompTranMaxLifetimeSec = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranMaxLifetimeSec.setStatus('current')
ipspIpcompTranMaxLifetimeKB = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranMaxLifetimeKB.setStatus('current')
ipspIpcompTranAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 4), IpsecDoiIpcompTransform()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranAlgorithm.setStatus('current')
ipspIpcompTranDictionarySize = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranDictionarySize.setStatus('current')
ipspIpcompTranPrivateAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranPrivateAlgorithm.setStatus('current')
ipspIpcompTranLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIpcompTranLastChanged.setStatus('current')
ipspIpcompTranStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranStorageType.setStatus('current')
ipspIpcompTranRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 27, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIpcompTranRowStatus.setStatus('current')
ipspIkeIdentityTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 28), )
if mibBuilder.loadTexts: ipspIkeIdentityTable.setStatus('current')
ipspIkeIdentityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 28, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspEndGroupIdentType"), (0, "IPSEC-POLICY-MIB", "ipspEndGroupAddress"), (0, "IPSEC-POLICY-MIB", "ipspIkeActIdentityType"), (0, "IPSEC-POLICY-MIB", "ipspIkeActIdentityContext"))
if mibBuilder.loadTexts: ipspIkeIdentityEntry.setStatus('current')
ipspIkeIdCredentialName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 28, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeIdCredentialName.setStatus('current')
ipspIkeIdLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 28, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIkeIdLastChanged.setStatus('current')
ipspIkeIdStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 28, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeIdStorageType.setStatus('current')
ipspIkeIdRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 28, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIkeIdRowStatus.setStatus('current')
ipspPeerIdentityTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 29), )
if mibBuilder.loadTexts: ipspPeerIdentityTable.setStatus('current')
ipspPeerIdentityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 29, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspPeerIdName"), (0, "IPSEC-POLICY-MIB", "ipspPeerIdPriority"))
if mibBuilder.loadTexts: ipspPeerIdentityEntry.setStatus('current')
ipspPeerIdName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspPeerIdName.setStatus('current')
ipspPeerIdPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ipspPeerIdPriority.setStatus('current')
ipspPeerIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 3), IpsecDoiIdentType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdType.setStatus('current')
ipspPeerIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 4), IpspIdentityFilter()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdValue.setStatus('current')
ipspPeerIdAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdAddressType.setStatus('current')
ipspPeerIdAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdAddress.setStatus('current')
ipspPeerIdCredentialName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdCredentialName.setStatus('current')
ipspPeerIdLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspPeerIdLastChanged.setStatus('current')
ipspPeerIdStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdStorageType.setStatus('current')
ipspPeerIdRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 29, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspPeerIdRowStatus.setStatus('current')
ipspAutostartIkeTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 30), )
if mibBuilder.loadTexts: ipspAutostartIkeTable.setStatus('current')
ipspAutostartIkeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 30, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspAutoIkePriority"))
if mibBuilder.loadTexts: ipspAutostartIkeEntry.setStatus('current')
ipspAutoIkePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipspAutoIkePriority.setStatus('current')
ipspAutoIkeAction = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeAction.setStatus('current')
ipspAutoIkeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeAddressType.setStatus('current')
ipspAutoIkeSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeSourceAddress.setStatus('current')
ipspAutoIkeSourcePort = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeSourcePort.setStatus('current')
ipspAutoIkeDestAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeDestAddress.setStatus('current')
ipspAutoIkeDestPort = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeDestPort.setStatus('current')
ipspAutoIkeProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeProtocol.setStatus('current')
ipspAutoIkeLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspAutoIkeLastChanged.setStatus('current')
ipspAutoIkeStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeStorageType.setStatus('current')
ipspAutoIkeRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 30, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspAutoIkeRowStatus.setStatus('current')
ipspIpsecCredMngServiceTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 31), )
if mibBuilder.loadTexts: ipspIpsecCredMngServiceTable.setStatus('current')
ipspIpsecCredMngServiceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 31, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIcmsName"))
if mibBuilder.loadTexts: ipspIpsecCredMngServiceEntry.setStatus('current')
ipspIcmsName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspIcmsName.setStatus('current')
ipspIcmsDistinguishedName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIcmsDistinguishedName.setStatus('current')
ipspIcmsPolicyStatement = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIcmsPolicyStatement.setStatus('current')
ipspIcmsMaxChainLength = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIcmsMaxChainLength.setStatus('current')
ipspIcmsCredentialName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIcmsCredentialName.setStatus('current')
ipspIcmsLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspIcmsLastChanged.setStatus('current')
ipspIcmsStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIcmsStorageType.setStatus('current')
ipspIcmsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 31, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspIcmsRowStatus.setStatus('current')
ipspCredMngCRLTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 32), )
if mibBuilder.loadTexts: ipspCredMngCRLTable.setStatus('current')
ipspCredMngCRLEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 32, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspIcmsName"), (0, "IPSEC-POLICY-MIB", "ipspCmcCRLName"))
if mibBuilder.loadTexts: ipspCredMngCRLEntry.setStatus('current')
ipspCmcCRLName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspCmcCRLName.setStatus('current')
ipspCmcDistributionPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCmcDistributionPoint.setStatus('current')
ipspCmcThisUpdate = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCmcThisUpdate.setStatus('current')
ipspCmcNextUpdate = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCmcNextUpdate.setStatus('current')
ipspCmcLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCmcLastChanged.setStatus('current')
ipspCmcStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCmcStorageType.setStatus('current')
ipspCmcRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 32, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCmcRowStatus.setStatus('current')
ipspRevokedCertificateTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 33), )
if mibBuilder.loadTexts: ipspRevokedCertificateTable.setStatus('current')
ipspRevokedCertificateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 33, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCmcCRLName"), (0, "IPSEC-POLICY-MIB", "ipspRctCertSerialNumber"))
if mibBuilder.loadTexts: ipspRevokedCertificateEntry.setStatus('current')
ipspRctCertSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 33, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: ipspRctCertSerialNumber.setStatus('current')
ipspRctRevokedDate = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 33, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRctRevokedDate.setStatus('current')
ipspRctRevokedReason = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("reserved", 0), ("unspecified", 1), ("keyCompromise", 2), ("cACompromise", 3), ("affiliationChanged", 4), ("superseded", 5), ("cessationOfOperation", 6), ("certificateHold", 7), ("removeFromCRL", 8))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRctRevokedReason.setStatus('current')
ipspRctLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 33, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspRctLastChanged.setStatus('current')
ipspRctStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 33, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRctStorageType.setStatus('current')
ipspRctRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 33, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspRctRowStatus.setStatus('current')
ipspCredentialTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 34), )
if mibBuilder.loadTexts: ipspCredentialTable.setStatus('current')
ipspCredentialEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 34, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCredName"))
if mibBuilder.loadTexts: ipspCredentialEntry.setStatus('current')
ipspCredName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipspCredName.setStatus('current')
ipspCredType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 2), IpspCredentialType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredType.setStatus('current')
ipspCredCredential = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredCredential.setStatus('current')
ipspCredSize = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCredSize.setStatus('current')
ipspCredMngName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredMngName.setStatus('current')
ipspCredRemoteID = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredRemoteID.setStatus('current')
ipspCredAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 7), IpspAdminStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredAdminStatus.setStatus('current')
ipspCredLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCredLastChanged.setStatus('current')
ipspCredStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredStorageType.setStatus('current')
ipspCredRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 34, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredRowStatus.setStatus('current')
ipspCredentialSegmentTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 35), )
if mibBuilder.loadTexts: ipspCredentialSegmentTable.setStatus('current')
ipspCredentialSegmentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 35, 1), ).setIndexNames((0, "IPSEC-POLICY-MIB", "ipspCredName"), (0, "IPSEC-POLICY-MIB", "ipspCredSegIndex"))
if mibBuilder.loadTexts: ipspCredentialSegmentEntry.setStatus('current')
ipspCredSegIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ipspCredSegIndex.setStatus('current')
ipspCredSegValue = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 35, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredSegValue.setStatus('current')
ipspCredSegLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 35, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCredSegLastChanged.setStatus('current')
ipspCredSegStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 35, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspCredSegStorageType.setStatus('current')
ipspCredSegRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 35, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipspCredSegRowStatus.setStatus('current')
ipspNotificationVariables = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 2, 1))
ipspNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 2, 0))
ipspActionExecuted = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 1), VariablePointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspActionExecuted.setStatus('current')
ipspIPInterfaceType = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspIPInterfaceType.setStatus('current')
ipspIPInterfaceAddress = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspIPInterfaceAddress.setStatus('current')
ipspIPSourceType = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 4), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspIPSourceType.setStatus('current')
ipspIPSourceAddress = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 5), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspIPSourceAddress.setStatus('current')
ipspIPDestinationType = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 6), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspIPDestinationType.setStatus('current')
ipspIPDestinationAddress = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 7), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspIPDestinationAddress.setStatus('current')
ipspPacketDirection = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspPacketDirection.setStatus('current')
ipspPacketPart = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipspPacketPart.setStatus('current')
ipspActionNotification = NotificationType((1, 3, 6, 1, 2, 1, 153, 2, 0, 1)).setObjects(("IPSEC-POLICY-MIB", "ipspActionExecuted"), ("IPSEC-POLICY-MIB", "ipspIPInterfaceType"), ("IPSEC-POLICY-MIB", "ipspIPInterfaceAddress"), ("IPSEC-POLICY-MIB", "ipspIPSourceType"), ("IPSEC-POLICY-MIB", "ipspIPSourceAddress"), ("IPSEC-POLICY-MIB", "ipspIPDestinationType"), ("IPSEC-POLICY-MIB", "ipspIPDestinationAddress"), ("IPSEC-POLICY-MIB", "ipspPacketDirection"))
if mibBuilder.loadTexts: ipspActionNotification.setStatus('current')
ipspPacketNotification = NotificationType((1, 3, 6, 1, 2, 1, 153, 2, 0, 2)).setObjects(("IPSEC-POLICY-MIB", "ipspActionExecuted"), ("IPSEC-POLICY-MIB", "ipspIPInterfaceType"), ("IPSEC-POLICY-MIB", "ipspIPInterfaceAddress"), ("IPSEC-POLICY-MIB", "ipspIPSourceType"), ("IPSEC-POLICY-MIB", "ipspIPSourceAddress"), ("IPSEC-POLICY-MIB", "ipspIPDestinationType"), ("IPSEC-POLICY-MIB", "ipspIPDestinationAddress"), ("IPSEC-POLICY-MIB", "ipspPacketDirection"), ("IPSEC-POLICY-MIB", "ipspPacketPart"))
if mibBuilder.loadTexts: ipspPacketNotification.setStatus('current')
ipspCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 3, 1))
ipspGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 3, 2))
ipspRuleFilterCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 1)).setObjects(("IPSEC-POLICY-MIB", "ipspEndpointGroup"), ("IPSEC-POLICY-MIB", "ipspGroupContentsGroup"), ("IPSEC-POLICY-MIB", "ipspRuleDefinitionGroup"), ("IPSEC-POLICY-MIB", "ipspIPHeaderFilterGroup"), ("IPSEC-POLICY-MIB", "ipspStaticFilterGroup"), ("IPSEC-POLICY-MIB", "ipspIpsecSystemPolicyNameGroup"), ("IPSEC-POLICY-MIB", "ipspCompoundFilterGroup"), ("IPSEC-POLICY-MIB", "ipspIPOffsetFilterGroup"), ("IPSEC-POLICY-MIB", "ipspTimeFilterGroup"), ("IPSEC-POLICY-MIB", "ipspIpsoHeaderFilterGroup"), ("IPSEC-POLICY-MIB", "ipspCredentialFilterGroup"), ("IPSEC-POLICY-MIB", "ipspPeerIdFilterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspRuleFilterCompliance = ipspRuleFilterCompliance.setStatus('current')
ipspIPsecCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 2)).setObjects(("IPSEC-POLICY-MIB", "ipspIpsecGroup"), ("IPSEC-POLICY-MIB", "ipspStaticActionGroup"), ("IPSEC-POLICY-MIB", "ipspPreconfiguredGroup"), ("IPSEC-POLICY-MIB", "ipspCompoundActionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIPsecCompliance = ipspIPsecCompliance.setStatus('current')
ipspIKECompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 3)).setObjects(("IPSEC-POLICY-MIB", "ipspIkeGroup"), ("IPSEC-POLICY-MIB", "ipspCompoundActionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIKECompliance = ipspIKECompliance.setStatus('current')
ipspLoggingCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 4)).setObjects(("IPSEC-POLICY-MIB", "ipspActionLoggingObjectGroup"), ("IPSEC-POLICY-MIB", "ipspActionNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspLoggingCompliance = ipspLoggingCompliance.setStatus('current')
ipspEndpointGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 1)).setObjects(("IPSEC-POLICY-MIB", "ipspEndGroupName"), ("IPSEC-POLICY-MIB", "ipspEndGroupLastChanged"), ("IPSEC-POLICY-MIB", "ipspEndGroupStorageType"), ("IPSEC-POLICY-MIB", "ipspEndGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspEndpointGroup = ipspEndpointGroup.setStatus('current')
ipspGroupContentsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 2)).setObjects(("IPSEC-POLICY-MIB", "ipspGroupContComponentType"), ("IPSEC-POLICY-MIB", "ipspGroupContFilter"), ("IPSEC-POLICY-MIB", "ipspGroupContComponentName"), ("IPSEC-POLICY-MIB", "ipspGroupContLastChanged"), ("IPSEC-POLICY-MIB", "ipspGroupContStorageType"), ("IPSEC-POLICY-MIB", "ipspGroupContRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspGroupContentsGroup = ipspGroupContentsGroup.setStatus('current')
ipspIpsecSystemPolicyNameGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 3)).setObjects(("IPSEC-POLICY-MIB", "ipspSystemPolicyGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIpsecSystemPolicyNameGroup = ipspIpsecSystemPolicyNameGroup.setStatus('current')
ipspRuleDefinitionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 4)).setObjects(("IPSEC-POLICY-MIB", "ipspRuleDefDescription"), ("IPSEC-POLICY-MIB", "ipspRuleDefFilter"), ("IPSEC-POLICY-MIB", "ipspRuleDefFilterNegated"), ("IPSEC-POLICY-MIB", "ipspRuleDefAction"), ("IPSEC-POLICY-MIB", "ipspRuleDefAdminStatus"), ("IPSEC-POLICY-MIB", "ipspRuleDefLastChanged"), ("IPSEC-POLICY-MIB", "ipspRuleDefStorageType"), ("IPSEC-POLICY-MIB", "ipspRuleDefRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspRuleDefinitionGroup = ipspRuleDefinitionGroup.setStatus('current')
ipspCompoundFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 5)).setObjects(("IPSEC-POLICY-MIB", "ipspCompFiltDescription"), ("IPSEC-POLICY-MIB", "ipspCompFiltLogicType"), ("IPSEC-POLICY-MIB", "ipspCompFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspCompFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspCompFiltRowStatus"), ("IPSEC-POLICY-MIB", "ipspSubFiltSubfilter"), ("IPSEC-POLICY-MIB", "ipspSubFiltSubfilterIsNegated"), ("IPSEC-POLICY-MIB", "ipspSubFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspSubFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspSubFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspCompoundFilterGroup = ipspCompoundFilterGroup.setStatus('current')
ipspStaticFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 6)).setObjects(("IPSEC-POLICY-MIB", "ipspTrueFilter"), ("IPSEC-POLICY-MIB", "ipspIkePhase1Filter"), ("IPSEC-POLICY-MIB", "ipspIkePhase2Filter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspStaticFilterGroup = ipspStaticFilterGroup.setStatus('current')
ipspIPHeaderFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 7)).setObjects(("IPSEC-POLICY-MIB", "ipspIpHeadFiltType"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltIPVersion"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltSrcAddressBegin"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltSrcAddressEnd"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltDstAddressBegin"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltDstAddressEnd"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltSrcLowPort"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltSrcHighPort"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltDstLowPort"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltDstHighPort"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltProtocol"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltIPv6FlowLabel"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspIpHeadFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIPHeaderFilterGroup = ipspIPHeaderFilterGroup.setStatus('current')
ipspIPOffsetFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 8)).setObjects(("IPSEC-POLICY-MIB", "ipspIpOffFiltOffset"), ("IPSEC-POLICY-MIB", "ipspIpOffFiltType"), ("IPSEC-POLICY-MIB", "ipspIpOffFiltNumber"), ("IPSEC-POLICY-MIB", "ipspIpOffFiltValue"), ("IPSEC-POLICY-MIB", "ipspIpOffFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpOffFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspIpOffFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIPOffsetFilterGroup = ipspIPOffsetFilterGroup.setStatus('current')
ipspTimeFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 9)).setObjects(("IPSEC-POLICY-MIB", "ipspTimeFiltPeriodStart"), ("IPSEC-POLICY-MIB", "ipspTimeFiltPeriodEnd"), ("IPSEC-POLICY-MIB", "ipspTimeFiltMonthOfYearMask"), ("IPSEC-POLICY-MIB", "ipspTimeFiltDayOfMonthMask"), ("IPSEC-POLICY-MIB", "ipspTimeFiltDayOfWeekMask"), ("IPSEC-POLICY-MIB", "ipspTimeFiltTimeOfDayMaskStart"), ("IPSEC-POLICY-MIB", "ipspTimeFiltTimeOfDayMaskEnd"), ("IPSEC-POLICY-MIB", "ipspTimeFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspTimeFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspTimeFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspTimeFilterGroup = ipspTimeFilterGroup.setStatus('current')
ipspIpsoHeaderFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 10)).setObjects(("IPSEC-POLICY-MIB", "ipspIpsoHeadFiltType"), ("IPSEC-POLICY-MIB", "ipspIpsoHeadFiltClassification"), ("IPSEC-POLICY-MIB", "ipspIpsoHeadFiltProtectionAuth"), ("IPSEC-POLICY-MIB", "ipspIpsoHeadFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpsoHeadFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspIpsoHeadFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIpsoHeaderFilterGroup = ipspIpsoHeaderFilterGroup.setStatus('current')
ipspCredentialFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 11)).setObjects(("IPSEC-POLICY-MIB", "ipspCredFiltCredentialType"), ("IPSEC-POLICY-MIB", "ipspCredFiltMatchFieldName"), ("IPSEC-POLICY-MIB", "ipspCredFiltMatchFieldValue"), ("IPSEC-POLICY-MIB", "ipspCredFiltAcceptCredFrom"), ("IPSEC-POLICY-MIB", "ipspCredFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspCredFiltRowStatus"), ("IPSEC-POLICY-MIB", "ipspCmcDistributionPoint"), ("IPSEC-POLICY-MIB", "ipspCmcThisUpdate"), ("IPSEC-POLICY-MIB", "ipspCmcNextUpdate"), ("IPSEC-POLICY-MIB", "ipspCmcLastChanged"), ("IPSEC-POLICY-MIB", "ipspCmcStorageType"), ("IPSEC-POLICY-MIB", "ipspCmcRowStatus"), ("IPSEC-POLICY-MIB", "ipspRctRevokedDate"), ("IPSEC-POLICY-MIB", "ipspRctRevokedReason"), ("IPSEC-POLICY-MIB", "ipspRctLastChanged"), ("IPSEC-POLICY-MIB", "ipspRctStorageType"), ("IPSEC-POLICY-MIB", "ipspRctRowStatus"), ("IPSEC-POLICY-MIB", "ipspIcmsDistinguishedName"), ("IPSEC-POLICY-MIB", "ipspIcmsPolicyStatement"), ("IPSEC-POLICY-MIB", "ipspIcmsMaxChainLength"), ("IPSEC-POLICY-MIB", "ipspIcmsCredentialName"), ("IPSEC-POLICY-MIB", "ipspIcmsLastChanged"), ("IPSEC-POLICY-MIB", "ipspIcmsStorageType"), ("IPSEC-POLICY-MIB", "ipspIcmsRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredType"), ("IPSEC-POLICY-MIB", "ipspCredCredential"), ("IPSEC-POLICY-MIB", "ipspCredMngName"), ("IPSEC-POLICY-MIB", "ipspCredSize"), ("IPSEC-POLICY-MIB", "ipspCredRemoteID"), ("IPSEC-POLICY-MIB", "ipspCredAdminStatus"), ("IPSEC-POLICY-MIB", "ipspCredLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredStorageType"), ("IPSEC-POLICY-MIB", "ipspCredRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredSegValue"), ("IPSEC-POLICY-MIB", "ipspCredSegLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredSegStorageType"), ("IPSEC-POLICY-MIB", "ipspCredSegRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspCredentialFilterGroup = ipspCredentialFilterGroup.setStatus('current')
ipspPeerIdFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 12)).setObjects(("IPSEC-POLICY-MIB", "ipspPeerIdFiltIdentityType"), ("IPSEC-POLICY-MIB", "ipspPeerIdFiltIdentityValue"), ("IPSEC-POLICY-MIB", "ipspPeerIdFiltLastChanged"), ("IPSEC-POLICY-MIB", "ipspPeerIdFiltStorageType"), ("IPSEC-POLICY-MIB", "ipspPeerIdFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspPeerIdFilterGroup = ipspPeerIdFilterGroup.setStatus('current')
ipspCompoundActionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 13)).setObjects(("IPSEC-POLICY-MIB", "ipspCompActExecutionStrategy"), ("IPSEC-POLICY-MIB", "ipspCompActLastChanged"), ("IPSEC-POLICY-MIB", "ipspCompActStorageType"), ("IPSEC-POLICY-MIB", "ipspCompActRowStatus"), ("IPSEC-POLICY-MIB", "ipspSubActSubActionName"), ("IPSEC-POLICY-MIB", "aiipspCompActLastChanged"), ("IPSEC-POLICY-MIB", "aiipspCompActStorageType"), ("IPSEC-POLICY-MIB", "aiipspCompActRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspCompoundActionGroup = ipspCompoundActionGroup.setStatus('current')
ipspPreconfiguredGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 14)).setObjects(("IPSEC-POLICY-MIB", "ipspSaPreActActionDescription"), ("IPSEC-POLICY-MIB", "ipspSaPreActActionLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspSaPreActActionLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspSaPreActDoActionLogging"), ("IPSEC-POLICY-MIB", "ipspSaPreActDoPacketLogging"), ("IPSEC-POLICY-MIB", "ipspSaPreActDFHandling"), ("IPSEC-POLICY-MIB", "ipspSaPreActActionType"), ("IPSEC-POLICY-MIB", "ipspSaPreActAHSPI"), ("IPSEC-POLICY-MIB", "ipspSaPreActAHTransformName"), ("IPSEC-POLICY-MIB", "ipspSaPreActAHSharedSecretName"), ("IPSEC-POLICY-MIB", "ipspSaPreActESPSPI"), ("IPSEC-POLICY-MIB", "ipspSaPreActESPTransformName"), ("IPSEC-POLICY-MIB", "ipspSaPreActESPEncSecretName"), ("IPSEC-POLICY-MIB", "ipspSaPreActESPAuthSecretName"), ("IPSEC-POLICY-MIB", "ipspSaPreActIPCompSPI"), ("IPSEC-POLICY-MIB", "ipspSaPreActIPCompTransformName"), ("IPSEC-POLICY-MIB", "ipspSaPreActPeerGatewayIdName"), ("IPSEC-POLICY-MIB", "ipspSaPreActLastChanged"), ("IPSEC-POLICY-MIB", "ipspSaPreActStorageType"), ("IPSEC-POLICY-MIB", "ipspSaPreActRowStatus"), ("IPSEC-POLICY-MIB", "ipspAhTranMaxLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspAhTranMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspAhTranAlgorithm"), ("IPSEC-POLICY-MIB", "ipspAhTranReplayProtection"), ("IPSEC-POLICY-MIB", "ipspAhTranReplayWindowSize"), ("IPSEC-POLICY-MIB", "ipspAhTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspAhTranStorageType"), ("IPSEC-POLICY-MIB", "ipspEspTranMaxLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspEspTranMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspEspTranCipherTransformId"), ("IPSEC-POLICY-MIB", "ipspEspTranCipherKeyLength"), ("IPSEC-POLICY-MIB", "ipspEspTranCipherKeyRounds"), ("IPSEC-POLICY-MIB", "ipspEspTranIntegrityAlgorithmId"), ("IPSEC-POLICY-MIB", "ipspEspTranReplayPrevention"), ("IPSEC-POLICY-MIB", "ipspEspTranReplayWindowSize"), ("IPSEC-POLICY-MIB", "ipspEspTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspEspTranStorageType"), ("IPSEC-POLICY-MIB", "ipspEspTranRowStatus"), ("IPSEC-POLICY-MIB", "ipspIpcompTranDictionarySize"), ("IPSEC-POLICY-MIB", "ipspIpcompTranMaxLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspIpcompTranMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspIpcompTranPrivateAlgorithm"), ("IPSEC-POLICY-MIB", "ipspIpcompTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpcompTranStorageType"), ("IPSEC-POLICY-MIB", "ipspIpcompTranRowStatus"), ("IPSEC-POLICY-MIB", "ipspPeerIdValue"), ("IPSEC-POLICY-MIB", "ipspPeerIdType"), ("IPSEC-POLICY-MIB", "ipspPeerIdAddress"), ("IPSEC-POLICY-MIB", "ipspPeerIdAddressType"), ("IPSEC-POLICY-MIB", "ipspPeerIdCredentialName"), ("IPSEC-POLICY-MIB", "ipspPeerIdLastChanged"), ("IPSEC-POLICY-MIB", "ipspPeerIdStorageType"), ("IPSEC-POLICY-MIB", "ipspPeerIdRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredType"), ("IPSEC-POLICY-MIB", "ipspCredCredential"), ("IPSEC-POLICY-MIB", "ipspCredMngName"), ("IPSEC-POLICY-MIB", "ipspCredSize"), ("IPSEC-POLICY-MIB", "ipspCredRemoteID"), ("IPSEC-POLICY-MIB", "ipspCredAdminStatus"), ("IPSEC-POLICY-MIB", "ipspCredLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredStorageType"), ("IPSEC-POLICY-MIB", "ipspCredRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredSegValue"), ("IPSEC-POLICY-MIB", "ipspCredSegLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredSegStorageType"), ("IPSEC-POLICY-MIB", "ipspCredSegRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspPreconfiguredGroup = ipspPreconfiguredGroup.setStatus('current')
ipspStaticActionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 15)).setObjects(("IPSEC-POLICY-MIB", "ipspDropAction"), ("IPSEC-POLICY-MIB", "ipspAcceptAction"), ("IPSEC-POLICY-MIB", "ipspRejectIKEAction"), ("IPSEC-POLICY-MIB", "ipspDropActionLog"), ("IPSEC-POLICY-MIB", "ipspAcceptActionLog"), ("IPSEC-POLICY-MIB", "ipspRejectIKEActionLog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspStaticActionGroup = ipspStaticActionGroup.setStatus('current')
ipspIpsecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 16)).setObjects(("IPSEC-POLICY-MIB", "ipspIpsecActParametersName"), ("IPSEC-POLICY-MIB", "ipspIpsecActProposalsName"), ("IPSEC-POLICY-MIB", "ipspIpsecActUsePfs"), ("IPSEC-POLICY-MIB", "ipspIpsecActVendorId"), ("IPSEC-POLICY-MIB", "ipspIpsecActGroupId"), ("IPSEC-POLICY-MIB", "ipspIpsecActPeerGatewayIdName"), ("IPSEC-POLICY-MIB", "ipspIpsecActUseIkeGroup"), ("IPSEC-POLICY-MIB", "ipspIpsecActGranularity"), ("IPSEC-POLICY-MIB", "ipspIpsecActMode"), ("IPSEC-POLICY-MIB", "ipspIpsecActDFHandling"), ("IPSEC-POLICY-MIB", "ipspIpsecActDoActionLogging"), ("IPSEC-POLICY-MIB", "ipspIpsecActDoPacketLogging"), ("IPSEC-POLICY-MIB", "ipspIpsecActLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpsecActStorageType"), ("IPSEC-POLICY-MIB", "ipspIpsecActRowStatus"), ("IPSEC-POLICY-MIB", "ipspIpsecPropTransformsName"), ("IPSEC-POLICY-MIB", "ipspIpsecPropLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpsecPropStorageType"), ("IPSEC-POLICY-MIB", "ipspIpsecPropRowStatus"), ("IPSEC-POLICY-MIB", "ipspIpsecTranTransformName"), ("IPSEC-POLICY-MIB", "ipspIpsecTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpsecTranStorageType"), ("IPSEC-POLICY-MIB", "ipspIpsecTranRowStatus"), ("IPSEC-POLICY-MIB", "ipspSaNegParamMinLifetimeSecs"), ("IPSEC-POLICY-MIB", "ipspSaNegParamMinLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspSaNegParamRefreshThreshSecs"), ("IPSEC-POLICY-MIB", "ipspSaNegParamRefreshThresholdKB"), ("IPSEC-POLICY-MIB", "ipspSaNegParamIdleDurationSecs"), ("IPSEC-POLICY-MIB", "ipspSaNegParamLastChanged"), ("IPSEC-POLICY-MIB", "ipspSaNegParamStorageType"), ("IPSEC-POLICY-MIB", "ipspSaNegParamRowStatus"), ("IPSEC-POLICY-MIB", "ipspAhTranMaxLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspAhTranMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspAhTranAlgorithm"), ("IPSEC-POLICY-MIB", "ipspAhTranReplayProtection"), ("IPSEC-POLICY-MIB", "ipspAhTranReplayWindowSize"), ("IPSEC-POLICY-MIB", "ipspAhTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspAhTranStorageType"), ("IPSEC-POLICY-MIB", "ipspAhTranRowStatus"), ("IPSEC-POLICY-MIB", "ipspEspTranMaxLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspEspTranMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspEspTranCipherTransformId"), ("IPSEC-POLICY-MIB", "ipspEspTranCipherKeyLength"), ("IPSEC-POLICY-MIB", "ipspEspTranCipherKeyRounds"), ("IPSEC-POLICY-MIB", "ipspEspTranIntegrityAlgorithmId"), ("IPSEC-POLICY-MIB", "ipspEspTranReplayPrevention"), ("IPSEC-POLICY-MIB", "ipspEspTranReplayWindowSize"), ("IPSEC-POLICY-MIB", "ipspEspTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspEspTranStorageType"), ("IPSEC-POLICY-MIB", "ipspEspTranRowStatus"), ("IPSEC-POLICY-MIB", "ipspIpcompTranDictionarySize"), ("IPSEC-POLICY-MIB", "ipspIpcompTranAlgorithm"), ("IPSEC-POLICY-MIB", "ipspIpcompTranMaxLifetimeSec"), ("IPSEC-POLICY-MIB", "ipspIpcompTranMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspIpcompTranPrivateAlgorithm"), ("IPSEC-POLICY-MIB", "ipspIpcompTranLastChanged"), ("IPSEC-POLICY-MIB", "ipspIpcompTranStorageType"), ("IPSEC-POLICY-MIB", "ipspIpcompTranRowStatus"), ("IPSEC-POLICY-MIB", "ipspPeerIdValue"), ("IPSEC-POLICY-MIB", "ipspPeerIdType"), ("IPSEC-POLICY-MIB", "ipspPeerIdAddress"), ("IPSEC-POLICY-MIB", "ipspPeerIdAddressType"), ("IPSEC-POLICY-MIB", "ipspPeerIdCredentialName"), ("IPSEC-POLICY-MIB", "ipspPeerIdLastChanged"), ("IPSEC-POLICY-MIB", "ipspPeerIdStorageType"), ("IPSEC-POLICY-MIB", "ipspPeerIdRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredType"), ("IPSEC-POLICY-MIB", "ipspCredCredential"), ("IPSEC-POLICY-MIB", "ipspCredMngName"), ("IPSEC-POLICY-MIB", "ipspCredSize"), ("IPSEC-POLICY-MIB", "ipspCredRemoteID"), ("IPSEC-POLICY-MIB", "ipspCredAdminStatus"), ("IPSEC-POLICY-MIB", "ipspCredLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredStorageType"), ("IPSEC-POLICY-MIB", "ipspCredRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredSegValue"), ("IPSEC-POLICY-MIB", "ipspCredSegLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredSegStorageType"), ("IPSEC-POLICY-MIB", "ipspCredSegRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIpsecGroup = ipspIpsecGroup.setStatus('current')
ipspIkeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 17)).setObjects(("IPSEC-POLICY-MIB", "ipspIkeActParametersName"), ("IPSEC-POLICY-MIB", "ipspIkeActThresholdDerivedKeys"), ("IPSEC-POLICY-MIB", "ipspIkeActExchangeMode"), ("IPSEC-POLICY-MIB", "ipspIkeActAgressiveModeGroupId"), ("IPSEC-POLICY-MIB", "ipspIkeActIdentityType"), ("IPSEC-POLICY-MIB", "ipspIkeActIdentityContext"), ("IPSEC-POLICY-MIB", "ipspIkeActPeerName"), ("IPSEC-POLICY-MIB", "ipspIkeActVendorId"), ("IPSEC-POLICY-MIB", "ipspIkeActPropName"), ("IPSEC-POLICY-MIB", "ipspIkeActDoActionLogging"), ("IPSEC-POLICY-MIB", "ipspIkeActDoPacketLogging"), ("IPSEC-POLICY-MIB", "ipspIkeActLastChanged"), ("IPSEC-POLICY-MIB", "ipspIkeActStorageType"), ("IPSEC-POLICY-MIB", "ipspIkeActRowStatus"), ("IPSEC-POLICY-MIB", "ipspIkeActPropLastChanged"), ("IPSEC-POLICY-MIB", "ipspIkeActPropStorageType"), ("IPSEC-POLICY-MIB", "ipspIkeActPropRowStatus"), ("IPSEC-POLICY-MIB", "ipspIkePropLifetimeDerivedKeys"), ("IPSEC-POLICY-MIB", "ipspIkePropCipherAlgorithm"), ("IPSEC-POLICY-MIB", "ipspIkePropCipherKeyLength"), ("IPSEC-POLICY-MIB", "ipspIkePropCipherKeyRounds"), ("IPSEC-POLICY-MIB", "ipspIkePropHashAlgorithm"), ("IPSEC-POLICY-MIB", "ipspIkePropPrfAlgorithm"), ("IPSEC-POLICY-MIB", "ipspIkePropVendorId"), ("IPSEC-POLICY-MIB", "ipspIkePropDhGroup"), ("IPSEC-POLICY-MIB", "ipspIkePropAuthenticationMethod"), ("IPSEC-POLICY-MIB", "ipspIkePropMaxLifetimeSecs"), ("IPSEC-POLICY-MIB", "ipspIkePropMaxLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspIkePropProposalLastChanged"), ("IPSEC-POLICY-MIB", "ipspIkePropProposalStorageType"), ("IPSEC-POLICY-MIB", "ipspIkePropProposalRowStatus"), ("IPSEC-POLICY-MIB", "ipspSaNegParamMinLifetimeSecs"), ("IPSEC-POLICY-MIB", "ipspSaNegParamMinLifetimeKB"), ("IPSEC-POLICY-MIB", "ipspSaNegParamRefreshThreshSecs"), ("IPSEC-POLICY-MIB", "ipspSaNegParamRefreshThresholdKB"), ("IPSEC-POLICY-MIB", "ipspSaNegParamIdleDurationSecs"), ("IPSEC-POLICY-MIB", "ipspSaNegParamLastChanged"), ("IPSEC-POLICY-MIB", "ipspSaNegParamStorageType"), ("IPSEC-POLICY-MIB", "ipspSaNegParamRowStatus"), ("IPSEC-POLICY-MIB", "ipspIkeIdCredentialName"), ("IPSEC-POLICY-MIB", "ipspIkeIdLastChanged"), ("IPSEC-POLICY-MIB", "ipspIkeIdStorageType"), ("IPSEC-POLICY-MIB", "ipspIkeIdRowStatus"), ("IPSEC-POLICY-MIB", "ipspAutoIkeAction"), ("IPSEC-POLICY-MIB", "ipspAutoIkeAddressType"), ("IPSEC-POLICY-MIB", "ipspAutoIkeSourceAddress"), ("IPSEC-POLICY-MIB", "ipspAutoIkeSourcePort"), ("IPSEC-POLICY-MIB", "ipspAutoIkeDestAddress"), ("IPSEC-POLICY-MIB", "ipspAutoIkeDestPort"), ("IPSEC-POLICY-MIB", "ipspAutoIkeProtocol"), ("IPSEC-POLICY-MIB", "ipspAutoIkeLastChanged"), ("IPSEC-POLICY-MIB", "ipspAutoIkeStorageType"), ("IPSEC-POLICY-MIB", "ipspAutoIkeRowStatus"), ("IPSEC-POLICY-MIB", "ipspPeerIdValue"), ("IPSEC-POLICY-MIB", "ipspPeerIdType"), ("IPSEC-POLICY-MIB", "ipspPeerIdAddress"), ("IPSEC-POLICY-MIB", "ipspPeerIdAddressType"), ("IPSEC-POLICY-MIB", "ipspPeerIdCredentialName"), ("IPSEC-POLICY-MIB", "ipspPeerIdLastChanged"), ("IPSEC-POLICY-MIB", "ipspPeerIdStorageType"), ("IPSEC-POLICY-MIB", "ipspPeerIdRowStatus"), ("IPSEC-POLICY-MIB", "ipspCmcDistributionPoint"), ("IPSEC-POLICY-MIB", "ipspCmcThisUpdate"), ("IPSEC-POLICY-MIB", "ipspCmcNextUpdate"), ("IPSEC-POLICY-MIB", "ipspCmcLastChanged"), ("IPSEC-POLICY-MIB", "ipspCmcStorageType"), ("IPSEC-POLICY-MIB", "ipspCmcRowStatus"), ("IPSEC-POLICY-MIB", "ipspRctRevokedDate"), ("IPSEC-POLICY-MIB", "ipspRctRevokedReason"), ("IPSEC-POLICY-MIB", "ipspRctLastChanged"), ("IPSEC-POLICY-MIB", "ipspRctStorageType"), ("IPSEC-POLICY-MIB", "ipspRctRowStatus"), ("IPSEC-POLICY-MIB", "ipspIcmsDistinguishedName"), ("IPSEC-POLICY-MIB", "ipspIcmsPolicyStatement"), ("IPSEC-POLICY-MIB", "ipspIcmsMaxChainLength"), ("IPSEC-POLICY-MIB", "ipspIcmsCredentialName"), ("IPSEC-POLICY-MIB", "ipspIcmsLastChanged"), ("IPSEC-POLICY-MIB", "ipspIcmsStorageType"), ("IPSEC-POLICY-MIB", "ipspIcmsRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredType"), ("IPSEC-POLICY-MIB", "ipspCredCredential"), ("IPSEC-POLICY-MIB", "ipspCredMngName"), ("IPSEC-POLICY-MIB", "ipspCredSize"), ("IPSEC-POLICY-MIB", "ipspCredRemoteID"), ("IPSEC-POLICY-MIB", "ipspCredAdminStatus"), ("IPSEC-POLICY-MIB", "ipspCredLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredStorageType"), ("IPSEC-POLICY-MIB", "ipspCredRowStatus"), ("IPSEC-POLICY-MIB", "ipspCredSegValue"), ("IPSEC-POLICY-MIB", "ipspCredSegLastChanged"), ("IPSEC-POLICY-MIB", "ipspCredSegStorageType"), ("IPSEC-POLICY-MIB", "ipspCredSegRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspIkeGroup = ipspIkeGroup.setStatus('current')
ipspActionLoggingObjectGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 18)).setObjects(("IPSEC-POLICY-MIB", "ipspActionExecuted"), ("IPSEC-POLICY-MIB", "ipspIPInterfaceType"), ("IPSEC-POLICY-MIB", "ipspIPInterfaceAddress"), ("IPSEC-POLICY-MIB", "ipspIPSourceType"), ("IPSEC-POLICY-MIB", "ipspIPSourceAddress"), ("IPSEC-POLICY-MIB", "ipspIPDestinationType"), ("IPSEC-POLICY-MIB", "ipspIPDestinationAddress"), ("IPSEC-POLICY-MIB", "ipspPacketDirection"), ("IPSEC-POLICY-MIB", "ipspPacketPart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspActionLoggingObjectGroup = ipspActionLoggingObjectGroup.setStatus('current')
ipspActionNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 19)).setObjects(("IPSEC-POLICY-MIB", "ipspActionNotification"), ("IPSEC-POLICY-MIB", "ipspPacketNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipspActionNotificationGroup = ipspActionNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("IPSEC-POLICY-MIB", ipspRejectIKEActionLog=ipspRejectIKEActionLog, ipspIpsecProposalsTable=ipspIpsecProposalsTable, ipspIpOffFiltType=ipspIpOffFiltType, ipspIpsecActMode=ipspIpsecActMode, ipspIkeActStorageType=ipspIkeActStorageType, ipspIcmsLastChanged=ipspIcmsLastChanged, ipspAhTranReplayWindowSize=ipspAhTranReplayWindowSize, ipspAhTransformEntry=ipspAhTransformEntry, ipspEndGroupRowStatus=ipspEndGroupRowStatus, ipspSaPreActActionDescription=ipspSaPreActActionDescription, ipspIkeActPropRowStatus=ipspIkeActPropRowStatus, ipspIkeActPropLastChanged=ipspIkeActPropLastChanged, ipspIpsecActLastChanged=ipspIpsecActLastChanged, ipspSaNegotiationParametersTable=ipspSaNegotiationParametersTable, ipspCredFiltAcceptCredFrom=ipspCredFiltAcceptCredFrom, ipspPeerIdFiltRowStatus=ipspPeerIdFiltRowStatus, ipspIpcompTransformTable=ipspIpcompTransformTable, ipspCredSegRowStatus=ipspCredSegRowStatus, ipspGroupContFilter=ipspGroupContFilter, ipspIpHeadFiltIPVersion=ipspIpHeadFiltIPVersion, ipspCompFiltName=ipspCompFiltName, ipspGroupContLastChanged=ipspGroupContLastChanged, ipspIcmsCredentialName=ipspIcmsCredentialName, ipspIkeActName=ipspIkeActName, ipspLocalConfigObjects=ipspLocalConfigObjects, ipspCmcLastChanged=ipspCmcLastChanged, ipspEspTranLastChanged=ipspEspTranLastChanged, ipspTimeFilterEntry=ipspTimeFilterEntry, ipspIpcompTranRowStatus=ipspIpcompTranRowStatus, ipspActionExecuted=ipspActionExecuted, ipspCredMngCRLEntry=ipspCredMngCRLEntry, ipspPeerIdRowStatus=ipspPeerIdRowStatus, ipspIPsecCompliance=ipspIPsecCompliance, ipspTimeFiltStorageType=ipspTimeFiltStorageType, ipspIkeActPropPriority=ipspIkeActPropPriority, ipspPeerIdStorageType=ipspPeerIdStorageType, ipspCredentialEntry=ipspCredentialEntry, ipspIpsecActVendorId=ipspIpsecActVendorId, ipspIpsecSystemPolicyNameGroup=ipspIpsecSystemPolicyNameGroup, ipspAutoIkeDestPort=ipspAutoIkeDestPort, ipspCompFiltStorageType=ipspCompFiltStorageType, ipspAutoIkeProtocol=ipspAutoIkeProtocol, ipspCmcStorageType=ipspCmcStorageType, ipspIpsecTranRowStatus=ipspIpsecTranRowStatus, ipspIkePropMaxLifetimeKB=ipspIkePropMaxLifetimeKB, ipspCompoundFilterGroup=ipspCompoundFilterGroup, ipspCompActRowStatus=ipspCompActRowStatus, ipspIpOffFiltLastChanged=ipspIpOffFiltLastChanged, ipspLoggingCompliance=ipspLoggingCompliance, ipspSubFiltStorageType=ipspSubFiltStorageType, ipspSaPreActAHTransformName=ipspSaPreActAHTransformName, ipspEndGroupName=ipspEndGroupName, ipspIkePropLifetimeDerivedKeys=ipspIkePropLifetimeDerivedKeys, ipspIkeIdRowStatus=ipspIkeIdRowStatus, ipspEspTranStorageType=ipspEspTranStorageType, ipspPeerIdName=ipspPeerIdName, ipspAutoIkeSourcePort=ipspAutoIkeSourcePort, ipspSaPreActActionType=ipspSaPreActActionType, ipspIkePropVendorId=ipspIkePropVendorId, ipspEspTranMaxLifetimeKB=ipspEspTranMaxLifetimeKB, ipspIpcompTranLastChanged=ipspIpcompTranLastChanged, ipspIpsecTranType=ipspIpsecTranType, ipspIcmsMaxChainLength=ipspIcmsMaxChainLength, ipspIpHeadFiltType=ipspIpHeadFiltType, ipspSystemPolicyGroupName=ipspSystemPolicyGroupName, ipspPeerIdAddress=ipspPeerIdAddress, ipspIkePropCipherKeyLength=ipspIkePropCipherKeyLength, ipspEspTranCipherTransformId=ipspEspTranCipherTransformId, ipspIkeActDoPacketLogging=ipspIkeActDoPacketLogging, ipspTimeFiltMonthOfYearMask=ipspTimeFiltMonthOfYearMask, ipspRevokedCertificateEntry=ipspRevokedCertificateEntry, ipspPeerIdFiltStorageType=ipspPeerIdFiltStorageType, ipspRctRowStatus=ipspRctRowStatus, ipspIKECompliance=ipspIKECompliance, ipspCredSegIndex=ipspCredSegIndex, ipspCompActExecutionStrategy=ipspCompActExecutionStrategy, ipspSaPreActStorageType=ipspSaPreActStorageType, ipspIkePropDhGroup=ipspIkePropDhGroup, ipspTimeFiltTimeOfDayMaskEnd=ipspTimeFiltTimeOfDayMaskEnd, ipspIkeActExchangeMode=ipspIkeActExchangeMode, ipspIPInterfaceAddress=ipspIPInterfaceAddress, ipspSubFiltPriority=ipspSubFiltPriority, ipspSaPreActSADirection=ipspSaPreActSADirection, ipspTrueFilterInstance=ipspTrueFilterInstance, ipspSaPreActESPEncSecretName=ipspSaPreActESPEncSecretName, ipspSubFiltSubfilter=ipspSubFiltSubfilter, ipspIpsecActProposalsName=ipspIpsecActProposalsName, ipspIpsoHeaderFilterTable=ipspIpsoHeaderFilterTable, ipspIpsecActRowStatus=ipspIpsecActRowStatus, ipspEndGroupLastChanged=ipspEndGroupLastChanged, ipspSubFiltRowStatus=ipspSubFiltRowStatus, ipspIpcompTranDictionarySize=ipspIpcompTranDictionarySize, ipspPeerIdFiltLastChanged=ipspPeerIdFiltLastChanged, ipspIpsecActUseIkeGroup=ipspIpsecActUseIkeGroup, ipspEspTranCipherKeyLength=ipspEspTranCipherKeyLength, ipspIpHeadFiltProtocol=ipspIpHeadFiltProtocol, ipspIpsecPropProtocolId=ipspIpsecPropProtocolId, ipspCredFiltLastChanged=ipspCredFiltLastChanged, ipspSaNegParamName=ipspSaNegParamName, ipspSaPreActAHSharedSecretName=ipspSaPreActAHSharedSecretName, ipspTimeFilterGroup=ipspTimeFilterGroup, ipspRevokedCertificateTable=ipspRevokedCertificateTable, ipspIpHeaderFilterEntry=ipspIpHeaderFilterEntry, ipspIpsecTransformsEntry=ipspIpsecTransformsEntry, ipspPeerIdCredentialName=ipspPeerIdCredentialName, ipspRuleDefStorageType=ipspRuleDefStorageType, ipspStaticActions=ipspStaticActions, ipspPeerIdentityEntry=ipspPeerIdentityEntry, ipspIpsoHeadFiltRowStatus=ipspIpsoHeadFiltRowStatus, ipspIPDestinationType=ipspIPDestinationType, ipspIkePropAuthenticationMethod=ipspIkePropAuthenticationMethod, ipspAhTranStorageType=ipspAhTranStorageType, ipspIpHeaderFilterTable=ipspIpHeaderFilterTable, ipspIkePropCipherAlgorithm=ipspIkePropCipherAlgorithm, ipspIpHeadFiltDstHighPort=ipspIpHeadFiltDstHighPort, ipspIpOffFiltRowStatus=ipspIpOffFiltRowStatus, ipspIpOffFiltName=ipspIpOffFiltName, ipspRuleFilterCompliance=ipspRuleFilterCompliance, ipspIpHeadFiltDstLowPort=ipspIpHeadFiltDstLowPort, ipspIpsecPropRowStatus=ipspIpsecPropRowStatus, ipspIpcompTranPrivateAlgorithm=ipspIpcompTranPrivateAlgorithm, ipspAhTranAlgorithm=ipspAhTranAlgorithm, ipspSubactionsTable=ipspSubactionsTable, aiipspCompActLastChanged=aiipspCompActLastChanged, ipspPacketNotification=ipspPacketNotification, ipspSaPreActESPTransformName=ipspSaPreActESPTransformName, ipspIpsecPropStorageType=ipspIpsecPropStorageType, ipspNotificationObjects=ipspNotificationObjects, ipspCredMngCRLTable=ipspCredMngCRLTable, ipspSaNegParamLastChanged=ipspSaNegParamLastChanged, ipspIkePropMaxLifetimeSecs=ipspIkePropMaxLifetimeSecs, ipspEspTranName=ipspEspTranName, ipspCredSegValue=ipspCredSegValue, ipspAhTranLastChanged=ipspAhTranLastChanged, aiipspCompActStorageType=aiipspCompActStorageType, ipspIpsecActParametersName=ipspIpsecActParametersName, ipspRctRevokedReason=ipspRctRevokedReason, ipspGroupContName=ipspGroupContName, ipspCredSize=ipspCredSize, ipspCredSegStorageType=ipspCredSegStorageType, ipspPeerIdAddressType=ipspPeerIdAddressType, ipspIpOffsetFilterEntry=ipspIpOffsetFilterEntry, ipspCompoundFilterTable=ipspCompoundFilterTable, ipspTimeFiltDayOfWeekMask=ipspTimeFiltDayOfWeekMask, ipspIkeActIdentityType=ipspIkeActIdentityType, ipspEndGroupIdentType=ipspEndGroupIdentType, ipspIPDestinationAddress=ipspIPDestinationAddress, ipspSaNegParamRefreshThreshSecs=ipspSaNegParamRefreshThreshSecs, ipspIkeIdentityTable=ipspIkeIdentityTable, ipspRuleDefFilter=ipspRuleDefFilter, ipspIpsecActPeerGatewayIdName=ipspIpsecActPeerGatewayIdName, ipspAutoIkeStorageType=ipspAutoIkeStorageType, ipspRuleDefinitionGroup=ipspRuleDefinitionGroup, ipspAhTranReplayProtection=ipspAhTranReplayProtection, ipspDropAction=ipspDropAction, ipspIkeActDoActionLogging=ipspIkeActDoActionLogging, ipspTimeFiltLastChanged=ipspTimeFiltLastChanged, PYSNMP_MODULE_ID=ipspMIB, ipspIkeIdentityEntry=ipspIkeIdentityEntry, ipspIkeActThresholdDerivedKeys=ipspIkeActThresholdDerivedKeys, ipspActionLoggingObjectGroup=ipspActionLoggingObjectGroup, ipspEspTransformTable=ipspEspTransformTable, ipspSaPreActRowStatus=ipspSaPreActRowStatus, ipspIkeActRowStatus=ipspIkeActRowStatus, ipspCmcRowStatus=ipspCmcRowStatus, ipspRuleDefAction=ipspRuleDefAction, ipspSubFiltSubfilterIsNegated=ipspSubFiltSubfilterIsNegated, ipspIpsecActUsePfs=ipspIpsecActUsePfs, ipspAutoIkeRowStatus=ipspAutoIkeRowStatus, ipspIpsecActGranularity=ipspIpsecActGranularity, ipspCredFiltRowStatus=ipspCredFiltRowStatus, ipspIpOffFiltOffset=ipspIpOffFiltOffset, ipspAutoIkeAction=ipspAutoIkeAction, ipspSaNegParamRefreshThresholdKB=ipspSaNegParamRefreshThresholdKB, ipspRuleDefFilterNegated=ipspRuleDefFilterNegated, ipspCredMngName=ipspCredMngName, ipspCompliances=ipspCompliances, ipspCredFiltName=ipspCredFiltName, ipspIpHeadFiltSrcHighPort=ipspIpHeadFiltSrcHighPort, ipspCredName=ipspCredName, ipspIpsecActionEntry=ipspIpsecActionEntry, ipspIpsoHeadFiltName=ipspIpsoHeadFiltName, ipspIpsecTransformsTable=ipspIpsecTransformsTable, IpspCredentialType=IpspCredentialType, ipspCredFiltMatchFieldName=ipspCredFiltMatchFieldName, ipspCredentialTable=ipspCredentialTable, ipspConfigObjects=ipspConfigObjects, ipspIPSourceType=ipspIPSourceType, ipspIcmsName=ipspIcmsName, ipspIpsecPropLastChanged=ipspIpsecPropLastChanged, ipspCredFiltCredentialType=ipspCredFiltCredentialType, ipspGroupContRowStatus=ipspGroupContRowStatus, ipspIkePropProposalStorageType=ipspIkePropProposalStorageType, ipspIpsecTranPriority=ipspIpsecTranPriority, ipspTimeFiltRowStatus=ipspTimeFiltRowStatus, ipspAutoIkeDestAddress=ipspAutoIkeDestAddress, ipspIpsoHeadFiltLastChanged=ipspIpsoHeadFiltLastChanged, ipspEspTranMaxLifetimeSec=ipspEspTranMaxLifetimeSec, ipspAhTranRowStatus=ipspAhTranRowStatus, ipspTimeFiltDayOfMonthMask=ipspTimeFiltDayOfMonthMask, ipspPeerIdLastChanged=ipspPeerIdLastChanged, ipspIpsoHeadFiltClassification=ipspIpsoHeadFiltClassification, ipspEndGroupStorageType=ipspEndGroupStorageType, ipspIkeActionProposalsTable=ipspIkeActionProposalsTable, ipspGroupContStorageType=ipspGroupContStorageType, ipspIpsecTranStorageType=ipspIpsecTranStorageType, ipspIpsecPropName=ipspIpsecPropName, ipspPeerIdentityFilterEntry=ipspPeerIdentityFilterEntry, ipspTimeFilterTable=ipspTimeFilterTable, ipspIpsecActGroupId=ipspIpsecActGroupId, ipspPeerIdFiltIdentityValue=ipspPeerIdFiltIdentityValue, ipspPreconfiguredGroup=ipspPreconfiguredGroup, ipspPeerIdFiltName=ipspPeerIdFiltName, ipspSaPreconfiguredActionEntry=ipspSaPreconfiguredActionEntry, IpspAdminStatus=IpspAdminStatus, IpspSADirection=IpspSADirection, ipspStaticFilterGroup=ipspStaticFilterGroup, ipspSaPreActESPSPI=ipspSaPreActESPSPI, ipspGroupContentsGroup=ipspGroupContentsGroup, ipspPeerIdType=ipspPeerIdType, ipspIpOffFiltStorageType=ipspIpOffFiltStorageType, ipspAcceptAction=ipspAcceptAction, ipspActionNotificationGroup=ipspActionNotificationGroup, ipspIkeActParametersName=ipspIkeActParametersName, ipspIpcompTranName=ipspIpcompTranName, ipspEspTransformEntry=ipspEspTransformEntry, ipspIpsecProposalsEntry=ipspIpsecProposalsEntry, ipspIcmsPolicyStatement=ipspIcmsPolicyStatement, ipspIpcompTranMaxLifetimeKB=ipspIpcompTranMaxLifetimeKB, ipspIkeIdStorageType=ipspIkeIdStorageType, ipspSubActSubActionName=ipspSubActSubActionName, ipspGroupContComponentType=ipspGroupContComponentType, ipspEspTranReplayPrevention=ipspEspTranReplayPrevention, ipspIpsecActionTable=ipspIpsecActionTable, ipspIpHeadFiltIPv6FlowLabel=ipspIpHeadFiltIPv6FlowLabel, ipspRctCertSerialNumber=ipspRctCertSerialNumber, ipspIpHeadFiltDstAddressEnd=ipspIpHeadFiltDstAddressEnd, ipspSaPreActLastChanged=ipspSaPreActLastChanged, ipspRuleDefLastChanged=ipspRuleDefLastChanged, ipspPeerIdentityTable=ipspPeerIdentityTable, ipspIkePropProposalLastChanged=ipspIkePropProposalLastChanged, ipspRuleDefRowStatus=ipspRuleDefRowStatus, ipspSaPreActActionName=ipspSaPreActActionName, ipspStaticActionGroup=ipspStaticActionGroup, ipspSaNegParamStorageType=ipspSaNegParamStorageType, ipspCredType=ipspCredType, ipspIkePropPrfAlgorithm=ipspIkePropPrfAlgorithm, ipspSaPreActDoPacketLogging=ipspSaPreActDoPacketLogging, ipspSaPreActIPCompTransformName=ipspSaPreActIPCompTransformName, ipspIpsoHeaderFilterEntry=ipspIpsoHeaderFilterEntry, ipspCompActStorageType=ipspCompActStorageType, ipspEndpointGroup=ipspEndpointGroup, ipspIpHeadFiltName=ipspIpHeadFiltName, ipspSaPreActDFHandling=ipspSaPreActDFHandling)
mibBuilder.exportSymbols("IPSEC-POLICY-MIB", ipspSubfiltersTable=ipspSubfiltersTable, ipspCompActLastChanged=ipspCompActLastChanged, ipspCompoundActionGroup=ipspCompoundActionGroup, ipspIpsecActName=ipspIpsecActName, ipspIkePropHashAlgorithm=ipspIkePropHashAlgorithm, ipspIpHeadFiltStorageType=ipspIpHeadFiltStorageType, ipspIkePhase1Filter=ipspIkePhase1Filter, ipspIkeActVendorId=ipspIkeActVendorId, ipspSaPreActActionLifetimeKB=ipspSaPreActActionLifetimeKB, ipspTimeFiltPeriodEnd=ipspTimeFiltPeriodEnd, ipspCredentialFilterTable=ipspCredentialFilterTable, ipspIpsoHeadFiltProtectionAuth=ipspIpsoHeadFiltProtectionAuth, ipspIkeActAgressiveModeGroupId=ipspIkeActAgressiveModeGroupId, ipspIcmsRowStatus=ipspIcmsRowStatus, ipspSaPreActIPCompSPI=ipspSaPreActIPCompSPI, ipspIpOffFiltNumber=ipspIpOffFiltNumber, ipspEndGroupAddress=ipspEndGroupAddress, ipspSaPreActDoActionLogging=ipspSaPreActDoActionLogging, ipspIPHeaderFilterGroup=ipspIPHeaderFilterGroup, ipspIpcompTranMaxLifetimeSec=ipspIpcompTranMaxLifetimeSec, ipspIkeActPropStorageType=ipspIkeActPropStorageType, ipspCompFiltLastChanged=ipspCompFiltLastChanged, ipspIpsecTranLastChanged=ipspIpsecTranLastChanged, ipspCredentialFilterGroup=ipspCredentialFilterGroup, ipspSaPreActPeerGatewayIdName=ipspSaPreActPeerGatewayIdName, ipspPacketPart=ipspPacketPart, ipspEspTranRowStatus=ipspEspTranRowStatus, ipspRuleDefinitionEntry=ipspRuleDefinitionEntry, ipspIpsoHeadFiltType=ipspIpsoHeadFiltType, ipspIpcompTransformEntry=ipspIpcompTransformEntry, ipspEspTranCipherKeyRounds=ipspEspTranCipherKeyRounds, ipspRuleDefinitionTable=ipspRuleDefinitionTable, ipspIkeProposalEntry=ipspIkeProposalEntry, ipspStaticFilters=ipspStaticFilters, ipspTrueFilter=ipspTrueFilter, ipspIkePhase2Filter=ipspIkePhase2Filter, ipspIpOffFiltValue=ipspIpOffFiltValue, ipspSaNegParamIdleDurationSecs=ipspSaNegParamIdleDurationSecs, ipspCompFiltRowStatus=ipspCompFiltRowStatus, ipspCredFiltStorageType=ipspCredFiltStorageType, ipspSaPreconfiguredActionTable=ipspSaPreconfiguredActionTable, ipspCompActName=ipspCompActName, ipspConformanceObjects=ipspConformanceObjects, ipspAutoIkeLastChanged=ipspAutoIkeLastChanged, ipspAhTranName=ipspAhTranName, ipspNotifications=ipspNotifications, ipspAhTranMaxLifetimeKB=ipspAhTranMaxLifetimeKB, ipspSaPreActActionLifetimeSec=ipspSaPreActActionLifetimeSec, ipspIkeActLastChanged=ipspIkeActLastChanged, ipspSaNegotiationParametersEntry=ipspSaNegotiationParametersEntry, ipspTimeFiltPeriodStart=ipspTimeFiltPeriodStart, ipspPeerIdPriority=ipspPeerIdPriority, ipspPeerIdValue=ipspPeerIdValue, ipspCredFiltMatchFieldValue=ipspCredFiltMatchFieldValue, ipspCredCredential=ipspCredCredential, ipspCompoundActionTable=ipspCompoundActionTable, ipspIpHeadFiltSrcAddressEnd=ipspIpHeadFiltSrcAddressEnd, ipspCredRemoteID=ipspCredRemoteID, ipspPeerIdentityFilterTable=ipspPeerIdentityFilterTable, ipspIkeIdLastChanged=ipspIkeIdLastChanged, ipspCompFiltDescription=ipspCompFiltDescription, ipspIpsecActStorageType=ipspIpsecActStorageType, IpspIdentityFilter=IpspIdentityFilter, ipspIpsoHeaderFilterGroup=ipspIpsoHeaderFilterGroup, ipspCmcNextUpdate=ipspCmcNextUpdate, ipspIkeActIdentityContext=ipspIkeActIdentityContext, ipspIkeIdCredentialName=ipspIkeIdCredentialName, ipspIpsecActDoActionLogging=ipspIpsecActDoActionLogging, ipspAutoIkeSourceAddress=ipspAutoIkeSourceAddress, ipspSaPreActAHSPI=ipspSaPreActAHSPI, ipspGroups=ipspGroups, ipspCredentialSegmentEntry=ipspCredentialSegmentEntry, ipspIpHeadFiltLastChanged=ipspIpHeadFiltLastChanged, ipspCredRowStatus=ipspCredRowStatus, ipspCmcDistributionPoint=ipspCmcDistributionPoint, ipspIPOffsetFilterGroup=ipspIPOffsetFilterGroup, ipspRctLastChanged=ipspRctLastChanged, ipspIpHeadFiltSrcAddressBegin=ipspIpHeadFiltSrcAddressBegin, ipspNotificationVariables=ipspNotificationVariables, ipspMIB=ipspMIB, ipspIkePropProposalRowStatus=ipspIkePropProposalRowStatus, ipspGroupContentsTable=ipspGroupContentsTable, ipspAutostartIkeEntry=ipspAutostartIkeEntry, ipspIpcompTranAlgorithm=ipspIpcompTranAlgorithm, ipspCompoundActionEntry=ipspCompoundActionEntry, ipspEspTranReplayWindowSize=ipspEspTranReplayWindowSize, ipspPacketDirection=ipspPacketDirection, ipspIcmsDistinguishedName=ipspIcmsDistinguishedName, ipspRctRevokedDate=ipspRctRevokedDate, ipspIpcompTranStorageType=ipspIpcompTranStorageType, ipspIcmsStorageType=ipspIcmsStorageType, ipspRctStorageType=ipspRctStorageType, ipspCredLastChanged=ipspCredLastChanged, ipspSubfiltersEntry=ipspSubfiltersEntry, ipspDropActionLog=ipspDropActionLog, ipspSubActPriority=ipspSubActPriority, ipspCmcThisUpdate=ipspCmcThisUpdate, ipspTimeFiltTimeOfDayMaskStart=ipspTimeFiltTimeOfDayMaskStart, ipspSaNegParamMinLifetimeSecs=ipspSaNegParamMinLifetimeSecs, ipspIpsecGroup=ipspIpsecGroup, ipspSubactionsEntry=ipspSubactionsEntry, ipspCompFiltLogicType=ipspCompFiltLogicType, ipspGroupContentsEntry=ipspGroupContentsEntry, ipspIpHeadFiltDstAddressBegin=ipspIpHeadFiltDstAddressBegin, ipspSaPreActESPAuthSecretName=ipspSaPreActESPAuthSecretName, ipspIpsecTranTransformName=ipspIpsecTranTransformName, ipspIpsecCredMngServiceTable=ipspIpsecCredMngServiceTable, ipspAcceptActionLog=ipspAcceptActionLog, ipspIpHeadFiltRowStatus=ipspIpHeadFiltRowStatus, ipspIpOffsetFilterTable=ipspIpOffsetFilterTable, ipspIPInterfaceType=ipspIPInterfaceType, ipspIkeActionTable=ipspIkeActionTable, ipspSaNegParamRowStatus=ipspSaNegParamRowStatus, ipspSaNegParamMinLifetimeKB=ipspSaNegParamMinLifetimeKB, ipspIpsecPropPriority=ipspIpsecPropPriority, ipspPeerIdFiltIdentityType=ipspPeerIdFiltIdentityType, ipspRuleDefAdminStatus=ipspRuleDefAdminStatus, ipspIkeActionProposalsEntry=ipspIkeActionProposalsEntry, ipspRuleDefDescription=ipspRuleDefDescription, ipspCredAdminStatus=ipspCredAdminStatus, ipspIkeGroup=ipspIkeGroup, ipspIpsecPropTransformsName=ipspIpsecPropTransformsName, ipspGroupContPriority=ipspGroupContPriority, ipspIkeActionEntry=ipspIkeActionEntry, ipspCredStorageType=ipspCredStorageType, ipspRejectIKEAction=ipspRejectIKEAction, ipspTimeFiltName=ipspTimeFiltName, ipspIkeActPeerName=ipspIkeActPeerName, ipspIPSourceAddress=ipspIPSourceAddress, ipspAutostartIkeTable=ipspAutostartIkeTable, ipspSubFiltLastChanged=ipspSubFiltLastChanged, ipspIkePropCipherKeyRounds=ipspIkePropCipherKeyRounds, IpspBooleanOperator=IpspBooleanOperator, ipspIkeActPropName=ipspIkeActPropName, IpspIPPacketLogging=IpspIPPacketLogging, ipspGroupContComponentName=ipspGroupContComponentName, ipspAhTranMaxLifetimeSec=ipspAhTranMaxLifetimeSec, ipspEndpointToGroupEntry=ipspEndpointToGroupEntry, ipspEndpointToGroupTable=ipspEndpointToGroupTable, ipspIpHeadFiltSrcLowPort=ipspIpHeadFiltSrcLowPort, ipspAutoIkePriority=ipspAutoIkePriority, ipspIkeProposalTable=ipspIkeProposalTable, ipspCmcCRLName=ipspCmcCRLName, ipspIpsecCredMngServiceEntry=ipspIpsecCredMngServiceEntry, aiipspCompActRowStatus=aiipspCompActRowStatus, ipspPeerIdFilterGroup=ipspPeerIdFilterGroup, ipspCompoundFilterEntry=ipspCompoundFilterEntry, ipspActionNotification=ipspActionNotification, ipspIpsecTranName=ipspIpsecTranName, ipspIpsecActDoPacketLogging=ipspIpsecActDoPacketLogging, ipspIpsoHeadFiltStorageType=ipspIpsoHeadFiltStorageType, ipspAutoIkeAddressType=ipspAutoIkeAddressType, ipspRuleDefName=ipspRuleDefName, ipspEspTranIntegrityAlgorithmId=ipspEspTranIntegrityAlgorithmId, ipspCredentialFilterEntry=ipspCredentialFilterEntry, ipspCredentialSegmentTable=ipspCredentialSegmentTable, ipspAhTransformTable=ipspAhTransformTable, ipspIpsecActDFHandling=ipspIpsecActDFHandling, ipspCredSegLastChanged=ipspCredSegLastChanged)
